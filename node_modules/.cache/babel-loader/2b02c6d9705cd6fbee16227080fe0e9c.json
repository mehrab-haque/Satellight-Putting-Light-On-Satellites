{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\src\\\\components\\\\ModelView.js\";\nimport React, { useState, createRef, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { getSatelliteInfo } from \"tle.js\";\nimport Globe, { Point } from 'react-globe.gl';\nimport * as THREE from 'three';\nimport { sat_data } from '../assets/master';\n\nconst map = (value, x1, y1, x2, y2) => (value - x1) * (y2 - x2) / (y1 - x1) + x2;\n\nvar sat_arr = [];\nObject.keys(sat_data).map(key => {\n  var data = sat_data[key];\n  sat_arr.push(getSatelliteInfo([data.tle_line1, data.tle_line2], Date.now(), 0, 0, 0));\n});\nvar point_arr = [];\nsat_arr.map((sat, ind) => {\n  var schema = {\n    lat: sat.lat,\n    lng: sat.lng,\n    alt: sat.height / 6400,\n    radius: map(sat.height, 400, 35000, 3, 12),\n    height: sat.height,\n    velocity: sat.velocity,\n    color: sat_data[Object.keys(sat_data)[ind]]['color'],\n    ind: ind\n  };\n  point_arr.push(schema);\n});\nconst ModelView = forwardRef((props, ref) => {\n  const [pointArr, setPointArr] = useState(point_arr);\n  const globeEl = useRef();\n  useImperativeHandle(ref, () => ({\n    setSatellite(sat) {}\n\n  }));\n  useEffect(() => {\n    var defaultSat = Object.keys(sat_data).indexOf(props.satCode);\n    globeEl.current.pointOfView({\n      lat: point_arr[defaultSat].lat + 5,\n      lng: point_arr[defaultSat].lng - 5,\n      altitude: pointArr[defaultSat].alt * 1.5\n    });\n  }, []);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      sat_arr = [];\n      Object.keys(sat_data).map(key => {\n        var data = sat_data[key];\n        sat_arr.push(getSatelliteInfo([data.tle_line1, data.tle_line2], Date.now(), 23.762397, 90.418917, 0));\n      });\n      point_arr = [];\n      sat_arr.map((sat, ind) => {\n        var schema = {\n          lat: sat.lat,\n          lng: sat.lng,\n          alt: sat.height / 6400,\n          radius: map(sat.height, 400, 35000, 2.5, 6),\n          height: sat.height,\n          velocity: sat.velocity,\n          color: sat_data[Object.keys(sat_data)[ind]]['color'],\n          ind: ind\n        };\n        point_arr.push(schema);\n      });\n      setPointArr(point_arr);\n    }, 500);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Globe, {\n    showAtmosphere: false,\n    backgroundColor: \"#ffffff\",\n    ref: globeEl,\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-day.jpg\",\n    bumpImageUrl: \"//unpkg.com/three-globe/example/img/earth-topology.png\",\n    showGraticules: true,\n    onCustomLayerHover: d => {\n      if (d != null && d != undefined) {\n        console.log(d.ind);\n      }\n    },\n    onCustomLayerClick: d => {\n      if (d != null && d != undefined) {}\n    },\n    customLayerData: pointArr,\n    customThreeObject: d => {\n      var mesh1 = new THREE.Mesh(new THREE.SphereBufferGeometry(d.radius), new THREE.MeshLambertMaterial({\n        color: d.color\n      })); //var loader = new THREE.FontLoader();\n      //loader.load( 'fonts/helvetiker_regular.typeface.json', function ( font ) {\n      //console.log(font)\n      //  } );\n      //  console.log(geometry)\n\n      /*var mesh3=new THREE.Mesh(\r\n        new THREE.TextGeometry( 'Hello three.js!', {\r\n          font: 'sdsddssd',\r\n          size: 80,\r\n          height: 5,\r\n          curveSegments: 12,\r\n          bevelEnabled: true,\r\n          bevelThickness: 10,\r\n          bevelSize: 8,\r\n          bevelOffset: 0,\r\n          bevelSegments: 5\r\n        } ),\r\n        new THREE.MeshLambertMaterial({ color: d.color })\r\n      )*/\n\n      var mesh2 = new THREE.Mesh(new THREE.SphereBufferGeometry(d.radius), new THREE.MeshLambertMaterial({\n        color: d.color\n      }));\n      var group = new THREE.Group();\n      group.add(mesh1);\n      group.add(mesh2);\n      /*let geometry = new THREE.TextGeometry(sat_latest_data[Object.keys(sat_latest_data)[d.ind]]['sat_name'],{font: font, size: 5, height:1 });\r\n        let material = new THREE.MeshBasicMaterial({color:0x000000});\r\n      let text = new THREE.Mesh(geometry, material);\r\n      text.position.x = -10;\r\n      text.position.y = 0;\r\n      text.position.z=15;\r\n      //text.scale.x=-1\r\n      //scene.add(text)\r\n          group.add(text)*/\n      //console.log(group.position)\n\n      return group;\n    },\n    customThreeObjectUpdate: (obj, d) => {\n      Object.assign(obj.position, globeEl.current.getCoords(d.lat, d.lng, d.alt)); //Object.assign(obj.children[2].position, globeEl.current.getCoords(d.lat, d.lng, d.alt));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }));\n});\nexport default ModelView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/ModelView.js"],"names":["React","useState","createRef","useRef","useEffect","forwardRef","useImperativeHandle","getSatelliteInfo","Globe","Point","THREE","sat_data","map","value","x1","y1","x2","y2","sat_arr","Object","keys","key","data","push","tle_line1","tle_line2","Date","now","point_arr","sat","ind","schema","lat","lng","alt","height","radius","velocity","color","ModelView","props","ref","pointArr","setPointArr","globeEl","setSatellite","defaultSat","indexOf","satCode","current","pointOfView","altitude","interval","setInterval","clearInterval","d","undefined","console","log","mesh1","Mesh","SphereBufferGeometry","MeshLambertMaterial","mesh2","group","Group","add","obj","assign","position","getCoords"],"mappings":"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","sourcesContent":["import React,{useState,createRef,useRef,useEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\nimport Globe,{Point} from 'react-globe.gl';\r\nimport * as THREE from 'three'\r\nimport {sat_data} from '../assets/master'\r\n\r\nconst map = (value, x1, y1, x2, y2) => (value - x1) * (y2 - x2) / (y1 - x1) + x2;\r\n\r\nvar sat_arr=[]\r\nObject.keys(sat_data).map(key=>{\r\n  var data=sat_data[key]\r\n  sat_arr.push(getSatelliteInfo([data.tle_line1,data.tle_line2],Date.now(),0,0,0))\r\n})\r\n\r\n  var point_arr=[]\r\n  sat_arr.map((sat,ind)=>{\r\n    var schema={\r\n      lat:sat.lat,\r\n      lng:sat.lng,\r\n      alt:sat.height/6400,\r\n      radius:map(sat.height,400,35000,3,12),\r\n      height:sat.height,\r\n      velocity:sat.velocity,\r\n      color:sat_data[Object.keys(sat_data)[ind]]['color'],\r\n      ind:ind\r\n    }\r\n    point_arr.push(schema)\r\n  })\r\n\r\nconst ModelView=forwardRef((props,ref)=>{\r\n\r\n  const [pointArr, setPointArr] = useState(point_arr);\r\n  const globeEl = useRef();\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setSatellite(sat){\r\n\r\n    }\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    var defaultSat=Object.keys(sat_data).indexOf(props.satCode)\r\n    globeEl.current.pointOfView({ lat:point_arr[defaultSat].lat+5,lng:point_arr[defaultSat].lng-5,altitude:pointArr[defaultSat].alt*1.5 });\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n\r\n    const interval = setInterval(() => {\r\n      sat_arr=[]\r\n      Object.keys(sat_data).map(key=>{\r\n        var data=sat_data[key]\r\n        sat_arr.push(getSatelliteInfo([data.tle_line1,data.tle_line2],Date.now(),23.762397,90.418917,0))\r\n      })\r\n\r\n      point_arr=[]\r\n      sat_arr.map((sat,ind)=>{\r\n        var schema={\r\n          lat:sat.lat,\r\n          lng:sat.lng,\r\n          alt:sat.height/6400,\r\n          radius:map(sat.height,400,35000,2.5,6),\r\n          height:sat.height,\r\n          velocity:sat.velocity,\r\n          color:sat_data[Object.keys(sat_data)[ind]]['color'],\r\n          ind:ind\r\n        }\r\n        point_arr.push(schema)\r\n      })\r\n      setPointArr(point_arr)\r\n    }, 500);\r\n    return () => {clearInterval(interval)}\r\n  },[])\r\n\r\n  return(\r\n    <div>\r\n    <Globe\r\n    showAtmosphere={false}\r\n      backgroundColor='#ffffff'\r\n      ref={globeEl}\r\n      globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-day.jpg\"\r\n      bumpImageUrl=\"//unpkg.com/three-globe/example/img/earth-topology.png\"\r\n      showGraticules={true}\r\n\r\n\r\n      onCustomLayerHover={d=>{\r\n          if(d!=null && d!=undefined){\r\n            console.log(d.ind)\r\n          }\r\n        }\r\n    }\r\n\r\n    onCustomLayerClick={d=>{\r\n        if(d!=null && d!=undefined){\r\n        \r\n        }\r\n      }\r\n  }\r\n\r\n      customLayerData={pointArr}\r\n      customThreeObject={d =>{\r\n        var mesh1=new THREE.Mesh(\r\n          new THREE.SphereBufferGeometry(d.radius),\r\n          new THREE.MeshLambertMaterial({ color: d.color })\r\n        )\r\n        //var loader = new THREE.FontLoader();\r\n          //loader.load( 'fonts/helvetiker_regular.typeface.json', function ( font ) {\r\n            //console.log(font)\r\n\r\n        //  } );\r\n\r\n      //  console.log(geometry)\r\n\r\n          /*var mesh3=new THREE.Mesh(\r\n            new THREE.TextGeometry( 'Hello three.js!', {\r\n              font: 'sdsddssd',\r\n              size: 80,\r\n              height: 5,\r\n              curveSegments: 12,\r\n              bevelEnabled: true,\r\n              bevelThickness: 10,\r\n              bevelSize: 8,\r\n              bevelOffset: 0,\r\n              bevelSegments: 5\r\n            } ),\r\n            new THREE.MeshLambertMaterial({ color: d.color })\r\n         )*/\r\n\r\n         var mesh2=new THREE.Mesh(\r\n           new THREE.SphereBufferGeometry(d.radius),\r\n           new THREE.MeshLambertMaterial({ color: d.color })\r\n         )\r\n\r\n          var group=new THREE.Group()\r\n          group.add(mesh1)\r\n          group.add(mesh2)\r\n\r\n\r\n\r\n          /*let geometry = new THREE.TextGeometry(sat_latest_data[Object.keys(sat_latest_data)[d.ind]]['sat_name'],{font: font, size: 5, height:1 });\r\n\r\n          let material = new THREE.MeshBasicMaterial({color:0x000000});\r\n          let text = new THREE.Mesh(geometry, material);\r\n          text.position.x = -10;\r\n          text.position.y = 0;\r\n          text.position.z=15;\r\n          //text.scale.x=-1\r\n          //scene.add(text)\r\n\r\n\r\n          group.add(text)*/\r\n\r\n        //console.log(group.position)\r\n\r\n          return group\r\n      }\r\n    }\r\n      customThreeObjectUpdate={(obj, d) => {\r\n        Object.assign(obj.position, globeEl.current.getCoords(d.lat, d.lng, d.alt));\r\n        //Object.assign(obj.children[2].position, globeEl.current.getCoords(d.lat, d.lng, d.alt));\r\n\r\n      }}\r\n\r\n     />\r\n\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default ModelView\r\n"]},"metadata":{},"sourceType":"module"}