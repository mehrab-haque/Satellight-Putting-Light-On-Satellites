{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\src\\\\components\\\\FPVView.js\";\nimport React, { useState, createRef, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { getSatelliteInfo } from \"tle.js\";\nimport WorldWind from '@nasaworldwind/worldwind';\nimport { sat_data } from '../assets/master';\nvar wwd,\n    timeDiff,\n    animator,\n    interval,\n    map,\n    marker,\n    infoWindow,\n    polyLine,\n    poly = [],\n    tle,\n    data,\n    locationVar = null;\nconst FPVView = forwardRef((props, ref) => {\n  if (props.location != null) locationVar = props.location;\n  tle = [props.data.tle_line1, props.data.tle_line2];\n  timeDiff = props.timeDiff;\n  var initData = getSatelliteInfo(tle, Date.now() + timeDiff, 23.762397, 90.418917);\n  const containerRef = useRef();\n  const [satCode, setSatCode] = useState(props.satCode);\n  const [satData, setSatData] = useState(initData);\n  const [timestamp, setTimestamp] = useState(Date.now() + timeDiff);\n  const [location, setLocation] = useState(locationVar);\n  useImperativeHandle(ref, () => ({\n    setSatellite(sat) {\n      setSatData(sat.data);\n      setSatCode(sat.satCode);\n    },\n\n    setTimeDiff(val) {\n      timeDiff = val;\n    }\n\n  }));\n  useEffect(() => {\n    WorldWind.Logger.setLoggingLevel(WorldWind.Logger.LEVEL_WARNING);\n    wwd = new WorldWind.WorldWindow(containerRef.current);\n    animator = new WorldWind.GoToAnimator(wwd);\n    var bMNGOneImageLayer = new WorldWind.BMNGOneImageLayer();\n    var bMNGLayer = new WorldWind.BMNGLayer();\n    var bMNGLandSatLayer = new WorldWind.BMNGLandsatLayer();\n    var atmosphereLayer = new WorldWind.AtmosphereLayer(require('../assets/starfield.png'));\n    var layers = [{\n      layer: bMNGOneImageLayer,\n      enabled: true\n    }, {\n      layer: bMNGLayer,\n      enabled: true\n    }, {\n      layer: bMNGLandSatLayer,\n      enabled: true\n    }, {\n      layer: atmosphereLayer,\n      enabled: true\n    }, {\n      layer: new WorldWind.ViewControlsLayer(wwd),\n      enabled: true\n    }];\n\n    for (var l = 0; l < layers.length; l++) {\n      layers[l].layer.enabled = layers[l].enabled;\n      wwd.addLayer(layers[l].layer);\n    }\n\n    atmosphereLayer.time = Date.now() + timeDiff;\n\n    function runSimulation() {\n      atmosphereLayer.time = new Date(Date.now() + timeDiff);\n      wwd.redraw();\n      requestAnimationFrame(runSimulation);\n    }\n\n    requestAnimationFrame(runSimulation);\n  }, []);\n  useEffect(() => {\n    if (satCode) {\n      interval = setInterval(() => {\n        var currData = getSatelliteInfo(tle, Date.now() + timeDiff, 23.762397, 90.418917);\n        wwd.goTo(new WorldWind.Position(currData.lat, currData.lng, currData.height * 1000));\n        setTimestamp(Date.now() + timeDiff);\n        setSatData(currData);\n      }, 100);\n    } else {\n      clearInterval(interval);\n    }\n  }, [satCode]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: '#00ff00',\n      backgroundColor: '#00000088',\n      position: 'absolute',\n      left: '50%',\n      padding: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, sat_data[satCode].sat_name, \" \", sat_data[satCode].country_name, \" \", satData.lat != null && satData.lat != undefined ? `Lat:${satData.lat.toFixed(3)} Lng:${satData.lng.toFixed(3)} Altitude:${satData.height.toFixed(3)}km Velocity:${satData.velocity.toFixed(3)}km/s ${new Date(timestamp).toLocaleString()}` : ''), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: containerRef,\n    className: \"globeBg\",\n    style: {\n      backgroundColor: '#000000',\n      width: \"100%\",\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }));\n});\nexport default FPVView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/FPVView.js"],"names":["React","useState","createRef","useRef","useEffect","forwardRef","useImperativeHandle","getSatelliteInfo","WorldWind","sat_data","wwd","timeDiff","animator","interval","map","marker","infoWindow","polyLine","poly","tle","data","locationVar","FPVView","props","ref","location","tle_line1","tle_line2","initData","Date","now","containerRef","satCode","setSatCode","satData","setSatData","timestamp","setTimestamp","setLocation","setSatellite","sat","setTimeDiff","val","Logger","setLoggingLevel","LEVEL_WARNING","WorldWindow","current","GoToAnimator","bMNGOneImageLayer","BMNGOneImageLayer","bMNGLayer","BMNGLayer","bMNGLandSatLayer","BMNGLandsatLayer","atmosphereLayer","AtmosphereLayer","require","layers","layer","enabled","ViewControlsLayer","l","length","addLayer","time","runSimulation","redraw","requestAnimationFrame","setInterval","currData","goTo","Position","lat","lng","height","clearInterval","width","color","backgroundColor","position","left","padding","sat_name","country_name","undefined","toFixed","velocity","toLocaleString"],"mappings":"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","sourcesContent":["import React,{useState,createRef,useRef,useEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\nimport WorldWind from '@nasaworldwind/worldwind'\r\nimport {sat_data} from '../assets/master'\r\n\r\nvar wwd,timeDiff,animator,interval,map,marker,infoWindow,polyLine,poly=[],tle,data,locationVar=null\r\n\r\nconst FPVView=forwardRef((props,ref)=>{\r\n  if(props.location!=null)locationVar=props.location\r\n  tle=[props.data.tle_line1,props.data.tle_line2]\r\n  timeDiff=props.timeDiff\r\n  var initData=getSatelliteInfo(tle,Date.now()+timeDiff,23.762397,90.418917)\r\n  const containerRef=useRef()\r\n  const [satCode,setSatCode]=useState(props.satCode)\r\n  const [satData,setSatData]=useState(initData)\r\n  const [timestamp,setTimestamp]=useState(Date.now()+timeDiff)\r\n  const [location,setLocation]=useState(locationVar)\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setSatellite(sat){\r\n      setSatData(sat.data)\r\n      setSatCode(sat.satCode)\r\n    },\r\n    setTimeDiff(val){\r\n      timeDiff=val\r\n    }\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    WorldWind.Logger.setLoggingLevel(WorldWind.Logger.LEVEL_WARNING);\r\n    wwd = new WorldWind.WorldWindow(containerRef.current);\r\n    animator=new WorldWind.GoToAnimator(wwd)\r\n    var bMNGOneImageLayer = new WorldWind.BMNGOneImageLayer();\r\n    var bMNGLayer=new WorldWind.BMNGLayer()\r\n    var bMNGLandSatLayer=new WorldWind.BMNGLandsatLayer();\r\n    var atmosphereLayer = new WorldWind.AtmosphereLayer(require('../assets/starfield.png'));\r\n\r\n    var layers = [\r\n        {layer:bMNGOneImageLayer,enabled:true},\r\n        {layer:bMNGLayer,enabled:true},\r\n        {layer:bMNGLandSatLayer,enabled:true},\r\n        {layer:atmosphereLayer,enabled:true},\r\n        {layer: new WorldWind.ViewControlsLayer(wwd), enabled: true}\r\n    ];\r\n\r\n    for (var l = 0; l < layers.length; l++) {\r\n        layers[l].layer.enabled = layers[l].enabled;\r\n        wwd.addLayer(layers[l].layer);\r\n    }\r\n        atmosphereLayer.time = Date.now()+timeDiff;\r\n        function runSimulation() {\r\n            atmosphereLayer.time = new Date(Date.now()+timeDiff)\r\n            wwd.redraw();\r\n            requestAnimationFrame(runSimulation);\r\n        }\r\n        requestAnimationFrame(runSimulation);\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    if(satCode) {\r\n      interval = setInterval(() => {\r\n        var currData=getSatelliteInfo(tle,Date.now()+timeDiff,23.762397,90.418917)\r\n        wwd.goTo(new WorldWind.Position(currData.lat,currData.lng,currData.height*1000));\r\n        setTimestamp(Date.now()+timeDiff)\r\n        setSatData(currData)\r\n      }, 100);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n  },[satCode])\r\n\r\n  return(\r\n    <div style={{width:'100%',height:'100%'}}>\r\n      <div style={{color:'#00ff00',backgroundColor:'#00000088',position:'absolute',left:'50%',padding:'5px'}}>\r\n        {sat_data[satCode].sat_name} {sat_data[satCode].country_name} {satData.lat!=null && satData.lat!=undefined?`Lat:${satData.lat.toFixed(3)} Lng:${satData.lng.toFixed(3)} Altitude:${satData.height.toFixed(3)}km Velocity:${satData.velocity.toFixed(3)}km/s ${new Date(timestamp).toLocaleString()}`:''}\r\n      </div>\r\n      <canvas ref={containerRef} className='globeBg' style={{ backgroundColor:'#000000',width: \"100%\", height: \"100%\" }}/>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default FPVView\r\n"]},"metadata":{},"sourceType":"module"}