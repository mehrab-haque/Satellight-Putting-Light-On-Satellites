{"ast":null,"code":"import withAccessors from '../mixins/with-accessors';\nimport Point from './point';\nimport Rect from './rect';\nimport ellipseExtremeAngles from './math/ellipse-extreme-angles';\nimport HasObservers from '../core/has-observers';\nimport { rad } from '../util';\nvar PI_DIV_2 = Math.PI / 2;\n\nvar Circle = function (superclass) {\n  function Circle(center, radius) {\n    if (center === void 0) center = new Point();\n    if (radius === void 0) radius = 0;\n    superclass.call(this);\n    this.setCenter(center);\n    this.setRadius(radius);\n  }\n\n  if (superclass) Circle.__proto__ = superclass;\n  Circle.prototype = Object.create(superclass && superclass.prototype);\n  Circle.prototype.constructor = Circle;\n\n  Circle.prototype.setCenter = function setCenter(value) {\n    this._observerField(\"center\", Point.create(value));\n\n    this.geometryChange();\n    return this;\n  };\n\n  Circle.prototype.getCenter = function getCenter() {\n    return this.center;\n  };\n\n  Circle.prototype.equals = function equals(other) {\n    return other && other.center.equals(this.center) && other.radius === this.radius;\n  };\n\n  Circle.prototype.clone = function clone() {\n    return new Circle(this.center.clone(), this.radius);\n  };\n\n  Circle.prototype.pointAt = function pointAt(angle) {\n    return this._pointAt(rad(angle));\n  };\n\n  Circle.prototype.bbox = function bbox(matrix) {\n    var this$1 = this;\n    var extremeAngles = ellipseExtremeAngles(this.center, this.radius, this.radius, matrix);\n    var minPoint = Point.maxPoint();\n    var maxPoint = Point.minPoint();\n\n    for (var i = 0; i < 4; i++) {\n      var currentPointX = this$1._pointAt(extremeAngles.x + i * PI_DIV_2).transformCopy(matrix);\n\n      var currentPointY = this$1._pointAt(extremeAngles.y + i * PI_DIV_2).transformCopy(matrix);\n\n      var currentPoint = new Point(currentPointX.x, currentPointY.y);\n      minPoint = Point.min(minPoint, currentPoint);\n      maxPoint = Point.max(maxPoint, currentPoint);\n    }\n\n    return Rect.fromPoints(minPoint, maxPoint);\n  };\n\n  Circle.prototype._pointAt = function _pointAt(angle) {\n    var ref = this;\n    var center = ref.center;\n    var radius = ref.radius;\n    return new Point(center.x + radius * Math.cos(angle), center.y + radius * Math.sin(angle));\n  };\n\n  Circle.prototype.containsPoint = function containsPoint(point) {\n    var ref = this;\n    var center = ref.center;\n    var radius = ref.radius;\n    var inCircle = Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2) <= Math.pow(radius, 2);\n    return inCircle;\n  };\n\n  Circle.prototype._isOnPath = function _isOnPath(point, width) {\n    var ref = this;\n    var center = ref.center;\n    var radius = ref.radius;\n    var pointDistance = center.distanceTo(point);\n    return radius - width <= pointDistance && pointDistance <= radius + width;\n  };\n\n  return Circle;\n}(withAccessors(HasObservers, [\"radius\"]));\n\nexport default Circle;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/node_modules/@progress/kendo-drawing/dist/es/geometry/circle.js"],"names":["withAccessors","Point","Rect","ellipseExtremeAngles","HasObservers","rad","PI_DIV_2","Math","PI","Circle","superclass","center","radius","call","setCenter","setRadius","__proto__","prototype","Object","create","constructor","value","_observerField","geometryChange","getCenter","equals","other","clone","pointAt","angle","_pointAt","bbox","matrix","this$1","extremeAngles","minPoint","maxPoint","i","currentPointX","x","transformCopy","currentPointY","y","currentPoint","min","max","fromPoints","ref","cos","sin","containsPoint","point","inCircle","pow","_isOnPath","width","pointDistance","distanceTo"],"mappings":"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","sourcesContent":["import withAccessors from '../mixins/with-accessors';\nimport Point from './point';\nimport Rect from './rect';\nimport ellipseExtremeAngles from './math/ellipse-extreme-angles';\nimport HasObservers from '../core/has-observers';\nimport { rad } from '../util';\n\n\nvar PI_DIV_2 = Math.PI / 2;\n\nvar Circle = (function (superclass) {\n    function Circle(center, radius) {\n        if ( center === void 0 ) center = new Point();\n        if ( radius === void 0 ) radius = 0;\n\n        superclass.call(this);\n\n        this.setCenter(center);\n        this.setRadius(radius);\n    }\n\n    if ( superclass ) Circle.__proto__ = superclass;\n    Circle.prototype = Object.create( superclass && superclass.prototype );\n    Circle.prototype.constructor = Circle;\n\n    Circle.prototype.setCenter = function setCenter (value) {\n        this._observerField(\"center\", Point.create(value));\n        this.geometryChange();\n        return this;\n    };\n\n    Circle.prototype.getCenter = function getCenter () {\n        return this.center;\n    };\n\n    Circle.prototype.equals = function equals (other) {\n        return other &&\n               other.center.equals(this.center) &&\n               other.radius === this.radius;\n    };\n\n    Circle.prototype.clone = function clone () {\n        return new Circle(this.center.clone(), this.radius);\n    };\n\n    Circle.prototype.pointAt = function pointAt (angle) {\n        return this._pointAt(rad(angle));\n    };\n\n    Circle.prototype.bbox = function bbox (matrix) {\n        var this$1 = this;\n\n        var extremeAngles = ellipseExtremeAngles(this.center, this.radius, this.radius, matrix);\n        var minPoint = Point.maxPoint();\n        var maxPoint = Point.minPoint();\n\n        for (var i = 0; i < 4; i++) {\n            var currentPointX = this$1._pointAt(extremeAngles.x + i * PI_DIV_2).transformCopy(matrix);\n            var currentPointY = this$1._pointAt(extremeAngles.y + i * PI_DIV_2).transformCopy(matrix);\n            var currentPoint = new Point(currentPointX.x, currentPointY.y);\n\n            minPoint = Point.min(minPoint, currentPoint);\n            maxPoint = Point.max(maxPoint, currentPoint);\n        }\n\n        return Rect.fromPoints(minPoint, maxPoint);\n    };\n\n    Circle.prototype._pointAt = function _pointAt (angle) {\n        var ref = this;\n        var center = ref.center;\n        var radius = ref.radius;\n\n        return new Point(\n            center.x + radius * Math.cos(angle),\n            center.y + radius * Math.sin(angle)\n        );\n    };\n\n    Circle.prototype.containsPoint = function containsPoint (point) {\n        var ref = this;\n        var center = ref.center;\n        var radius = ref.radius;\n        var inCircle = Math.pow(point.x - center.x, 2) +\n            Math.pow(point.y - center.y, 2) <= Math.pow(radius, 2);\n        return inCircle;\n    };\n\n    Circle.prototype._isOnPath = function _isOnPath (point, width) {\n        var ref = this;\n        var center = ref.center;\n        var radius = ref.radius;\n        var pointDistance = center.distanceTo(point);\n\n        return radius - width <= pointDistance && pointDistance <= radius + width;\n    };\n\n    return Circle;\n}(withAccessors(HasObservers, [ \"radius\" ])));\n\nexport default Circle;\n"]},"metadata":{},"sourceType":"module"}