{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\src\\\\components\\\\FPVView.js\";\nimport React, { useState, createRef, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { getSatelliteInfo } from \"tle.js\";\nimport WorldWind from '@nasaworldwind/worldwind';\nimport { sat_data } from '../assets/master';\n\nfunction calcCrow(lat1, lon1, lat2, lon2) {\n  var R = 6371; // km\n\n  var dLat = toRad(lat2 - lat1);\n  var dLon = toRad(lon2 - lon1);\n  var lat1 = toRad(lat1);\n  var lat2 = toRad(lat2);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n  return d;\n}\n\nfunction toRad(Value) {\n  return Value * Math.PI / 180;\n}\n\nvar wwd,\n    timeDiff,\n    textLayer,\n    textAttributes,\n    geoGraphicText,\n    animator,\n    interval,\n    map,\n    marker,\n    infoWindow,\n    polyLine,\n    poly = [],\n    tle,\n    data,\n    locationVar = null;\nconst FPVView = forwardRef((props, ref) => {\n  if (props.location != null) locationVar = props.location;\n  tle = [props.data.tle_line1, props.data.tle_line2];\n  timeDiff = props.timeDiff;\n  var initData = getSatelliteInfo(tle, Date.now() + timeDiff, 23.762397, 90.418917);\n  const containerRef = useRef();\n  const [satCode, setSatCode] = useState(props.satCode);\n  const [satData, setSatData] = useState(initData);\n  const [timestamp, setTimestamp] = useState(Date.now() + timeDiff);\n  const [location, setLocation] = useState(locationVar);\n  useImperativeHandle(ref, () => ({\n    setSatellite(sat) {\n      setSatData(sat.data);\n      setSatCode(sat.satCode);\n    },\n\n    setTimeDiff(val) {\n      timeDiff = val;\n    },\n\n    location(loc) {\n      setLocation(loc);\n    }\n\n  }));\n  useEffect(() => {\n    WorldWind.Logger.setLoggingLevel(WorldWind.Logger.LEVEL_WARNING);\n    wwd = new WorldWind.WorldWindow(containerRef.current);\n    animator = new WorldWind.GoToAnimator(wwd);\n    var bMNGOneImageLayer = new WorldWind.BMNGOneImageLayer();\n    var bMNGLayer = new WorldWind.BMNGLayer();\n    var bMNGLandSatLayer = new WorldWind.BMNGLandsatLayer();\n    var atmosphereLayer = new WorldWind.AtmosphereLayer(require('../assets/starfield.png'));\n    var layers = [{\n      layer: bMNGOneImageLayer,\n      enabled: true\n    }, {\n      layer: bMNGLayer,\n      enabled: true\n    }, {\n      layer: bMNGLandSatLayer,\n      enabled: true\n    }, {\n      layer: atmosphereLayer,\n      enabled: true\n    }, {\n      layer: new WorldWind.ViewControlsLayer(wwd),\n      enabled: true\n    }];\n\n    for (var l = 0; l < layers.length; l++) {\n      layers[l].layer.enabled = layers[l].enabled;\n      wwd.addLayer(layers[l].layer);\n    }\n\n    textAttributes = new WorldWind.TextAttributes(null);\n    textAttributes.color = WorldWind.Color.GREEN;\n    textAttributes.depthTest = false;\n    textLayer = new WorldWind.RenderableLayer(\"Your Location\");\n    wwd.addLayer(textLayer);\n    atmosphereLayer.time = Date.now() + timeDiff;\n\n    function runSimulation() {\n      atmosphereLayer.time = new Date(Date.now() + timeDiff);\n      wwd.redraw();\n      requestAnimationFrame(runSimulation);\n    }\n\n    requestAnimationFrame(runSimulation);\n  }, []);\n  useEffect(() => {\n    if (location != null) {\n      var peakPosition = new WorldWind.Position(location.lat, location.lng, 0);\n      geoGraphicText = new WorldWind.GeographicText(peakPosition, 'Your Location');\n      geoGraphicText.attributes = textAttributes;\n      textLayer.removeAllRenderables();\n      textLayer.addRenderable(geoGraphicText);\n    }\n  }, [location]);\n  useEffect(() => {\n    if (satCode) {\n      interval = setInterval(() => {\n        var currData = getSatelliteInfo(tle, Date.now() + timeDiff, 23.762397, 90.418917);\n        wwd.goTo(new WorldWind.Position(currData.lat, currData.lng, currData.height * 1000));\n        setTimestamp(Date.now() + timeDiff);\n        setSatData(currData);\n      }, 100);\n    } else {\n      clearInterval(interval);\n    }\n  }, [satCode]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: '#00ff00',\n      backgroundColor: '#00000088',\n      position: 'absolute',\n      left: '50%',\n      padding: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, sat_data[satCode].sat_name, \" \", sat_data[satCode].country_name, \" \", satData.lat != null && satData.lat != undefined ? `Lat:${satData.lat.toFixed(3)} Lng:${satData.lng.toFixed(3)} Altitude:${satData.height.toFixed(3)}km Velocity:${satData.velocity.toFixed(3)}km/s ${new Date(timestamp).toLocaleString()}` : ''), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: containerRef,\n    className: \"globeBg\",\n    style: {\n      backgroundColor: '#000000',\n      width: \"100%\",\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }));\n});\nexport default FPVView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/FPVView.js"],"names":["React","useState","createRef","useRef","useEffect","forwardRef","useImperativeHandle","getSatelliteInfo","WorldWind","sat_data","calcCrow","lat1","lon1","lat2","lon2","R","dLat","toRad","dLon","a","Math","sin","cos","c","atan2","sqrt","d","Value","PI","wwd","timeDiff","textLayer","textAttributes","geoGraphicText","animator","interval","map","marker","infoWindow","polyLine","poly","tle","data","locationVar","FPVView","props","ref","location","tle_line1","tle_line2","initData","Date","now","containerRef","satCode","setSatCode","satData","setSatData","timestamp","setTimestamp","setLocation","setSatellite","sat","setTimeDiff","val","loc","Logger","setLoggingLevel","LEVEL_WARNING","WorldWindow","current","GoToAnimator","bMNGOneImageLayer","BMNGOneImageLayer","bMNGLayer","BMNGLayer","bMNGLandSatLayer","BMNGLandsatLayer","atmosphereLayer","AtmosphereLayer","require","layers","layer","enabled","ViewControlsLayer","l","length","addLayer","TextAttributes","color","Color","GREEN","depthTest","RenderableLayer","time","runSimulation","redraw","requestAnimationFrame","peakPosition","Position","lat","lng","GeographicText","attributes","removeAllRenderables","addRenderable","setInterval","currData","goTo","height","clearInterval","width","backgroundColor","position","left","padding","sat_name","country_name","undefined","toFixed","velocity","toLocaleString"],"mappings":"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","sourcesContent":["import React,{useState,createRef,useRef,useEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\nimport WorldWind from '@nasaworldwind/worldwind'\r\nimport {sat_data} from '../assets/master'\r\n\r\nfunction calcCrow(lat1, lon1, lat2, lon2)\r\n    {\r\n      var R = 6371; // km\r\n      var dLat = toRad(lat2-lat1);\r\n      var dLon = toRad(lon2-lon1);\r\n      var lat1 = toRad(lat1);\r\n      var lat2 = toRad(lat2);\r\n\r\n      var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n        Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2);\r\n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n      var d = R * c;\r\n      return d;\r\n    }\r\n\r\nfunction toRad(Value)\r\n{\r\n    return Value * Math.PI / 180;\r\n}\r\n\r\nvar wwd,timeDiff,textLayer,textAttributes,geoGraphicText,animator,interval,map,marker,infoWindow,polyLine,poly=[],tle,data,locationVar=null\r\n\r\nconst FPVView=forwardRef((props,ref)=>{\r\n  if(props.location!=null)locationVar=props.location\r\n  tle=[props.data.tle_line1,props.data.tle_line2]\r\n  timeDiff=props.timeDiff\r\n  var initData=getSatelliteInfo(tle,Date.now()+timeDiff,23.762397,90.418917)\r\n  const containerRef=useRef()\r\n  const [satCode,setSatCode]=useState(props.satCode)\r\n  const [satData,setSatData]=useState(initData)\r\n  const [timestamp,setTimestamp]=useState(Date.now()+timeDiff)\r\n  const [location,setLocation]=useState(locationVar)\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setSatellite(sat){\r\n      setSatData(sat.data)\r\n      setSatCode(sat.satCode)\r\n    },\r\n    setTimeDiff(val){\r\n      timeDiff=val\r\n    },\r\n    location(loc){\r\n      setLocation(loc)\r\n    }\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    WorldWind.Logger.setLoggingLevel(WorldWind.Logger.LEVEL_WARNING);\r\n    wwd = new WorldWind.WorldWindow(containerRef.current);\r\n    animator=new WorldWind.GoToAnimator(wwd)\r\n    var bMNGOneImageLayer = new WorldWind.BMNGOneImageLayer();\r\n    var bMNGLayer=new WorldWind.BMNGLayer()\r\n    var bMNGLandSatLayer=new WorldWind.BMNGLandsatLayer();\r\n    var atmosphereLayer = new WorldWind.AtmosphereLayer(require('../assets/starfield.png'));\r\n\r\n    var layers = [\r\n        {layer:bMNGOneImageLayer,enabled:true},\r\n        {layer:bMNGLayer,enabled:true},\r\n        {layer:bMNGLandSatLayer,enabled:true},\r\n        {layer:atmosphereLayer,enabled:true},\r\n        {layer: new WorldWind.ViewControlsLayer(wwd), enabled: true}\r\n    ];\r\n\r\n    for (var l = 0; l < layers.length; l++) {\r\n        layers[l].layer.enabled = layers[l].enabled;\r\n        wwd.addLayer(layers[l].layer);\r\n    }\r\n\r\n\r\n    textAttributes= new WorldWind.TextAttributes(null)\r\n    textAttributes.color = WorldWind.Color.GREEN;\r\n    textAttributes.depthTest = false;\r\n    textLayer = new WorldWind.RenderableLayer(\"Your Location\")\r\n    wwd.addLayer(textLayer)\r\n\r\n\r\n        atmosphereLayer.time = Date.now()+timeDiff;\r\n        function runSimulation() {\r\n            atmosphereLayer.time = new Date(Date.now()+timeDiff)\r\n            wwd.redraw();\r\n            requestAnimationFrame(runSimulation);\r\n        }\r\n        requestAnimationFrame(runSimulation);\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    if(location!=null){\r\n      var peakPosition = new WorldWind.Position(location.lat, location.lng, 0)\r\n      geoGraphicText=new WorldWind.GeographicText(peakPosition, 'Your Location')\r\n      geoGraphicText.attributes = textAttributes\r\n      textLayer.removeAllRenderables()\r\n      textLayer.addRenderable(geoGraphicText)\r\n    }\r\n  },[location])\r\n\r\n  useEffect(()=>{\r\n    if(satCode) {\r\n      interval = setInterval(() => {\r\n        var currData=getSatelliteInfo(tle,Date.now()+timeDiff,23.762397,90.418917)\r\n        wwd.goTo(new WorldWind.Position(currData.lat,currData.lng,currData.height*1000));\r\n        setTimestamp(Date.now()+timeDiff)\r\n        setSatData(currData)\r\n      }, 100);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n  },[satCode])\r\n\r\n  return(\r\n    <div style={{width:'100%',height:'100%'}}>\r\n      <div style={{color:'#00ff00',backgroundColor:'#00000088',position:'absolute',left:'50%',padding:'5px'}}>\r\n        {sat_data[satCode].sat_name} {sat_data[satCode].country_name} {satData.lat!=null && satData.lat!=undefined?`Lat:${satData.lat.toFixed(3)} Lng:${satData.lng.toFixed(3)} Altitude:${satData.height.toFixed(3)}km Velocity:${satData.velocity.toFixed(3)}km/s ${new Date(timestamp).toLocaleString()}`:''}\r\n      </div>\r\n      <canvas ref={containerRef} className='globeBg' style={{ backgroundColor:'#000000',width: \"100%\", height: \"100%\" }}/>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default FPVView\r\n"]},"metadata":{},"sourceType":"module"}