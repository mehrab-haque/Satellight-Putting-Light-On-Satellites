{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\src\\\\components\\\\MapView.js\";\nimport React, { useState, createRef, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { getSatelliteInfo } from \"tle.js\";\n\nfunction getNormalizedCoord(coord, zoom) {\n  const y = coord.y;\n  let x = coord.x;\n  const tileRange = 1 << zoom;\n\n  if (y < 0 || y >= tileRange) {\n    return null;\n  }\n\n  if (x < 0 || x >= tileRange) {\n    x = (x % tileRange + tileRange) % tileRange;\n  }\n\n  return {\n    x: x,\n    y: y\n  };\n}\n\nconst MapView = forwardRef((props, ref) => {\n  var posInterval,\n      pathInterval,\n      map,\n      marker,\n      infoWindow,\n      polyLine,\n      poly = [],\n      tle = [props.data.tle_line1, props.data.tle_line2],\n      data = props.data;\n  const [satCode, setSatCode] = useState(props.satCode);\n  const [timeDiff, setTimeDiff] = useState(props.timeDiff);\n  const initialData = getSatelliteInfo(tle, Date.now() + timeDiff, 0, 0);\n  const containerRef = useRef();\n  useEffect(() => {\n    map = new window.google.maps.Map(containerRef.current, {\n      center: {\n        lat: initialData.lat,\n        lng: initialData.lng\n      },\n      zoom: 3,\n      streetViewControl: false,\n      mapTypeControlOptions: {\n        mapTypeIds: [window.google.maps.MapTypeId.ROADMAP, window.google.maps.MapTypeId.HYBRID]\n      }\n    });\n    const icon = {\n      url: data.icon_url,\n      scaledSize: {\n        width: 40,\n        height: 40\n      }\n    };\n    let iconMarker = new window.google.maps.MarkerImage(data.icon_url, null, new window.google.maps.Point(0, 0),\n    /* origin is 0,0 */\n    new window.google.maps.Point(30, 30),\n    /* anchor is bottom center of the scaled image */\n    new window.google.maps.Size(60, 50));\n    marker = new window.google.maps.Marker({\n      position: map.center,\n      icon: iconMarker,\n      title: \"Hello World!\"\n    });\n    marker.setMap(map);\n    polyLine = new window.google.maps.Polyline({\n      path: poly,\n      geodesic: true,\n      strokeColor: \"#FF0000\",\n      strokeOpacity: 1.0,\n      strokeWeight: 4\n    });\n    polyLine.setMap(map);\n  }, []);\n  useEffect(() => {\n    if (satCode) {\n      posInterval = setInterval(() => {\n        var currData = getSatelliteInfo(tle, Date.now() + timeDiff, 0, 0);\n        marker.setPosition({\n          lat: currData.lat,\n          lng: currData.lng\n        });\n        /*var info=`<div>\r\n            <span>International Space Station</span><br/>\r\n            <center><img style={{marginTop:'5px'}}  height=\"30px\" width='40px' src='https://satellitedatanasa.s3.ap-south-1.amazonaws.com/countryFlag/america.png'/></center>`+\r\n            '<center>Lat:'+curr.lat.toFixed(3)+', Lng:'+curr.lng.toFixed(3)+'</center>'+\r\n            '<center>Velocity:'+currData.velocity.toFixed(3)+'km/s <br/> Height:'+currData.height.toFixed(3)+'km</center>'+\r\n            '</div>'\r\n          infowindow.setContent(info)*/\n      }, 100);\n      pathInterval = setInterval(() => {\n        var currData = getSatelliteInfo(tle, Date.now() + timeDiff, 0, 0);\n        poly.push(currData);\n        polyLine.setPath(poly);\n      }, 1000);\n    } else {\n      clearInterval(interval);\n    }\n\n    return () => {\n      clearInterval(posInterval);\n      clearInterval(pathInterval);\n    };\n  }, [satCode]);\n  useImperativeHandle(ref, () => ({\n    setSatellite(sat) {\n      setSatCode(sat.satCode);\n      data = sat.data;\n      tle = [sat.data.tle_line1, sat.data.tle_line2];\n      poly = [];\n    }\n\n  }));\n  useEffect(() => {}, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  });\n});\nexport default MapView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/MapView.js"],"names":["React","useState","createRef","useRef","useEffect","forwardRef","useImperativeHandle","getSatelliteInfo","getNormalizedCoord","coord","zoom","y","x","tileRange","MapView","props","ref","posInterval","pathInterval","map","marker","infoWindow","polyLine","poly","tle","data","tle_line1","tle_line2","satCode","setSatCode","timeDiff","setTimeDiff","initialData","Date","now","containerRef","window","google","maps","Map","current","center","lat","lng","streetViewControl","mapTypeControlOptions","mapTypeIds","MapTypeId","ROADMAP","HYBRID","icon","url","icon_url","scaledSize","width","height","iconMarker","MarkerImage","Point","Size","Marker","position","title","setMap","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","setInterval","currData","setPosition","push","setPath","clearInterval","interval","setSatellite","sat"],"mappings":"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","sourcesContent":["import React,{useState,createRef,useRef,useEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\n\r\nfunction getNormalizedCoord(coord, zoom) {\r\n        const y = coord.y;\r\n        let x = coord.x;\r\n        const tileRange = 1 << zoom;\r\n        if (y < 0 || y >= tileRange) {\r\n          return null;\r\n        }\r\n        if (x < 0 || x >= tileRange) {\r\n          x = ((x % tileRange) + tileRange) % tileRange;\r\n        }\r\n        return {\r\n          x: x,\r\n          y: y\r\n        };\r\n      }\r\n\r\n\r\nconst MapView=forwardRef((props,ref)=>{\r\n\r\n  var posInterval,pathInterval,map,marker,infoWindow,polyLine,poly=[],tle=[props.data.tle_line1,props.data.tle_line2],data=props.data\r\n  const [satCode,setSatCode]=useState(props.satCode)\r\n  const [timeDiff,setTimeDiff]=useState(props.timeDiff)\r\n  const initialData=getSatelliteInfo(tle,Date.now()+timeDiff,0,0)\r\n  const containerRef=useRef()\r\n\r\n\r\n  useEffect(()=>{\r\n    map = new window.google.maps.Map(containerRef.current, {\r\n      center: {\r\n        lat: initialData.lat,\r\n        lng: initialData.lng\r\n      },\r\n      zoom: 3,\r\n      streetViewControl: false,\r\n      mapTypeControlOptions: {\r\n        mapTypeIds: [window.google.maps.MapTypeId.ROADMAP,window.google.maps.MapTypeId.HYBRID]\r\n      }\r\n    });\r\n\r\n    const icon = { url: data.icon_url, scaledSize: { width: 40, height: 40 } };\r\n    let iconMarker = new window.google.maps.MarkerImage(\r\n                      data.icon_url,\r\n                      null,\r\n                      new window.google.maps.Point(0, 0), /* origin is 0,0 */\r\n                      new window.google.maps.Point(30, 30), /* anchor is bottom center of the scaled image */\r\n                      new window.google.maps.Size(60, 50)\r\n                  );\r\n\r\n     marker = new window.google.maps.Marker({\r\n        position: map.center,\r\n        icon:iconMarker,\r\n        title:\"Hello World!\"\r\n    });\r\n    marker.setMap(map);\r\n    polyLine= new window.google.maps.Polyline({\r\n      path: poly,\r\n      geodesic: true,\r\n      strokeColor: \"#FF0000\",\r\n      strokeOpacity: 1.0,\r\n      strokeWeight: 4\r\n    });\r\n\r\n    polyLine.setMap(map)\r\n\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    if(satCode) {\r\n\r\n      posInterval = setInterval(() => {\r\n        var currData=getSatelliteInfo(tle,Date.now()+timeDiff,0,0)\r\n        marker.setPosition({\r\n          lat:currData.lat,\r\n          lng:currData.lng\r\n        })\r\n\r\n        /*var info=`<div>\r\n            <span>International Space Station</span><br/>\r\n            <center><img style={{marginTop:'5px'}}  height=\"30px\" width='40px' src='https://satellitedatanasa.s3.ap-south-1.amazonaws.com/countryFlag/america.png'/></center>`+\r\n            '<center>Lat:'+curr.lat.toFixed(3)+', Lng:'+curr.lng.toFixed(3)+'</center>'+\r\n            '<center>Velocity:'+currData.velocity.toFixed(3)+'km/s <br/> Height:'+currData.height.toFixed(3)+'km</center>'+\r\n            '</div>'\r\n\r\n        infowindow.setContent(info)*/\r\n\r\n      }, 100);\r\n      pathInterval = setInterval(() => {\r\n        var currData=getSatelliteInfo(tle,Date.now()+timeDiff,0,0)\r\n        poly.push(currData)\r\n        polyLine.setPath(poly)\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n\r\n    return () => {clearInterval(posInterval);clearInterval(pathInterval);}\r\n  },[satCode])\r\n\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setSatellite(sat){\r\n      setSatCode(sat.satCode)\r\n      data=sat.data\r\n      tle=[sat.data.tle_line1,sat.data.tle_line2]\r\n      poly=[]\r\n    }\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n  },[])\r\n\r\n  return(\r\n    <div ref={containerRef} style={{ width: \"100%\", height: \"100%\" }}/>\r\n  )\r\n})\r\n\r\nexport default MapView\r\n"]},"metadata":{},"sourceType":"module"}