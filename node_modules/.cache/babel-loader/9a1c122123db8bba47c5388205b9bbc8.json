{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\src\\\\components\\\\FPVView.js\";\nimport React, { useState, createRef, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { getSatelliteInfo } from \"tle.js\";\nimport WorldWind from '@nasaworldwind/worldwind';\nvar posInterval,\n    pathInterval,\n    map,\n    marker,\n    infoWindow,\n    polyLine,\n    poly = [],\n    tle,\n    data;\nconst FPVView = forwardRef((props, ref) => {\n  const containerRef = useRef();\n  useImperativeHandle(ref, () => ({\n    setSatellite(sat) {}\n\n  }));\n  useEffect(() => {\n    WorldWind.Logger.setLoggingLevel(WorldWind.Logger.LEVEL_WARNING);\n    wwd = new WorldWind.WorldWindow(containerRef.current);\n    animator = new WorldWind.GoToAnimator(wwd);\n    var bMNGLayer = new WorldWind.BMNGLater();\n    var bMNGLandSatLayer = new WorldWind.BMNGLandsatLayer();\n    var atmosphereLayer = new WorldWind.AtmosphereLayer(require('./assets/starfield.png'));\n    var starFieldLayer = new WorldWind.StarFieldLayer();\n    var layers = [{\n      layer: bMNGLayer,\n      enabled: true\n    }, {\n      layer: bMNGLandSatLayer,\n      enabled: true\n    }, {\n      layer: starFieldLayer,\n      enabled: true\n    }, {\n      layer: atmosphereLayer,\n      enabled: true\n    }, {\n      layer: new WorldWind.ViewControlsLayer(wwd),\n      enabled: true\n    }];\n\n    for (var l = 0; l < layers.length; l++) {\n      layers[l].layer.enabled = layers[l].enabled;\n      wwd.addLayer(layers[l].layer);\n    }\n\n    var now = new Date();\n    atmosphereLayer.time = now;\n    var simulatedMillisPerDay = 8000;\n    var startTimeMillis = Date.now();\n\n    function runSimulation() {\n      var elapsedTimeMillis = Date.now() - startTimeMillis;\n      var simulatedDays = elapsedTimeMillis / simulatedMillisPerDay;\n      var millisPerDay = 24 * 3600 * 1000; // 24 hours/day * 3600 seconds/hour * 1000 milliseconds/second\n\n      var simulatedMillis = simulatedDays * millisPerDay;\n      var simulatedDate = new Date(startTimeMillis + simulatedMillis);\n      atmosphereLayer.time = new Date(Date.now());\n      wwd.redraw();\n      requestAnimationFrame(runSimulation);\n    }\n\n    requestAnimationFrame(runSimulation);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: containerRef,\n    className: \"globeBg\",\n    style: {\n      backgroundColor: '#ffffff',\n      width: \"100%\",\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  });\n});\nexport default FPVView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/FPVView.js"],"names":["React","useState","createRef","useRef","useEffect","forwardRef","useImperativeHandle","getSatelliteInfo","WorldWind","posInterval","pathInterval","map","marker","infoWindow","polyLine","poly","tle","data","FPVView","props","ref","containerRef","setSatellite","sat","Logger","setLoggingLevel","LEVEL_WARNING","wwd","WorldWindow","current","animator","GoToAnimator","bMNGLayer","BMNGLater","bMNGLandSatLayer","BMNGLandsatLayer","atmosphereLayer","AtmosphereLayer","require","starFieldLayer","StarFieldLayer","layers","layer","enabled","ViewControlsLayer","l","length","addLayer","now","Date","time","simulatedMillisPerDay","startTimeMillis","runSimulation","elapsedTimeMillis","simulatedDays","millisPerDay","simulatedMillis","simulatedDate","redraw","requestAnimationFrame","backgroundColor","width","height"],"mappings":"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","sourcesContent":["import React,{useState,createRef,useRef,useEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\nimport WorldWind from '@nasaworldwind/worldwind'\r\n\r\nvar posInterval,pathInterval,map,marker,infoWindow,polyLine,poly=[],tle,data\r\n\r\nconst FPVView=forwardRef((props,ref)=>{\r\n  const containerRef=useRef()\r\n\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setSatellite(sat){\r\n\r\n    }\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    WorldWind.Logger.setLoggingLevel(WorldWind.Logger.LEVEL_WARNING);\r\n    wwd = new WorldWind.WorldWindow(containerRef.current);\r\n    animator=new WorldWind.GoToAnimator(wwd)\r\n    var bMNGLayer=new WorldWind.BMNGLater()\r\n    var bMNGLandSatLayer=new WorldWind.BMNGLandsatLayer();\r\n    var atmosphereLayer = new WorldWind.AtmosphereLayer(require('./assets/starfield.png'));\r\n    var starFieldLayer=new WorldWind.StarFieldLayer()\r\n\r\n    var layers = [\r\n        {layer:bMNGLayer,enabled:true},\r\n        {layer:bMNGLandSatLayer,enabled:true},\r\n        {layer:starFieldLayer,enabled:true},\r\n        {layer:atmosphereLayer,enabled:true},\r\n        {layer: new WorldWind.ViewControlsLayer(wwd), enabled: true}\r\n    ];\r\n\r\n    for (var l = 0; l < layers.length; l++) {\r\n        layers[l].layer.enabled = layers[l].enabled;\r\n        wwd.addLayer(layers[l].layer);\r\n    }\r\n      var now = new Date();\r\n        atmosphereLayer.time = now;\r\n        var simulatedMillisPerDay = 8000;\r\n        var startTimeMillis = Date.now();\r\n        function runSimulation() {\r\n            var elapsedTimeMillis = Date.now() - startTimeMillis;\r\n            var simulatedDays = elapsedTimeMillis / simulatedMillisPerDay;\r\n            var millisPerDay = 24 * 3600 * 1000; // 24 hours/day * 3600 seconds/hour * 1000 milliseconds/second\r\n            var simulatedMillis = simulatedDays * millisPerDay;\r\n            var simulatedDate = new Date(startTimeMillis + simulatedMillis);\r\n            atmosphereLayer.time = new Date(Date.now())\r\n            wwd.redraw();\r\n            requestAnimationFrame(runSimulation);\r\n        }\r\n        requestAnimationFrame(runSimulation);\r\n  },[])\r\n\r\n  return(\r\n    <canvas ref={containerRef} className='globeBg' style={{ backgroundColor:'#ffffff',width: \"100%\", height: \"100%\" }}/>\r\n  )\r\n})\r\n\r\nexport default FPVView\r\n"]},"metadata":{},"sourceType":"module"}