{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\src\\\\components\\\\FPVView.js\";\nimport React, { useState, createRef, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { getSatelliteInfo } from \"tle.js\";\nimport WorldWind from '@nasaworldwind/worldwind';\nvar wwd,\n    animator,\n    posInterval,\n    pathInterval,\n    map,\n    marker,\n    infoWindow,\n    polyLine,\n    poly = [],\n    tle,\n    data;\nconst FPVView = forwardRef((props, ref) => {\n  const containerRef = useRef();\n  const [satCode, setSatCode] = useState(props.satCode);\n  const [timeDiff, setTimeDiff] = useState(props.timeDiff);\n  useImperativeHandle(ref, () => ({\n    setSatellite(sat) {}\n\n  }));\n  useEffect(() => {\n    WorldWind.Logger.setLoggingLevel(WorldWind.Logger.LEVEL_WARNING);\n    wwd = new WorldWind.WorldWindow(containerRef.current);\n    animator = new WorldWind.GoToAnimator(wwd);\n    var bMNGOneImageLayer = new WorldWind.BMNGOneImageLayer();\n    var bMNGLayer = new WorldWind.BMNGLayer();\n    var bMNGLandSatLayer = new WorldWind.BMNGLandsatLayer();\n    var atmosphereLayer = new WorldWind.AtmosphereLayer(require('../assets/starfield.png'));\n    var starFieldLayer = new WorldWind.StarFieldLayer();\n    var layers = [{\n      layer: bMNGOneImageLayer,\n      enabled: true\n    }, {\n      layer: bMNGLayer,\n      enabled: true\n    }, {\n      layer: bMNGLandSatLayer,\n      enabled: true\n    }, {\n      layer: starFieldLayer,\n      enabled: true\n    }, {\n      layer: atmosphereLayer,\n      enabled: true\n    }, {\n      layer: new WorldWind.ViewControlsLayer(wwd),\n      enabled: true\n    }];\n\n    for (var l = 0; l < layers.length; l++) {\n      layers[l].layer.enabled = layers[l].enabled;\n      wwd.addLayer(layers[l].layer);\n    }\n\n    var now = new Date();\n    atmosphereLayer.time = now;\n    var simulatedMillisPerDay = 8000;\n    var startTimeMillis = Date.now();\n\n    function runSimulation() {\n      var elapsedTimeMillis = Date.now() - startTimeMillis;\n      var simulatedDays = elapsedTimeMillis / simulatedMillisPerDay;\n      var millisPerDay = 24 * 3600 * 1000; // 24 hours/day * 3600 seconds/hour * 1000 milliseconds/second\n\n      var simulatedMillis = simulatedDays * millisPerDay;\n      var simulatedDate = new Date(startTimeMillis + simulatedMillis);\n      atmosphereLayer.time = new Date(Date.now());\n      wwd.redraw();\n      requestAnimationFrame(runSimulation);\n    }\n\n    requestAnimationFrame(runSimulation);\n  }, []);\n  useEffect(() => {\n    if (satCode) {\n      posInterval = setInterval(() => {\n        var currData = getSatelliteInfo(tle, Date.now() + timeDiff, 0, 0);\n        marker.setPosition({\n          lat: currData.lat,\n          lng: currData.lng\n        });\n        var info = `<div>\n            <center><span>${data.sat_name}</span></center>\n            <center><img   height=\"30px\" width='40px' src='${data.country_flag}'/></center>` + '<center>Lat:' + currData.lat.toFixed(3) + ', Lng:' + currData.lng.toFixed(3) + '</center>' + '<center>Velocity:' + currData.velocity.toFixed(3) + 'km/s <br/> Height:' + currData.height.toFixed(3) + 'km</center>' + '</div>';\n        infoWindow.setContent(info);\n      }, 100);\n      pathInterval = setInterval(() => {\n        var currData = getSatelliteInfo(tle, Date.now() + timeDiff, 0, 0);\n        poly.push(currData);\n        polyLine.setPath(poly);\n      }, 1000);\n    } else {\n      clearInterval(posInterval);\n      clearInterval(pathInterval);\n    }\n  }, [satCode]);\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: containerRef,\n    className: \"globeBg\",\n    style: {\n      backgroundColor: '#000000',\n      width: \"100%\",\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  });\n});\nexport default FPVView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/FPVView.js"],"names":["React","useState","createRef","useRef","useEffect","forwardRef","useImperativeHandle","getSatelliteInfo","WorldWind","wwd","animator","posInterval","pathInterval","map","marker","infoWindow","polyLine","poly","tle","data","FPVView","props","ref","containerRef","satCode","setSatCode","timeDiff","setTimeDiff","setSatellite","sat","Logger","setLoggingLevel","LEVEL_WARNING","WorldWindow","current","GoToAnimator","bMNGOneImageLayer","BMNGOneImageLayer","bMNGLayer","BMNGLayer","bMNGLandSatLayer","BMNGLandsatLayer","atmosphereLayer","AtmosphereLayer","require","starFieldLayer","StarFieldLayer","layers","layer","enabled","ViewControlsLayer","l","length","addLayer","now","Date","time","simulatedMillisPerDay","startTimeMillis","runSimulation","elapsedTimeMillis","simulatedDays","millisPerDay","simulatedMillis","simulatedDate","redraw","requestAnimationFrame","setInterval","currData","setPosition","lat","lng","info","sat_name","country_flag","toFixed","velocity","height","setContent","push","setPath","clearInterval","backgroundColor","width"],"mappings":"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","sourcesContent":["import React,{useState,createRef,useRef,useEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\nimport WorldWind from '@nasaworldwind/worldwind'\r\n\r\nvar wwd,animator,posInterval,pathInterval,map,marker,infoWindow,polyLine,poly=[],tle,data\r\n\r\nconst FPVView=forwardRef((props,ref)=>{\r\n  const containerRef=useRef()\r\n  const [satCode,setSatCode]=useState(props.satCode)\r\n  const [timeDiff,setTimeDiff]=useState(props.timeDiff)\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setSatellite(sat){\r\n\r\n    }\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    WorldWind.Logger.setLoggingLevel(WorldWind.Logger.LEVEL_WARNING);\r\n    wwd = new WorldWind.WorldWindow(containerRef.current);\r\n    animator=new WorldWind.GoToAnimator(wwd)\r\n    var bMNGOneImageLayer = new WorldWind.BMNGOneImageLayer();\r\n    var bMNGLayer=new WorldWind.BMNGLayer()\r\n    var bMNGLandSatLayer=new WorldWind.BMNGLandsatLayer();\r\n    var atmosphereLayer = new WorldWind.AtmosphereLayer(require('../assets/starfield.png'));\r\n    var starFieldLayer=new WorldWind.StarFieldLayer()\r\n\r\n    var layers = [\r\n        {layer:bMNGOneImageLayer,enabled:true},\r\n        {layer:bMNGLayer,enabled:true},\r\n        {layer:bMNGLandSatLayer,enabled:true},\r\n        {layer:starFieldLayer,enabled:true},\r\n        {layer:atmosphereLayer,enabled:true},\r\n        {layer: new WorldWind.ViewControlsLayer(wwd), enabled: true}\r\n    ];\r\n\r\n    for (var l = 0; l < layers.length; l++) {\r\n        layers[l].layer.enabled = layers[l].enabled;\r\n        wwd.addLayer(layers[l].layer);\r\n    }\r\n      var now = new Date();\r\n        atmosphereLayer.time = now;\r\n        var simulatedMillisPerDay = 8000;\r\n        var startTimeMillis = Date.now();\r\n        function runSimulation() {\r\n            var elapsedTimeMillis = Date.now() - startTimeMillis;\r\n            var simulatedDays = elapsedTimeMillis / simulatedMillisPerDay;\r\n            var millisPerDay = 24 * 3600 * 1000; // 24 hours/day * 3600 seconds/hour * 1000 milliseconds/second\r\n            var simulatedMillis = simulatedDays * millisPerDay;\r\n            var simulatedDate = new Date(startTimeMillis + simulatedMillis);\r\n            atmosphereLayer.time = new Date(Date.now())\r\n            wwd.redraw();\r\n            requestAnimationFrame(runSimulation);\r\n        }\r\n        requestAnimationFrame(runSimulation);\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    if(satCode) {\r\n      posInterval = setInterval(() => {\r\n        var currData=getSatelliteInfo(tle,Date.now()+timeDiff,0,0)\r\n        marker.setPosition({\r\n          lat:currData.lat,\r\n          lng:currData.lng\r\n        })\r\n\r\n        var info=`<div>\r\n            <center><span>${data.sat_name}</span></center>\r\n            <center><img   height=\"30px\" width='40px' src='${data.country_flag}'/></center>`+\r\n            '<center>Lat:'+currData.lat.toFixed(3)+', Lng:'+currData.lng.toFixed(3)+'</center>'+\r\n            '<center>Velocity:'+currData.velocity.toFixed(3)+'km/s <br/> Height:'+currData.height.toFixed(3)+'km</center>'+\r\n            '</div>'\r\n\r\n        infoWindow.setContent(info)\r\n\r\n      }, 100);\r\n      pathInterval = setInterval(() => {\r\n        var currData=getSatelliteInfo(tle,Date.now()+timeDiff,0,0)\r\n        poly.push(currData)\r\n        polyLine.setPath(poly)\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(posInterval);\r\n      clearInterval(pathInterval);\r\n    }\r\n  },[satCode])\r\n\r\n  return(\r\n    <canvas ref={containerRef} className='globeBg' style={{ backgroundColor:'#000000',width: \"100%\", height: \"100%\" }}/>\r\n  )\r\n})\r\n\r\nexport default FPVView\r\n"]},"metadata":{},"sourceType":"module"}