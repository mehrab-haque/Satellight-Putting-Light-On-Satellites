{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\src\\\\components\\\\ModelView.js\";\nimport React, { useState, createRef, useRef, useEffect, useLayoutEffect, forwardRef, useImperativeHandle } from 'react';\nimport { getSatelliteInfo } from \"tle.js\";\nimport Globe, { Point } from 'react-globe.gl';\nimport * as THREE from 'three';\nimport { sat_data } from '../assets/master';\n\nconst map = (value, x1, y1, x2, y2) => (value - x1) * (y2 - x2) / (y1 - x1) + x2;\n\nvar sat_arr = [];\nObject.keys(sat_data).map((key, ind) => {\n  var data = sat_data[key];\n  console.log(key);\n  sat_arr.push(getSatelliteInfo([data.tle_line1, data.tle_line2], Date.now(), 0, 0, 0));\n});\nvar point_arr = [];\nsat_arr.map((sat, ind) => {\n  var schema = {\n    lat: sat.lat,\n    lng: sat.lng,\n    alt: sat.height / 6400,\n    radius: map(sat.height, 400, 35000, 3, 12),\n    height: sat.height,\n    velocity: sat.velocity,\n    color: sat_data[Object.keys(sat_data)[ind]]['color'],\n    ind: ind\n  };\n  point_arr.push(schema);\n});\nconst ModelView = forwardRef((props, ref) => {\n  const [pointArr, setPointArr] = useState(point_arr);\n  const [container, setContainer] = useState({\n    height: 0,\n    width: 0\n  });\n  const [satCode, setSatCode] = useState(props.satCode);\n  const globeEl = useRef();\n  useImperativeHandle(ref, () => ({\n    setSatellite(sat) {\n      setSatCode(sat.satCode);\n    }\n\n  }));\n  useEffect(() => {\n    //globeEl.current.controls().autoRotate = true;\n    //globeEl.current.controls().autoRotateSpeed = 0.2;\n    console.log(props.parent.current.offsetWidth);\n    setContainer({\n      height: props.parent.current.innerHeight - 5,\n      width: props.parent.current.innerWidth - 4\n    });\n  }, []);\n  useEffect(() => {\n    var defaultSat = Object.keys(sat_data).indexOf(satCode);\n    globeEl.current.pointOfView({\n      lat: point_arr[defaultSat].lat,\n      lng: point_arr[defaultSat].lng,\n      altitude: pointArr[defaultSat].alt + 1.2\n    });\n  }, [satCode]);\n  useLayoutEffect(() => {\n    function updateSize() {\n      if (props.parent.current != null && props.parent.current != undefined) setContainer({\n        height: props.parent.current.innerHeight - 5,\n        width: props.parent.current.innerWidth - 4\n      });\n    }\n\n    window.addEventListener('resize', updateSize);\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      sat_arr = [];\n      Object.keys(sat_data).map((key, ind) => {\n        var data = sat_data[key];\n        sat_arr.push(getSatelliteInfo([data.tle_line1, data.tle_line2], Date.now(), 23.762397, 90.418917, 0));\n      });\n      point_arr = [];\n      sat_arr.map((sat, ind) => {\n        var schema = {\n          lat: sat.lat,\n          lng: sat.lng,\n          alt: sat.height / 6400,\n          radius: map(sat.height, 400, 35000, 2.5, 6),\n          height: sat.height,\n          velocity: sat.velocity,\n          color: sat_data[Object.keys(sat_data)[ind]]['color'],\n          ind: ind\n        };\n        point_arr.push(schema);\n      });\n      setPointArr(point_arr);\n    }, 500);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(Globe, {\n    showAtmosphere: false,\n    backgroundColor: \"#ffffff\",\n    height: container.height,\n    width: container.width,\n    ref: globeEl,\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-day.jpg\",\n    bumpImageUrl: \"//unpkg.com/three-globe/example/img/earth-topology.png\",\n    showGraticules: true,\n    onCustomLayerHover: d => {\n      if (d != null && d != undefined) {}\n    },\n    onCustomLayerClick: d => {\n      if (d != null && d != undefined) {}\n    },\n    customLayerData: pointArr,\n    customThreeObject: d => {\n      var mesh = new THREE.Mesh(new THREE.SphereBufferGeometry(d.radius), new THREE.MeshLambertMaterial({\n        color: d.color\n      }));\n      var group = new THREE.Group();\n      group.add(mesh);\n      return group;\n    },\n    customThreeObjectUpdate: (obj, d) => {\n      Object.assign(obj.position, globeEl.current.getCoords(d.lat, d.lng, d.alt));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  });\n});\nexport default ModelView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/ModelView.js"],"names":["React","useState","createRef","useRef","useEffect","useLayoutEffect","forwardRef","useImperativeHandle","getSatelliteInfo","Globe","Point","THREE","sat_data","map","value","x1","y1","x2","y2","sat_arr","Object","keys","key","ind","data","console","log","push","tle_line1","tle_line2","Date","now","point_arr","sat","schema","lat","lng","alt","height","radius","velocity","color","ModelView","props","ref","pointArr","setPointArr","container","setContainer","width","satCode","setSatCode","globeEl","setSatellite","parent","current","offsetWidth","innerHeight","innerWidth","defaultSat","indexOf","pointOfView","altitude","updateSize","undefined","window","addEventListener","removeEventListener","interval","setInterval","clearInterval","d","mesh","Mesh","SphereBufferGeometry","MeshLambertMaterial","group","Group","add","obj","assign","position","getCoords"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,EAAiCC,MAAjC,EAAwCC,SAAxC,EAAkDC,eAAlD,EAAkEC,UAAlE,EAA8EC,mBAA9E,QAAwG,OAAxG;AACA,SAASC,gBAAT,QAAiC,QAAjC;AACA,OAAOC,KAAP,IAAcC,KAAd,QAA0B,gBAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;;AAEA,MAAMC,GAAG,GAAG,CAACC,KAAD,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB,KAA2B,CAACJ,KAAK,GAAGC,EAAT,KAAgBG,EAAE,GAAGD,EAArB,KAA4BD,EAAE,GAAGD,EAAjC,IAAuCE,EAA9E;;AAEA,IAAIE,OAAO,GAAC,EAAZ;AACAC,MAAM,CAACC,IAAP,CAAYT,QAAZ,EAAsBC,GAAtB,CAA0B,CAACS,GAAD,EAAKC,GAAL,KAAW;AACnC,MAAIC,IAAI,GAACZ,QAAQ,CAACU,GAAD,CAAjB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACAH,EAAAA,OAAO,CAACQ,IAAR,CAAanB,gBAAgB,CAAC,CAACgB,IAAI,CAACI,SAAN,EAAgBJ,IAAI,CAACK,SAArB,CAAD,EAAiCC,IAAI,CAACC,GAAL,EAAjC,EAA4C,CAA5C,EAA8C,CAA9C,EAAgD,CAAhD,CAA7B;AACD,CAJD;AAME,IAAIC,SAAS,GAAC,EAAd;AACAb,OAAO,CAACN,GAAR,CAAY,CAACoB,GAAD,EAAKV,GAAL,KAAW;AACrB,MAAIW,MAAM,GAAC;AACTC,IAAAA,GAAG,EAACF,GAAG,CAACE,GADC;AAETC,IAAAA,GAAG,EAACH,GAAG,CAACG,GAFC;AAGTC,IAAAA,GAAG,EAACJ,GAAG,CAACK,MAAJ,GAAW,IAHN;AAITC,IAAAA,MAAM,EAAC1B,GAAG,CAACoB,GAAG,CAACK,MAAL,EAAY,GAAZ,EAAgB,KAAhB,EAAsB,CAAtB,EAAwB,EAAxB,CAJD;AAKTA,IAAAA,MAAM,EAACL,GAAG,CAACK,MALF;AAMTE,IAAAA,QAAQ,EAACP,GAAG,CAACO,QANJ;AAOTC,IAAAA,KAAK,EAAC7B,QAAQ,CAACQ,MAAM,CAACC,IAAP,CAAYT,QAAZ,EAAsBW,GAAtB,CAAD,CAAR,CAAqC,OAArC,CAPG;AAQTA,IAAAA,GAAG,EAACA;AARK,GAAX;AAUAS,EAAAA,SAAS,CAACL,IAAV,CAAeO,MAAf;AACD,CAZD;AAcF,MAAMQ,SAAS,GAACpC,UAAU,CAAC,CAACqC,KAAD,EAAOC,GAAP,KAAa;AAEtC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B7C,QAAQ,CAAC+B,SAAD,CAAxC;AACA,QAAM,CAACe,SAAD,EAAWC,YAAX,IAAyB/C,QAAQ,CAAC;AAACqC,IAAAA,MAAM,EAAC,CAAR;AAAUW,IAAAA,KAAK,EAAC;AAAhB,GAAD,CAAvC;AACA,QAAM,CAACC,OAAD,EAASC,UAAT,IAAqBlD,QAAQ,CAAC0C,KAAK,CAACO,OAAP,CAAnC;AACA,QAAME,OAAO,GAAGjD,MAAM,EAAtB;AAGAI,EAAAA,mBAAmB,CAACqC,GAAD,EAAM,OAAO;AAC9BS,IAAAA,YAAY,CAACpB,GAAD,EAAK;AACfkB,MAAAA,UAAU,CAAClB,GAAG,CAACiB,OAAL,CAAV;AACD;;AAH6B,GAAP,CAAN,CAAnB;AAQA9C,EAAAA,SAAS,CAAC,MAAI;AACZ;AACE;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAK,CAACW,MAAN,CAAaC,OAAb,CAAqBC,WAAjC;AACAR,IAAAA,YAAY,CAAC;AACXV,MAAAA,MAAM,EAACK,KAAK,CAACW,MAAN,CAAaC,OAAb,CAAqBE,WAArB,GAAiC,CAD7B;AAEXR,MAAAA,KAAK,EAACN,KAAK,CAACW,MAAN,CAAaC,OAAb,CAAqBG,UAArB,GAAgC;AAF3B,KAAD,CAAZ;AAKH,GATQ,EASP,EATO,CAAT;AAWAtD,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAIuD,UAAU,GAACvC,MAAM,CAACC,IAAP,CAAYT,QAAZ,EAAsBgD,OAAtB,CAA8BV,OAA9B,CAAf;AACAE,IAAAA,OAAO,CAACG,OAAR,CAAgBM,WAAhB,CAA4B;AAAE1B,MAAAA,GAAG,EAACH,SAAS,CAAC2B,UAAD,CAAT,CAAsBxB,GAA5B;AAAgCC,MAAAA,GAAG,EAACJ,SAAS,CAAC2B,UAAD,CAAT,CAAsBvB,GAA1D;AAA8D0B,MAAAA,QAAQ,EAACjB,QAAQ,CAACc,UAAD,CAAR,CAAqBtB,GAArB,GAAyB;AAAhG,KAA5B;AACD,GAHQ,EAGP,CAACa,OAAD,CAHO,CAAT;AAKA7C,EAAAA,eAAe,CAAC,MAAM;AACpB,aAAS0D,UAAT,GAAsB;AACpB,UAAGpB,KAAK,CAACW,MAAN,CAAaC,OAAb,IAAsB,IAAtB,IAA8BZ,KAAK,CAACW,MAAN,CAAaC,OAAb,IAAsBS,SAAvD,EACEhB,YAAY,CAAC;AACXV,QAAAA,MAAM,EAACK,KAAK,CAACW,MAAN,CAAaC,OAAb,CAAqBE,WAArB,GAAiC,CAD7B;AAEXR,QAAAA,KAAK,EAACN,KAAK,CAACW,MAAN,CAAaC,OAAb,CAAqBG,UAArB,GAAgC;AAF3B,OAAD,CAAZ;AAIH;;AACDO,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCH,UAAlC;AACAA,IAAAA,UAAU;AACV,WAAO,MAAME,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCJ,UAArC,CAAb;AACD,GAXc,EAWZ,EAXY,CAAf;AAaA3D,EAAAA,SAAS,CAAC,MAAI;AAEZ,UAAMgE,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjClD,MAAAA,OAAO,GAAC,EAAR;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYT,QAAZ,EAAsBC,GAAtB,CAA0B,CAACS,GAAD,EAAKC,GAAL,KAAW;AACnC,YAAIC,IAAI,GAACZ,QAAQ,CAACU,GAAD,CAAjB;AACAH,QAAAA,OAAO,CAACQ,IAAR,CAAanB,gBAAgB,CAAC,CAACgB,IAAI,CAACI,SAAN,EAAgBJ,IAAI,CAACK,SAArB,CAAD,EAAiCC,IAAI,CAACC,GAAL,EAAjC,EAA4C,SAA5C,EAAsD,SAAtD,EAAgE,CAAhE,CAA7B;AACD,OAHD;AAKAC,MAAAA,SAAS,GAAC,EAAV;AACAb,MAAAA,OAAO,CAACN,GAAR,CAAY,CAACoB,GAAD,EAAKV,GAAL,KAAW;AACrB,YAAIW,MAAM,GAAC;AACTC,UAAAA,GAAG,EAACF,GAAG,CAACE,GADC;AAETC,UAAAA,GAAG,EAACH,GAAG,CAACG,GAFC;AAGTC,UAAAA,GAAG,EAACJ,GAAG,CAACK,MAAJ,GAAW,IAHN;AAITC,UAAAA,MAAM,EAAC1B,GAAG,CAACoB,GAAG,CAACK,MAAL,EAAY,GAAZ,EAAgB,KAAhB,EAAsB,GAAtB,EAA0B,CAA1B,CAJD;AAKTA,UAAAA,MAAM,EAACL,GAAG,CAACK,MALF;AAMTE,UAAAA,QAAQ,EAACP,GAAG,CAACO,QANJ;AAOTC,UAAAA,KAAK,EAAC7B,QAAQ,CAACQ,MAAM,CAACC,IAAP,CAAYT,QAAZ,EAAsBW,GAAtB,CAAD,CAAR,CAAqC,OAArC,CAPG;AAQTA,UAAAA,GAAG,EAACA;AARK,SAAX;AAUAS,QAAAA,SAAS,CAACL,IAAV,CAAeO,MAAf;AACD,OAZD;AAaAY,MAAAA,WAAW,CAACd,SAAD,CAAX;AACD,KAtB2B,EAsBzB,GAtByB,CAA5B;AAuBA,WAAO,MAAM;AAACsC,MAAAA,aAAa,CAACF,QAAD,CAAb;AAAwB,KAAtC;AACD,GA1BQ,EA0BP,EA1BO,CAAT;AA4BA,sBAEI,oBAAC,KAAD;AAEM,IAAA,cAAc,EAAE,KAFtB;AAGM,IAAA,eAAe,EAAC,SAHtB;AAIM,IAAA,MAAM,EAAErB,SAAS,CAACT,MAJxB;AAKM,IAAA,KAAK,EAAES,SAAS,CAACE,KALvB;AAMM,IAAA,GAAG,EAAEG,OANX;AAOM,IAAA,aAAa,EAAC,mDAPpB;AAQM,IAAA,YAAY,EAAC,wDARnB;AAUM,IAAA,cAAc,EAAE,IAVtB;AAaM,IAAA,kBAAkB,EAAEmB,CAAC,IAAE;AACnB,UAAGA,CAAC,IAAE,IAAH,IAAWA,CAAC,IAAEP,SAAjB,EAA2B,CAE1B;AACF,KAjBT;AAoBI,IAAA,kBAAkB,EAAEO,CAAC,IAAE;AACnB,UAAGA,CAAC,IAAE,IAAH,IAAWA,CAAC,IAAEP,SAAjB,EAA2B,CAE1B;AACF,KAxBP;AA2BE,IAAA,eAAe,EAAEnB,QA3BnB;AA4BE,IAAA,iBAAiB,EAAE0B,CAAC,IAAG;AACrB,UAAIC,IAAI,GAAC,IAAI7D,KAAK,CAAC8D,IAAV,CACP,IAAI9D,KAAK,CAAC+D,oBAAV,CAA+BH,CAAC,CAAChC,MAAjC,CADO,EAEP,IAAI5B,KAAK,CAACgE,mBAAV,CAA8B;AAAElC,QAAAA,KAAK,EAAE8B,CAAC,CAAC9B;AAAX,OAA9B,CAFO,CAAT;AAIA,UAAImC,KAAK,GAAC,IAAIjE,KAAK,CAACkE,KAAV,EAAV;AACAD,MAAAA,KAAK,CAACE,GAAN,CAAUN,IAAV;AACA,aAAOI,KAAP;AACD,KApCH;AAsCE,IAAA,uBAAuB,EAAE,CAACG,GAAD,EAAMR,CAAN,KAAY;AACnCnD,MAAAA,MAAM,CAAC4D,MAAP,CAAcD,GAAG,CAACE,QAAlB,EAA4B7B,OAAO,CAACG,OAAR,CAAgB2B,SAAhB,CAA0BX,CAAC,CAACpC,GAA5B,EAAiCoC,CAAC,CAACnC,GAAnC,EAAwCmC,CAAC,CAAClC,GAA1C,CAA5B;AACD,KAxCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ;AA8CD,CAvHyB,CAA1B;AAyHA,eAAeK,SAAf","sourcesContent":["import React,{useState,createRef,useRef,useEffect,useLayoutEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\nimport Globe,{Point} from 'react-globe.gl';\r\nimport * as THREE from 'three'\r\nimport {sat_data} from '../assets/master'\r\n\r\nconst map = (value, x1, y1, x2, y2) => (value - x1) * (y2 - x2) / (y1 - x1) + x2;\r\n\r\nvar sat_arr=[]\r\nObject.keys(sat_data).map((key,ind)=>{\r\n  var data=sat_data[key]\r\n  console.log(key)\r\n  sat_arr.push(getSatelliteInfo([data.tle_line1,data.tle_line2],Date.now(),0,0,0))\r\n})\r\n\r\n  var point_arr=[]\r\n  sat_arr.map((sat,ind)=>{\r\n    var schema={\r\n      lat:sat.lat,\r\n      lng:sat.lng,\r\n      alt:sat.height/6400,\r\n      radius:map(sat.height,400,35000,3,12),\r\n      height:sat.height,\r\n      velocity:sat.velocity,\r\n      color:sat_data[Object.keys(sat_data)[ind]]['color'],\r\n      ind:ind\r\n    }\r\n    point_arr.push(schema)\r\n  })\r\n\r\nconst ModelView=forwardRef((props,ref)=>{\r\n\r\n  const [pointArr, setPointArr] = useState(point_arr);\r\n  const [container,setContainer]=useState({height:0,width:0})\r\n  const [satCode,setSatCode]=useState(props.satCode)\r\n  const globeEl = useRef();\r\n\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setSatellite(sat){\r\n      setSatCode(sat.satCode)\r\n    }\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    //globeEl.current.controls().autoRotate = true;\r\n      //globeEl.current.controls().autoRotateSpeed = 0.2;\r\n      console.log(props.parent.current.offsetWidth)\r\n      setContainer({\r\n        height:props.parent.current.innerHeight-5,\r\n        width:props.parent.current.innerWidth-4\r\n      })\r\n\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    var defaultSat=Object.keys(sat_data).indexOf(satCode)\r\n    globeEl.current.pointOfView({ lat:point_arr[defaultSat].lat,lng:point_arr[defaultSat].lng,altitude:pointArr[defaultSat].alt+1.2 });\r\n  },[satCode])\r\n\r\n  useLayoutEffect(() => {\r\n    function updateSize() {\r\n      if(props.parent.current!=null && props.parent.current!=undefined)\r\n        setContainer({\r\n          height:props.parent.current.innerHeight-5,\r\n          width:props.parent.current.innerWidth-4\r\n        })\r\n    }\r\n    window.addEventListener('resize', updateSize);\r\n    updateSize();\r\n    return () => window.removeEventListener('resize', updateSize);\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n\r\n    const interval = setInterval(() => {\r\n      sat_arr=[]\r\n      Object.keys(sat_data).map((key,ind)=>{\r\n        var data=sat_data[key]\r\n        sat_arr.push(getSatelliteInfo([data.tle_line1,data.tle_line2],Date.now(),23.762397,90.418917,0))\r\n      })\r\n\r\n      point_arr=[]\r\n      sat_arr.map((sat,ind)=>{\r\n        var schema={\r\n          lat:sat.lat,\r\n          lng:sat.lng,\r\n          alt:sat.height/6400,\r\n          radius:map(sat.height,400,35000,2.5,6),\r\n          height:sat.height,\r\n          velocity:sat.velocity,\r\n          color:sat_data[Object.keys(sat_data)[ind]]['color'],\r\n          ind:ind\r\n        }\r\n        point_arr.push(schema)\r\n      })\r\n      setPointArr(point_arr)\r\n    }, 500);\r\n    return () => {clearInterval(interval)}\r\n  },[])\r\n\r\n  return(\r\n\r\n      <Globe\r\n\r\n            showAtmosphere={false}\r\n            backgroundColor='#ffffff'\r\n            height={container.height}\r\n            width={container.width}\r\n            ref={globeEl}\r\n            globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-day.jpg\"\r\n            bumpImageUrl=\"//unpkg.com/three-globe/example/img/earth-topology.png\"\r\n\r\n            showGraticules={true}\r\n\r\n\r\n            onCustomLayerHover={d=>{\r\n                if(d!=null && d!=undefined){\r\n\r\n                }\r\n              }\r\n          }\r\n\r\n          onCustomLayerClick={d=>{\r\n              if(d!=null && d!=undefined){\r\n\r\n              }\r\n            }\r\n        }\r\n\r\n        customLayerData={pointArr}\r\n        customThreeObject={d =>{\r\n          var mesh=new THREE.Mesh(\r\n            new THREE.SphereBufferGeometry(d.radius),\r\n            new THREE.MeshLambertMaterial({ color: d.color })\r\n          )\r\n          var group=new THREE.Group()\r\n          group.add(mesh)\r\n          return group\r\n        }\r\n      }\r\n        customThreeObjectUpdate={(obj, d) => {\r\n          Object.assign(obj.position, globeEl.current.getCoords(d.lat, d.lng, d.alt));\r\n        }}\r\n       />\r\n\r\n  )\r\n})\r\n\r\nexport default ModelView\r\n"]},"metadata":{},"sourceType":"module"}