{"ast":null,"code":"/*!\n * satellite-js v3.0.1\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\nvar pi = Math.PI;\nvar twoPi = pi * 2;\nvar deg2rad = pi / 180.0;\nvar rad2deg = 180 / pi;\nvar minutesPerDay = 1440.0;\nvar mu = 398600.5; // in km3 / s2\n\nvar earthRadius = 6378.137; // in km\n\nvar xke = 60.0 / Math.sqrt(earthRadius * earthRadius * earthRadius / mu);\nvar vkmpersec = earthRadius * xke / 60.0;\nvar tumin = 1.0 / xke;\nvar j2 = 0.00108262998905;\nvar j3 = -0.00000253215306;\nvar j4 = -0.00000161098761;\nvar j3oj2 = j3 / j2;\nvar x2o3 = 2.0 / 3.0;\nvar constants = /*#__PURE__*/Object.freeze({\n  pi: pi,\n  twoPi: twoPi,\n  deg2rad: deg2rad,\n  rad2deg: rad2deg,\n  minutesPerDay: minutesPerDay,\n  mu: mu,\n  earthRadius: earthRadius,\n  xke: xke,\n  vkmpersec: vkmpersec,\n  tumin: tumin,\n  j2: j2,\n  j3: j3,\n  j4: j4,\n  j3oj2: j3oj2,\n  x2o3: x2o3\n});\n/* -----------------------------------------------------------------------------\n *\n *                           procedure days2mdhms\n *\n *  this procedure converts the day of the year, days, to the equivalent month\n *    day, hour, minute and second.\n *\n *  algorithm     : set up array for the number of days per month\n *                  find leap year - use 1900 because 2000 is a leap year\n *                  loop through a temp value while the value is < the days\n *                  perform int conversions to the correct day and month\n *                  convert remainder into h m s using type conversions\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs          description                    range / units\n *    year        - year                           1900 .. 2100\n *    days        - julian day of the year         0.0  .. 366.0\n *\n *  outputs       :\n *    mon         - month                          1 .. 12\n *    day         - day                            1 .. 28,29,30,31\n *    hr          - hour                           0 .. 23\n *    min         - minute                         0 .. 59\n *    sec         - second                         0.0 .. 59.999\n *\n *  locals        :\n *    dayofyr     - day of year\n *    temp        - temporary extended values\n *    inttemp     - temporary int value\n *    i           - index\n *    lmonth[12]  - int array containing the number of days per month\n *\n *  coupling      :\n *    none.\n * --------------------------------------------------------------------------- */\n\nfunction days2mdhms(year, days) {\n  var lmonth = [31, year % 4 === 0 ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  var dayofyr = Math.floor(days); //  ----------------- find month and day of month ----------------\n\n  var i = 1;\n  var inttemp = 0;\n\n  while (dayofyr > inttemp + lmonth[i - 1] && i < 12) {\n    inttemp += lmonth[i - 1];\n    i += 1;\n  }\n\n  var mon = i;\n  var day = dayofyr - inttemp; //  ----------------- find hours minutes and seconds -------------\n\n  var temp = (days - dayofyr) * 24.0;\n  var hr = Math.floor(temp);\n  temp = (temp - hr) * 60.0;\n  var minute = Math.floor(temp);\n  var sec = (temp - minute) * 60.0;\n  return {\n    mon: mon,\n    day: day,\n    hr: hr,\n    minute: minute,\n    sec: sec\n  };\n}\n/* -----------------------------------------------------------------------------\n *\n *                           procedure jday\n *\n *  this procedure finds the julian date given the year, month, day, and time.\n *    the julian date is defined by each elapsed day since noon, jan 1, 4713 bc.\n *\n *  algorithm     : calculate the answer in one step for efficiency\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs          description                    range / units\n *    year        - year                           1900 .. 2100\n *    mon         - month                          1 .. 12\n *    day         - day                            1 .. 28,29,30,31\n *    hr          - universal time hour            0 .. 23\n *    min         - universal time min             0 .. 59\n *    sec         - universal time sec             0.0 .. 59.999\n *\n *  outputs       :\n *    jd          - julian date                    days from 4713 bc\n *\n *  locals        :\n *    none.\n *\n *  coupling      :\n *    none.\n *\n *  references    :\n *    vallado       2007, 189, alg 14, ex 3-14\n *\n * --------------------------------------------------------------------------- */\n\n\nfunction jdayInternal(year, mon, day, hr, minute, sec) {\n  var msec = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n  return 367.0 * year - Math.floor(7 * (year + Math.floor((mon + 9) / 12.0)) * 0.25) + Math.floor(275 * mon / 9.0) + day + 1721013.5 + ((msec / 60000 + sec / 60.0 + minute) / 60.0 + hr) / 24.0 // ut in days\n  // # - 0.5*sgn(100.0*year + mon - 190002.5) + 0.5;\n  ;\n}\n\nfunction jday(year, mon, day, hr, minute, sec, msec) {\n  if (year instanceof Date) {\n    var date = year;\n    return jdayInternal(date.getUTCFullYear(), date.getUTCMonth() + 1, // Note, this function requires months in range 1-12.\n    date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  }\n\n  return jdayInternal(year, mon, day, hr, minute, sec, msec);\n}\n/* -----------------------------------------------------------------------------\n *\n *                           procedure invjday\n *\n *  this procedure finds the year, month, day, hour, minute and second\n *  given the julian date. tu can be ut1, tdt, tdb, etc.\n *\n *  algorithm     : set up starting values\n *                  find leap year - use 1900 because 2000 is a leap year\n *                  find the elapsed days through the year in a loop\n *                  call routine to find each individual value\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs          description                    range / units\n *    jd          - julian date                    days from 4713 bc\n *\n *  outputs       :\n *    year        - year                           1900 .. 2100\n *    mon         - month                          1 .. 12\n *    day         - day                            1 .. 28,29,30,31\n *    hr          - hour                           0 .. 23\n *    min         - minute                         0 .. 59\n *    sec         - second                         0.0 .. 59.999\n *\n *  locals        :\n *    days        - day of year plus fractional\n *                  portion of a day               days\n *    tu          - julian centuries from 0 h\n *                  jan 0, 1900\n *    temp        - temporary double values\n *    leapyrs     - number of leap years from 1900\n *\n *  coupling      :\n *    days2mdhms  - finds month, day, hour, minute and second given days and year\n *\n *  references    :\n *    vallado       2007, 208, alg 22, ex 3-13\n * --------------------------------------------------------------------------- */\n\n\nfunction invjday(jd, asArray) {\n  // --------------- find year and days of the year -\n  var temp = jd - 2415019.5;\n  var tu = temp / 365.25;\n  var year = 1900 + Math.floor(tu);\n  var leapyrs = Math.floor((year - 1901) * 0.25); // optional nudge by 8.64x10-7 sec to get even outputs\n\n  var days = temp - ((year - 1900) * 365.0 + leapyrs) + 0.00000000001; // ------------ check for case of beginning of a year -----------\n\n  if (days < 1.0) {\n    year -= 1;\n    leapyrs = Math.floor((year - 1901) * 0.25);\n    days = temp - ((year - 1900) * 365.0 + leapyrs);\n  } // ----------------- find remaing data  -------------------------\n\n\n  var mdhms = days2mdhms(year, days);\n  var mon = mdhms.mon,\n      day = mdhms.day,\n      hr = mdhms.hr,\n      minute = mdhms.minute;\n  var sec = mdhms.sec - 0.00000086400;\n\n  if (asArray) {\n    return [year, mon, day, hr, minute, Math.floor(sec)];\n  }\n\n  return new Date(Date.UTC(year, mon - 1, day, hr, minute, Math.floor(sec)));\n}\n/* -----------------------------------------------------------------------------\n *\n *                           procedure dpper\n *\n *  this procedure provides deep space long period periodic contributions\n *    to the mean elements.  by design, these periodics are zero at epoch.\n *    this used to be dscom which included initialization, but it's really a\n *    recurring function.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    e3          -\n *    ee2         -\n *    peo         -\n *    pgho        -\n *    pho         -\n *    pinco       -\n *    plo         -\n *    se2 , se3 , sgh2, sgh3, sgh4, sh2, sh3, si2, si3, sl2, sl3, sl4 -\n *    t           -\n *    xh2, xh3, xi2, xi3, xl2, xl3, xl4 -\n *    zmol        -\n *    zmos        -\n *    ep          - eccentricity                           0.0 - 1.0\n *    inclo       - inclination - needed for lyddane modification\n *    nodep       - right ascension of ascending node\n *    argpp       - argument of perigee\n *    mp          - mean anomaly\n *\n *  outputs       :\n *    ep          - eccentricity                           0.0 - 1.0\n *    inclp       - inclination\n *    nodep        - right ascension of ascending node\n *    argpp       - argument of perigee\n *    mp          - mean anomaly\n *\n *  locals        :\n *    alfdp       -\n *    betdp       -\n *    cosip  , sinip  , cosop  , sinop  ,\n *    dalf        -\n *    dbet        -\n *    dls         -\n *    f2, f3      -\n *    pe          -\n *    pgh         -\n *    ph          -\n *    pinc        -\n *    pl          -\n *    sel   , ses   , sghl  , sghs  , shl   , shs   , sil   , sinzf , sis   ,\n *    sll   , sls\n *    xls         -\n *    xnoh        -\n *    zf          -\n *    zm          -\n *\n *  coupling      :\n *    none.\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\n\nfunction dpper(satrec, options) {\n  var e3 = satrec.e3,\n      ee2 = satrec.ee2,\n      peo = satrec.peo,\n      pgho = satrec.pgho,\n      pho = satrec.pho,\n      pinco = satrec.pinco,\n      plo = satrec.plo,\n      se2 = satrec.se2,\n      se3 = satrec.se3,\n      sgh2 = satrec.sgh2,\n      sgh3 = satrec.sgh3,\n      sgh4 = satrec.sgh4,\n      sh2 = satrec.sh2,\n      sh3 = satrec.sh3,\n      si2 = satrec.si2,\n      si3 = satrec.si3,\n      sl2 = satrec.sl2,\n      sl3 = satrec.sl3,\n      sl4 = satrec.sl4,\n      t = satrec.t,\n      xgh2 = satrec.xgh2,\n      xgh3 = satrec.xgh3,\n      xgh4 = satrec.xgh4,\n      xh2 = satrec.xh2,\n      xh3 = satrec.xh3,\n      xi2 = satrec.xi2,\n      xi3 = satrec.xi3,\n      xl2 = satrec.xl2,\n      xl3 = satrec.xl3,\n      xl4 = satrec.xl4,\n      zmol = satrec.zmol,\n      zmos = satrec.zmos;\n  var init = options.init,\n      opsmode = options.opsmode;\n  var ep = options.ep,\n      inclp = options.inclp,\n      nodep = options.nodep,\n      argpp = options.argpp,\n      mp = options.mp; // Copy satellite attributes into local variables for convenience\n  // and symmetry in writing formulae.\n\n  var alfdp;\n  var betdp;\n  var cosip;\n  var sinip;\n  var cosop;\n  var sinop;\n  var dalf;\n  var dbet;\n  var dls;\n  var f2;\n  var f3;\n  var pe;\n  var pgh;\n  var ph;\n  var pinc;\n  var pl;\n  var sinzf;\n  var xls;\n  var xnoh;\n  var zf;\n  var zm; //  ---------------------- constants -----------------------------\n\n  var zns = 1.19459e-5;\n  var zes = 0.01675;\n  var znl = 1.5835218e-4;\n  var zel = 0.05490; //  --------------- calculate time varying periodics -----------\n\n  zm = zmos + zns * t; // be sure that the initial call has time set to zero\n\n  if (init === 'y') {\n    zm = zmos;\n  }\n\n  zf = zm + 2.0 * zes * Math.sin(zm);\n  sinzf = Math.sin(zf);\n  f2 = 0.5 * sinzf * sinzf - 0.25;\n  f3 = -0.5 * sinzf * Math.cos(zf);\n  var ses = se2 * f2 + se3 * f3;\n  var sis = si2 * f2 + si3 * f3;\n  var sls = sl2 * f2 + sl3 * f3 + sl4 * sinzf;\n  var sghs = sgh2 * f2 + sgh3 * f3 + sgh4 * sinzf;\n  var shs = sh2 * f2 + sh3 * f3;\n  zm = zmol + znl * t;\n\n  if (init === 'y') {\n    zm = zmol;\n  }\n\n  zf = zm + 2.0 * zel * Math.sin(zm);\n  sinzf = Math.sin(zf);\n  f2 = 0.5 * sinzf * sinzf - 0.25;\n  f3 = -0.5 * sinzf * Math.cos(zf);\n  var sel = ee2 * f2 + e3 * f3;\n  var sil = xi2 * f2 + xi3 * f3;\n  var sll = xl2 * f2 + xl3 * f3 + xl4 * sinzf;\n  var sghl = xgh2 * f2 + xgh3 * f3 + xgh4 * sinzf;\n  var shll = xh2 * f2 + xh3 * f3;\n  pe = ses + sel;\n  pinc = sis + sil;\n  pl = sls + sll;\n  pgh = sghs + sghl;\n  ph = shs + shll;\n\n  if (init === 'n') {\n    pe -= peo;\n    pinc -= pinco;\n    pl -= plo;\n    pgh -= pgho;\n    ph -= pho;\n    inclp += pinc;\n    ep += pe;\n    sinip = Math.sin(inclp);\n    cosip = Math.cos(inclp);\n    /* ----------------- apply periodics directly ------------ */\n    // sgp4fix for lyddane choice\n    // strn3 used original inclination - this is technically feasible\n    // gsfc used perturbed inclination - also technically feasible\n    // probably best to readjust the 0.2 limit value and limit discontinuity\n    // 0.2 rad = 11.45916 deg\n    // use next line for original strn3 approach and original inclination\n    // if (inclo >= 0.2)\n    // use next line for gsfc version and perturbed inclination\n\n    if (inclp >= 0.2) {\n      ph /= sinip;\n      pgh -= cosip * ph;\n      argpp += pgh;\n      nodep += ph;\n      mp += pl;\n    } else {\n      //  ---- apply periodics with lyddane modification ----\n      sinop = Math.sin(nodep);\n      cosop = Math.cos(nodep);\n      alfdp = sinip * sinop;\n      betdp = sinip * cosop;\n      dalf = ph * cosop + pinc * cosip * sinop;\n      dbet = -ph * sinop + pinc * cosip * cosop;\n      alfdp += dalf;\n      betdp += dbet;\n      nodep %= twoPi; //  sgp4fix for afspc written intrinsic functions\n      //  nodep used without a trigonometric function ahead\n\n      if (nodep < 0.0 && opsmode === 'a') {\n        nodep += twoPi;\n      }\n\n      xls = mp + argpp + cosip * nodep;\n      dls = pl + pgh - pinc * nodep * sinip;\n      xls += dls;\n      xnoh = nodep;\n      nodep = Math.atan2(alfdp, betdp); //  sgp4fix for afspc written intrinsic functions\n      //  nodep used without a trigonometric function ahead\n\n      if (nodep < 0.0 && opsmode === 'a') {\n        nodep += twoPi;\n      }\n\n      if (Math.abs(xnoh - nodep) > pi) {\n        if (nodep < xnoh) {\n          nodep += twoPi;\n        } else {\n          nodep -= twoPi;\n        }\n      }\n\n      mp += pl;\n      argpp = xls - mp - cosip * nodep;\n    }\n  }\n\n  return {\n    ep: ep,\n    inclp: inclp,\n    nodep: nodep,\n    argpp: argpp,\n    mp: mp\n  };\n}\n/*-----------------------------------------------------------------------------\n *\n *                           procedure dscom\n *\n *  this procedure provides deep space common items used by both the secular\n *    and periodics subroutines.  input is provided as shown. this routine\n *    used to be called dpper, but the functions inside weren't well organized.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    epoch       -\n *    ep          - eccentricity\n *    argpp       - argument of perigee\n *    tc          -\n *    inclp       - inclination\n *    nodep       - right ascension of ascending node\n *    np          - mean motion\n *\n *  outputs       :\n *    sinim  , cosim  , sinomm , cosomm , snodm  , cnodm\n *    day         -\n *    e3          -\n *    ee2         -\n *    em          - eccentricity\n *    emsq        - eccentricity squared\n *    gam         -\n *    peo         -\n *    pgho        -\n *    pho         -\n *    pinco       -\n *    plo         -\n *    rtemsq      -\n *    se2, se3         -\n *    sgh2, sgh3, sgh4        -\n *    sh2, sh3, si2, si3, sl2, sl3, sl4         -\n *    s1, s2, s3, s4, s5, s6, s7          -\n *    ss1, ss2, ss3, ss4, ss5, ss6, ss7, sz1, sz2, sz3         -\n *    sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33        -\n *    xgh2, xgh3, xgh4, xh2, xh3, xi2, xi3, xl2, xl3, xl4         -\n *    nm          - mean motion\n *    z1, z2, z3, z11, z12, z13, z21, z22, z23, z31, z32, z33         -\n *    zmol        -\n *    zmos        -\n *\n *  locals        :\n *    a1, a2, a3, a4, a5, a6, a7, a8, a9, a10         -\n *    betasq      -\n *    cc          -\n *    ctem, stem        -\n *    x1, x2, x3, x4, x5, x6, x7, x8          -\n *    xnodce      -\n *    xnoi        -\n *    zcosg  , zsing  , zcosgl , zsingl , zcosh  , zsinh  , zcoshl , zsinhl ,\n *    zcosi  , zsini  , zcosil , zsinil ,\n *    zx          -\n *    zy          -\n *\n *  coupling      :\n *    none.\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\n\nfunction dscom(options) {\n  var epoch = options.epoch,\n      ep = options.ep,\n      argpp = options.argpp,\n      tc = options.tc,\n      inclp = options.inclp,\n      nodep = options.nodep,\n      np = options.np;\n  var a1;\n  var a2;\n  var a3;\n  var a4;\n  var a5;\n  var a6;\n  var a7;\n  var a8;\n  var a9;\n  var a10;\n  var cc;\n  var x1;\n  var x2;\n  var x3;\n  var x4;\n  var x5;\n  var x6;\n  var x7;\n  var x8;\n  var zcosg;\n  var zsing;\n  var zcosh;\n  var zsinh;\n  var zcosi;\n  var zsini;\n  var ss1;\n  var ss2;\n  var ss3;\n  var ss4;\n  var ss5;\n  var ss6;\n  var ss7;\n  var sz1;\n  var sz2;\n  var sz3;\n  var sz11;\n  var sz12;\n  var sz13;\n  var sz21;\n  var sz22;\n  var sz23;\n  var sz31;\n  var sz32;\n  var sz33;\n  var s1;\n  var s2;\n  var s3;\n  var s4;\n  var s5;\n  var s6;\n  var s7;\n  var z1;\n  var z2;\n  var z3;\n  var z11;\n  var z12;\n  var z13;\n  var z21;\n  var z22;\n  var z23;\n  var z31;\n  var z32;\n  var z33; // -------------------------- constants -------------------------\n\n  var zes = 0.01675;\n  var zel = 0.05490;\n  var c1ss = 2.9864797e-6;\n  var c1l = 4.7968065e-7;\n  var zsinis = 0.39785416;\n  var zcosis = 0.91744867;\n  var zcosgs = 0.1945905;\n  var zsings = -0.98088458; //  --------------------- local variables ------------------------\n\n  var nm = np;\n  var em = ep;\n  var snodm = Math.sin(nodep);\n  var cnodm = Math.cos(nodep);\n  var sinomm = Math.sin(argpp);\n  var cosomm = Math.cos(argpp);\n  var sinim = Math.sin(inclp);\n  var cosim = Math.cos(inclp);\n  var emsq = em * em;\n  var betasq = 1.0 - emsq;\n  var rtemsq = Math.sqrt(betasq); //  ----------------- initialize lunar solar terms ---------------\n\n  var peo = 0.0;\n  var pinco = 0.0;\n  var plo = 0.0;\n  var pgho = 0.0;\n  var pho = 0.0;\n  var day = epoch + 18261.5 + tc / 1440.0;\n  var xnodce = (4.5236020 - 9.2422029e-4 * day) % twoPi;\n  var stem = Math.sin(xnodce);\n  var ctem = Math.cos(xnodce);\n  var zcosil = 0.91375164 - 0.03568096 * ctem;\n  var zsinil = Math.sqrt(1.0 - zcosil * zcosil);\n  var zsinhl = 0.089683511 * stem / zsinil;\n  var zcoshl = Math.sqrt(1.0 - zsinhl * zsinhl);\n  var gam = 5.8351514 + 0.0019443680 * day;\n  var zx = 0.39785416 * stem / zsinil;\n  var zy = zcoshl * ctem + 0.91744867 * zsinhl * stem;\n  zx = Math.atan2(zx, zy);\n  zx += gam - xnodce;\n  var zcosgl = Math.cos(zx);\n  var zsingl = Math.sin(zx); //  ------------------------- do solar terms ---------------------\n\n  zcosg = zcosgs;\n  zsing = zsings;\n  zcosi = zcosis;\n  zsini = zsinis;\n  zcosh = cnodm;\n  zsinh = snodm;\n  cc = c1ss;\n  var xnoi = 1.0 / nm;\n  var lsflg = 0;\n\n  while (lsflg < 2) {\n    lsflg += 1;\n    a1 = zcosg * zcosh + zsing * zcosi * zsinh;\n    a3 = -zsing * zcosh + zcosg * zcosi * zsinh;\n    a7 = -zcosg * zsinh + zsing * zcosi * zcosh;\n    a8 = zsing * zsini;\n    a9 = zsing * zsinh + zcosg * zcosi * zcosh;\n    a10 = zcosg * zsini;\n    a2 = cosim * a7 + sinim * a8;\n    a4 = cosim * a9 + sinim * a10;\n    a5 = -sinim * a7 + cosim * a8;\n    a6 = -sinim * a9 + cosim * a10;\n    x1 = a1 * cosomm + a2 * sinomm;\n    x2 = a3 * cosomm + a4 * sinomm;\n    x3 = -a1 * sinomm + a2 * cosomm;\n    x4 = -a3 * sinomm + a4 * cosomm;\n    x5 = a5 * sinomm;\n    x6 = a6 * sinomm;\n    x7 = a5 * cosomm;\n    x8 = a6 * cosomm;\n    z31 = 12.0 * x1 * x1 - 3.0 * x3 * x3;\n    z32 = 24.0 * x1 * x2 - 6.0 * x3 * x4;\n    z33 = 12.0 * x2 * x2 - 3.0 * x4 * x4;\n    z1 = 3.0 * (a1 * a1 + a2 * a2) + z31 * emsq;\n    z2 = 6.0 * (a1 * a3 + a2 * a4) + z32 * emsq;\n    z3 = 3.0 * (a3 * a3 + a4 * a4) + z33 * emsq;\n    z11 = -6.0 * a1 * a5 + emsq * (-24.0 * x1 * x7 - 6.0 * x3 * x5);\n    z12 = -6.0 * (a1 * a6 + a3 * a5) + emsq * (-24.0 * (x2 * x7 + x1 * x8) + -6.0 * (x3 * x6 + x4 * x5));\n    z13 = -6.0 * a3 * a6 + emsq * (-24.0 * x2 * x8 - 6.0 * x4 * x6);\n    z21 = 6.0 * a2 * a5 + emsq * (24.0 * x1 * x5 - 6.0 * x3 * x7);\n    z22 = 6.0 * (a4 * a5 + a2 * a6) + emsq * (24.0 * (x2 * x5 + x1 * x6) - 6.0 * (x4 * x7 + x3 * x8));\n    z23 = 6.0 * a4 * a6 + emsq * (24.0 * x2 * x6 - 6.0 * x4 * x8);\n    z1 = z1 + z1 + betasq * z31;\n    z2 = z2 + z2 + betasq * z32;\n    z3 = z3 + z3 + betasq * z33;\n    s3 = cc * xnoi;\n    s2 = -0.5 * s3 / rtemsq;\n    s4 = s3 * rtemsq;\n    s1 = -15.0 * em * s4;\n    s5 = x1 * x3 + x2 * x4;\n    s6 = x2 * x3 + x1 * x4;\n    s7 = x2 * x4 - x1 * x3; //  ----------------------- do lunar terms -------------------\n\n    if (lsflg === 1) {\n      ss1 = s1;\n      ss2 = s2;\n      ss3 = s3;\n      ss4 = s4;\n      ss5 = s5;\n      ss6 = s6;\n      ss7 = s7;\n      sz1 = z1;\n      sz2 = z2;\n      sz3 = z3;\n      sz11 = z11;\n      sz12 = z12;\n      sz13 = z13;\n      sz21 = z21;\n      sz22 = z22;\n      sz23 = z23;\n      sz31 = z31;\n      sz32 = z32;\n      sz33 = z33;\n      zcosg = zcosgl;\n      zsing = zsingl;\n      zcosi = zcosil;\n      zsini = zsinil;\n      zcosh = zcoshl * cnodm + zsinhl * snodm;\n      zsinh = snodm * zcoshl - cnodm * zsinhl;\n      cc = c1l;\n    }\n  }\n\n  var zmol = (4.7199672 + (0.22997150 * day - gam)) % twoPi;\n  var zmos = (6.2565837 + 0.017201977 * day) % twoPi; //  ------------------------ do solar terms ----------------------\n\n  var se2 = 2.0 * ss1 * ss6;\n  var se3 = 2.0 * ss1 * ss7;\n  var si2 = 2.0 * ss2 * sz12;\n  var si3 = 2.0 * ss2 * (sz13 - sz11);\n  var sl2 = -2.0 * ss3 * sz2;\n  var sl3 = -2.0 * ss3 * (sz3 - sz1);\n  var sl4 = -2.0 * ss3 * (-21.0 - 9.0 * emsq) * zes;\n  var sgh2 = 2.0 * ss4 * sz32;\n  var sgh3 = 2.0 * ss4 * (sz33 - sz31);\n  var sgh4 = -18.0 * ss4 * zes;\n  var sh2 = -2.0 * ss2 * sz22;\n  var sh3 = -2.0 * ss2 * (sz23 - sz21); //  ------------------------ do lunar terms ----------------------\n\n  var ee2 = 2.0 * s1 * s6;\n  var e3 = 2.0 * s1 * s7;\n  var xi2 = 2.0 * s2 * z12;\n  var xi3 = 2.0 * s2 * (z13 - z11);\n  var xl2 = -2.0 * s3 * z2;\n  var xl3 = -2.0 * s3 * (z3 - z1);\n  var xl4 = -2.0 * s3 * (-21.0 - 9.0 * emsq) * zel;\n  var xgh2 = 2.0 * s4 * z32;\n  var xgh3 = 2.0 * s4 * (z33 - z31);\n  var xgh4 = -18.0 * s4 * zel;\n  var xh2 = -2.0 * s2 * z22;\n  var xh3 = -2.0 * s2 * (z23 - z21);\n  return {\n    snodm: snodm,\n    cnodm: cnodm,\n    sinim: sinim,\n    cosim: cosim,\n    sinomm: sinomm,\n    cosomm: cosomm,\n    day: day,\n    e3: e3,\n    ee2: ee2,\n    em: em,\n    emsq: emsq,\n    gam: gam,\n    peo: peo,\n    pgho: pgho,\n    pho: pho,\n    pinco: pinco,\n    plo: plo,\n    rtemsq: rtemsq,\n    se2: se2,\n    se3: se3,\n    sgh2: sgh2,\n    sgh3: sgh3,\n    sgh4: sgh4,\n    sh2: sh2,\n    sh3: sh3,\n    si2: si2,\n    si3: si3,\n    sl2: sl2,\n    sl3: sl3,\n    sl4: sl4,\n    s1: s1,\n    s2: s2,\n    s3: s3,\n    s4: s4,\n    s5: s5,\n    s6: s6,\n    s7: s7,\n    ss1: ss1,\n    ss2: ss2,\n    ss3: ss3,\n    ss4: ss4,\n    ss5: ss5,\n    ss6: ss6,\n    ss7: ss7,\n    sz1: sz1,\n    sz2: sz2,\n    sz3: sz3,\n    sz11: sz11,\n    sz12: sz12,\n    sz13: sz13,\n    sz21: sz21,\n    sz22: sz22,\n    sz23: sz23,\n    sz31: sz31,\n    sz32: sz32,\n    sz33: sz33,\n    xgh2: xgh2,\n    xgh3: xgh3,\n    xgh4: xgh4,\n    xh2: xh2,\n    xh3: xh3,\n    xi2: xi2,\n    xi3: xi3,\n    xl2: xl2,\n    xl3: xl3,\n    xl4: xl4,\n    nm: nm,\n    z1: z1,\n    z2: z2,\n    z3: z3,\n    z11: z11,\n    z12: z12,\n    z13: z13,\n    z21: z21,\n    z22: z22,\n    z23: z23,\n    z31: z31,\n    z32: z32,\n    z33: z33,\n    zmol: zmol,\n    zmos: zmos\n  };\n}\n/*-----------------------------------------------------------------------------\n *\n *                           procedure dsinit\n *\n *  this procedure provides deep space contributions to mean motion dot due\n *    to geopotential resonance with half day and one day orbits.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    cosim, sinim-\n *    emsq        - eccentricity squared\n *    argpo       - argument of perigee\n *    s1, s2, s3, s4, s5      -\n *    ss1, ss2, ss3, ss4, ss5 -\n *    sz1, sz3, sz11, sz13, sz21, sz23, sz31, sz33 -\n *    t           - time\n *    tc          -\n *    gsto        - greenwich sidereal time                   rad\n *    mo          - mean anomaly\n *    mdot        - mean anomaly dot (rate)\n *    no          - mean motion\n *    nodeo       - right ascension of ascending node\n *    nodedot     - right ascension of ascending node dot (rate)\n *    xpidot      -\n *    z1, z3, z11, z13, z21, z23, z31, z33 -\n *    eccm        - eccentricity\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    xn          - mean motion\n *    nodem       - right ascension of ascending node\n *\n *  outputs       :\n *    em          - eccentricity\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    nm          - mean motion\n *    nodem       - right ascension of ascending node\n *    irez        - flag for resonance           0-none, 1-one day, 2-half day\n *    atime       -\n *    d2201, d2211, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433    -\n *    dedt        -\n *    didt        -\n *    dmdt        -\n *    dndt        -\n *    dnodt       -\n *    domdt       -\n *    del1, del2, del3        -\n *    ses  , sghl , sghs , sgs  , shl  , shs  , sis  , sls\n *    theta       -\n *    xfact       -\n *    xlamo       -\n *    xli         -\n *    xni\n *\n *  locals        :\n *    ainv2       -\n *    aonv        -\n *    cosisq      -\n *    eoc         -\n *    f220, f221, f311, f321, f322, f330, f441, f442, f522, f523, f542, f543  -\n *    g200, g201, g211, g300, g310, g322, g410, g422, g520, g521, g532, g533  -\n *    sini2       -\n *    temp        -\n *    temp1       -\n *    theta       -\n *    xno2        -\n *\n *  coupling      :\n *    getgravconst\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\n\nfunction dsinit(options) {\n  var cosim = options.cosim,\n      argpo = options.argpo,\n      s1 = options.s1,\n      s2 = options.s2,\n      s3 = options.s3,\n      s4 = options.s4,\n      s5 = options.s5,\n      sinim = options.sinim,\n      ss1 = options.ss1,\n      ss2 = options.ss2,\n      ss3 = options.ss3,\n      ss4 = options.ss4,\n      ss5 = options.ss5,\n      sz1 = options.sz1,\n      sz3 = options.sz3,\n      sz11 = options.sz11,\n      sz13 = options.sz13,\n      sz21 = options.sz21,\n      sz23 = options.sz23,\n      sz31 = options.sz31,\n      sz33 = options.sz33,\n      t = options.t,\n      tc = options.tc,\n      gsto = options.gsto,\n      mo = options.mo,\n      mdot = options.mdot,\n      no = options.no,\n      nodeo = options.nodeo,\n      nodedot = options.nodedot,\n      xpidot = options.xpidot,\n      z1 = options.z1,\n      z3 = options.z3,\n      z11 = options.z11,\n      z13 = options.z13,\n      z21 = options.z21,\n      z23 = options.z23,\n      z31 = options.z31,\n      z33 = options.z33,\n      ecco = options.ecco,\n      eccsq = options.eccsq;\n  var emsq = options.emsq,\n      em = options.em,\n      argpm = options.argpm,\n      inclm = options.inclm,\n      mm = options.mm,\n      nm = options.nm,\n      nodem = options.nodem,\n      irez = options.irez,\n      atime = options.atime,\n      d2201 = options.d2201,\n      d2211 = options.d2211,\n      d3210 = options.d3210,\n      d3222 = options.d3222,\n      d4410 = options.d4410,\n      d4422 = options.d4422,\n      d5220 = options.d5220,\n      d5232 = options.d5232,\n      d5421 = options.d5421,\n      d5433 = options.d5433,\n      dedt = options.dedt,\n      didt = options.didt,\n      dmdt = options.dmdt,\n      dnodt = options.dnodt,\n      domdt = options.domdt,\n      del1 = options.del1,\n      del2 = options.del2,\n      del3 = options.del3,\n      xfact = options.xfact,\n      xlamo = options.xlamo,\n      xli = options.xli,\n      xni = options.xni;\n  var f220;\n  var f221;\n  var f311;\n  var f321;\n  var f322;\n  var f330;\n  var f441;\n  var f442;\n  var f522;\n  var f523;\n  var f542;\n  var f543;\n  var g200;\n  var g201;\n  var g211;\n  var g300;\n  var g310;\n  var g322;\n  var g410;\n  var g422;\n  var g520;\n  var g521;\n  var g532;\n  var g533;\n  var sini2;\n  var temp;\n  var temp1;\n  var xno2;\n  var ainv2;\n  var aonv;\n  var cosisq;\n  var eoc;\n  var q22 = 1.7891679e-6;\n  var q31 = 2.1460748e-6;\n  var q33 = 2.2123015e-7;\n  var root22 = 1.7891679e-6;\n  var root44 = 7.3636953e-9;\n  var root54 = 2.1765803e-9;\n  var rptim = 4.37526908801129966e-3; // equates to 7.29211514668855e-5 rad/sec\n\n  var root32 = 3.7393792e-7;\n  var root52 = 1.1428639e-7;\n  var znl = 1.5835218e-4;\n  var zns = 1.19459e-5; // -------------------- deep space initialization ------------\n\n  irez = 0;\n\n  if (nm < 0.0052359877 && nm > 0.0034906585) {\n    irez = 1;\n  }\n\n  if (nm >= 8.26e-3 && nm <= 9.24e-3 && em >= 0.5) {\n    irez = 2;\n  } // ------------------------ do solar terms -------------------\n\n\n  var ses = ss1 * zns * ss5;\n  var sis = ss2 * zns * (sz11 + sz13);\n  var sls = -zns * ss3 * (sz1 + sz3 - 14.0 - 6.0 * emsq);\n  var sghs = ss4 * zns * (sz31 + sz33 - 6.0);\n  var shs = -zns * ss2 * (sz21 + sz23); // sgp4fix for 180 deg incl\n\n  if (inclm < 5.2359877e-2 || inclm > pi - 5.2359877e-2) {\n    shs = 0.0;\n  }\n\n  if (sinim !== 0.0) {\n    shs /= sinim;\n  }\n\n  var sgs = sghs - cosim * shs; // ------------------------- do lunar terms ------------------\n\n  dedt = ses + s1 * znl * s5;\n  didt = sis + s2 * znl * (z11 + z13);\n  dmdt = sls - znl * s3 * (z1 + z3 - 14.0 - 6.0 * emsq);\n  var sghl = s4 * znl * (z31 + z33 - 6.0);\n  var shll = -znl * s2 * (z21 + z23); // sgp4fix for 180 deg incl\n\n  if (inclm < 5.2359877e-2 || inclm > pi - 5.2359877e-2) {\n    shll = 0.0;\n  }\n\n  domdt = sgs + sghl;\n  dnodt = shs;\n\n  if (sinim !== 0.0) {\n    domdt -= cosim / sinim * shll;\n    dnodt += shll / sinim;\n  } // ----------- calculate deep space resonance effects --------\n\n\n  var dndt = 0.0;\n  var theta = (gsto + tc * rptim) % twoPi;\n  em += dedt * t;\n  inclm += didt * t;\n  argpm += domdt * t;\n  nodem += dnodt * t;\n  mm += dmdt * t; // sgp4fix for negative inclinations\n  // the following if statement should be commented out\n  // if (inclm < 0.0)\n  // {\n  //   inclm  = -inclm;\n  //   argpm  = argpm - pi;\n  //   nodem = nodem + pi;\n  // }\n  // -------------- initialize the resonance terms -------------\n\n  if (irez !== 0) {\n    aonv = Math.pow(nm / xke, x2o3); // ---------- geopotential resonance for 12 hour orbits ------\n\n    if (irez === 2) {\n      cosisq = cosim * cosim;\n      var emo = em;\n      em = ecco;\n      var emsqo = emsq;\n      emsq = eccsq;\n      eoc = em * emsq;\n      g201 = -0.306 - (em - 0.64) * 0.440;\n\n      if (em <= 0.65) {\n        g211 = 3.616 - 13.2470 * em + 16.2900 * emsq;\n        g310 = -19.302 + 117.3900 * em - 228.4190 * emsq + 156.5910 * eoc;\n        g322 = -18.9068 + 109.7927 * em - 214.6334 * emsq + 146.5816 * eoc;\n        g410 = -41.122 + 242.6940 * em - 471.0940 * emsq + 313.9530 * eoc;\n        g422 = -146.407 + 841.8800 * em - 1629.014 * emsq + 1083.4350 * eoc;\n        g520 = -532.114 + 3017.977 * em - 5740.032 * emsq + 3708.2760 * eoc;\n      } else {\n        g211 = -72.099 + 331.819 * em - 508.738 * emsq + 266.724 * eoc;\n        g310 = -346.844 + 1582.851 * em - 2415.925 * emsq + 1246.113 * eoc;\n        g322 = -342.585 + 1554.908 * em - 2366.899 * emsq + 1215.972 * eoc;\n        g410 = -1052.797 + 4758.686 * em - 7193.992 * emsq + 3651.957 * eoc;\n        g422 = -3581.690 + 16178.110 * em - 24462.770 * emsq + 12422.520 * eoc;\n\n        if (em > 0.715) {\n          g520 = -5149.66 + 29936.92 * em - 54087.36 * emsq + 31324.56 * eoc;\n        } else {\n          g520 = 1464.74 - 4664.75 * em + 3763.64 * emsq;\n        }\n      }\n\n      if (em < 0.7) {\n        g533 = -919.22770 + 4988.6100 * em - 9064.7700 * emsq + 5542.21 * eoc;\n        g521 = -822.71072 + 4568.6173 * em - 8491.4146 * emsq + 5337.524 * eoc;\n        g532 = -853.66600 + 4690.2500 * em - 8624.7700 * emsq + 5341.4 * eoc;\n      } else {\n        g533 = -37995.780 + 161616.52 * em - 229838.20 * emsq + 109377.94 * eoc;\n        g521 = -51752.104 + 218913.95 * em - 309468.16 * emsq + 146349.42 * eoc;\n        g532 = -40023.880 + 170470.89 * em - 242699.48 * emsq + 115605.82 * eoc;\n      }\n\n      sini2 = sinim * sinim;\n      f220 = 0.75 * (1.0 + 2.0 * cosim + cosisq);\n      f221 = 1.5 * sini2;\n      f321 = 1.875 * sinim * (1.0 - 2.0 * cosim - 3.0 * cosisq);\n      f322 = -1.875 * sinim * (1.0 + 2.0 * cosim - 3.0 * cosisq);\n      f441 = 35.0 * sini2 * f220;\n      f442 = 39.3750 * sini2 * sini2;\n      f522 = 9.84375 * sinim * (sini2 * (1.0 - 2.0 * cosim - 5.0 * cosisq) + 0.33333333 * (-2.0 + 4.0 * cosim + 6.0 * cosisq));\n      f523 = sinim * (4.92187512 * sini2 * (-2.0 - 4.0 * cosim + 10.0 * cosisq) + 6.56250012 * (1.0 + 2.0 * cosim - 3.0 * cosisq));\n      f542 = 29.53125 * sinim * (2.0 - 8.0 * cosim + cosisq * (-12.0 + 8.0 * cosim + 10.0 * cosisq));\n      f543 = 29.53125 * sinim * (-2.0 - 8.0 * cosim + cosisq * (12.0 + 8.0 * cosim - 10.0 * cosisq));\n      xno2 = nm * nm;\n      ainv2 = aonv * aonv;\n      temp1 = 3.0 * xno2 * ainv2;\n      temp = temp1 * root22;\n      d2201 = temp * f220 * g201;\n      d2211 = temp * f221 * g211;\n      temp1 *= aonv;\n      temp = temp1 * root32;\n      d3210 = temp * f321 * g310;\n      d3222 = temp * f322 * g322;\n      temp1 *= aonv;\n      temp = 2.0 * temp1 * root44;\n      d4410 = temp * f441 * g410;\n      d4422 = temp * f442 * g422;\n      temp1 *= aonv;\n      temp = temp1 * root52;\n      d5220 = temp * f522 * g520;\n      d5232 = temp * f523 * g532;\n      temp = 2.0 * temp1 * root54;\n      d5421 = temp * f542 * g521;\n      d5433 = temp * f543 * g533;\n      xlamo = (mo + nodeo + nodeo - (theta + theta)) % twoPi;\n      xfact = mdot + dmdt + 2.0 * (nodedot + dnodt - rptim) - no;\n      em = emo;\n      emsq = emsqo;\n    } //  ---------------- synchronous resonance terms --------------\n\n\n    if (irez === 1) {\n      g200 = 1.0 + emsq * (-2.5 + 0.8125 * emsq);\n      g310 = 1.0 + 2.0 * emsq;\n      g300 = 1.0 + emsq * (-6.0 + 6.60937 * emsq);\n      f220 = 0.75 * (1.0 + cosim) * (1.0 + cosim);\n      f311 = 0.9375 * sinim * sinim * (1.0 + 3.0 * cosim) - 0.75 * (1.0 + cosim);\n      f330 = 1.0 + cosim;\n      f330 *= 1.875 * f330 * f330;\n      del1 = 3.0 * nm * nm * aonv * aonv;\n      del2 = 2.0 * del1 * f220 * g200 * q22;\n      del3 = 3.0 * del1 * f330 * g300 * q33 * aonv;\n      del1 = del1 * f311 * g310 * q31 * aonv;\n      xlamo = (mo + nodeo + argpo - theta) % twoPi;\n      xfact = mdot + xpidot + dmdt + domdt + dnodt - (no + rptim);\n    } //  ------------ for sgp4, initialize the integrator ----------\n\n\n    xli = xlamo;\n    xni = no;\n    atime = 0.0;\n    nm = no + dndt;\n  }\n\n  return {\n    em: em,\n    argpm: argpm,\n    inclm: inclm,\n    mm: mm,\n    nm: nm,\n    nodem: nodem,\n    irez: irez,\n    atime: atime,\n    d2201: d2201,\n    d2211: d2211,\n    d3210: d3210,\n    d3222: d3222,\n    d4410: d4410,\n    d4422: d4422,\n    d5220: d5220,\n    d5232: d5232,\n    d5421: d5421,\n    d5433: d5433,\n    dedt: dedt,\n    didt: didt,\n    dmdt: dmdt,\n    dndt: dndt,\n    dnodt: dnodt,\n    domdt: domdt,\n    del1: del1,\n    del2: del2,\n    del3: del3,\n    xfact: xfact,\n    xlamo: xlamo,\n    xli: xli,\n    xni: xni\n  };\n}\n/* -----------------------------------------------------------------------------\n *\n *                           function gstime\n *\n *  this function finds the greenwich sidereal time.\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs          description                    range / units\n *    jdut1       - julian date in ut1             days from 4713 bc\n *\n *  outputs       :\n *    gstime      - greenwich sidereal time        0 to 2pi rad\n *\n *  locals        :\n *    temp        - temporary variable for doubles   rad\n *    tut1        - julian centuries from the\n *                  jan 1, 2000 12 h epoch (ut1)\n *\n *  coupling      :\n *    none\n *\n *  references    :\n *    vallado       2004, 191, eq 3-45\n * --------------------------------------------------------------------------- */\n\n\nfunction gstimeInternal(jdut1) {\n  var tut1 = (jdut1 - 2451545.0) / 36525.0;\n  var temp = -6.2e-6 * tut1 * tut1 * tut1 + 0.093104 * tut1 * tut1 + (876600.0 * 3600 + 8640184.812866) * tut1 + 67310.54841; // # sec\n\n  temp = temp * deg2rad / 240.0 % twoPi; // 360/86400 = 1/240, to deg, to rad\n  //  ------------------------ check quadrants ---------------------\n\n  if (temp < 0.0) {\n    temp += twoPi;\n  }\n\n  return temp;\n}\n\nfunction gstime() {\n  if ((arguments.length <= 0 ? undefined : arguments[0]) instanceof Date || arguments.length > 1) {\n    return gstimeInternal(jday.apply(void 0, arguments));\n  }\n\n  return gstimeInternal.apply(void 0, arguments);\n}\n/*-----------------------------------------------------------------------------\n *\n *                           procedure initl\n *\n *  this procedure initializes the sgp4 propagator. all the initialization is\n *    consolidated here instead of having multiple loops inside other routines.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    ecco        - eccentricity                           0.0 - 1.0\n *    epoch       - epoch time in days from jan 0, 1950. 0 hr\n *    inclo       - inclination of satellite\n *    no          - mean motion of satellite\n *    satn        - satellite number\n *\n *  outputs       :\n *    ainv        - 1.0 / a\n *    ao          - semi major axis\n *    con41       -\n *    con42       - 1.0 - 5.0 cos(i)\n *    cosio       - cosine of inclination\n *    cosio2      - cosio squared\n *    eccsq       - eccentricity squared\n *    method      - flag for deep space                    'd', 'n'\n *    omeosq      - 1.0 - ecco * ecco\n *    posq        - semi-parameter squared\n *    rp          - radius of perigee\n *    rteosq      - square root of (1.0 - ecco*ecco)\n *    sinio       - sine of inclination\n *    gsto        - gst at time of observation               rad\n *    no          - mean motion of satellite\n *\n *  locals        :\n *    ak          -\n *    d1          -\n *    del         -\n *    adel        -\n *    po          -\n *\n *  coupling      :\n *    getgravconst\n *    gstime      - find greenwich sidereal time from the julian date\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\n\nfunction initl(options) {\n  var ecco = options.ecco,\n      epoch = options.epoch,\n      inclo = options.inclo,\n      opsmode = options.opsmode;\n  var no = options.no; // sgp4fix use old way of finding gst\n  // ----------------------- earth constants ---------------------\n  // sgp4fix identify constants and allow alternate values\n  // ------------- calculate auxillary epoch quantities ----------\n\n  var eccsq = ecco * ecco;\n  var omeosq = 1.0 - eccsq;\n  var rteosq = Math.sqrt(omeosq);\n  var cosio = Math.cos(inclo);\n  var cosio2 = cosio * cosio; // ------------------ un-kozai the mean motion -----------------\n\n  var ak = Math.pow(xke / no, x2o3);\n  var d1 = 0.75 * j2 * (3.0 * cosio2 - 1.0) / (rteosq * omeosq);\n  var delPrime = d1 / (ak * ak);\n  var adel = ak * (1.0 - delPrime * delPrime - delPrime * (1.0 / 3.0 + 134.0 * delPrime * delPrime / 81.0));\n  delPrime = d1 / (adel * adel);\n  no /= 1.0 + delPrime;\n  var ao = Math.pow(xke / no, x2o3);\n  var sinio = Math.sin(inclo);\n  var po = ao * omeosq;\n  var con42 = 1.0 - 5.0 * cosio2;\n  var con41 = -con42 - cosio2 - cosio2;\n  var ainv = 1.0 / ao;\n  var posq = po * po;\n  var rp = ao * (1.0 - ecco);\n  var method = 'n'; //  sgp4fix modern approach to finding sidereal time\n\n  var gsto;\n\n  if (opsmode === 'a') {\n    //  sgp4fix use old way of finding gst\n    //  count integer number of days from 0 jan 1970\n    var ts70 = epoch - 7305.0;\n    var ds70 = Math.floor(ts70 + 1.0e-8);\n    var tfrac = ts70 - ds70; //  find greenwich location at epoch\n\n    var c1 = 1.72027916940703639e-2;\n    var thgr70 = 1.7321343856509374;\n    var fk5r = 5.07551419432269442e-15;\n    var c1p2p = c1 + twoPi;\n    gsto = (thgr70 + c1 * ds70 + c1p2p * tfrac + ts70 * ts70 * fk5r) % twoPi;\n\n    if (gsto < 0.0) {\n      gsto += twoPi;\n    }\n  } else {\n    gsto = gstime(epoch + 2433281.5);\n  }\n\n  return {\n    no: no,\n    method: method,\n    ainv: ainv,\n    ao: ao,\n    con41: con41,\n    con42: con42,\n    cosio: cosio,\n    cosio2: cosio2,\n    eccsq: eccsq,\n    omeosq: omeosq,\n    posq: posq,\n    rp: rp,\n    rteosq: rteosq,\n    sinio: sinio,\n    gsto: gsto\n  };\n}\n/*-----------------------------------------------------------------------------\n *\n *                           procedure dspace\n *\n *  this procedure provides deep space contributions to mean elements for\n *    perturbing third body.  these effects have been averaged over one\n *    revolution of the sun and moon.  for earth resonance effects, the\n *    effects have been averaged over no revolutions of the satellite.\n *    (mean motion)\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    d2201, d2211, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433 -\n *    dedt        -\n *    del1, del2, del3  -\n *    didt        -\n *    dmdt        -\n *    dnodt       -\n *    domdt       -\n *    irez        - flag for resonance           0-none, 1-one day, 2-half day\n *    argpo       - argument of perigee\n *    argpdot     - argument of perigee dot (rate)\n *    t           - time\n *    tc          -\n *    gsto        - gst\n *    xfact       -\n *    xlamo       -\n *    no          - mean motion\n *    atime       -\n *    em          - eccentricity\n *    ft          -\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    xli         -\n *    mm          - mean anomaly\n *    xni         - mean motion\n *    nodem       - right ascension of ascending node\n *\n *  outputs       :\n *    atime       -\n *    em          - eccentricity\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    xli         -\n *    mm          - mean anomaly\n *    xni         -\n *    nodem       - right ascension of ascending node\n *    dndt        -\n *    nm          - mean motion\n *\n *  locals        :\n *    delt        -\n *    ft          -\n *    theta       -\n *    x2li        -\n *    x2omi       -\n *    xl          -\n *    xldot       -\n *    xnddt       -\n *    xndt        -\n *    xomi        -\n *\n *  coupling      :\n *    none        -\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\n\nfunction dspace(options) {\n  var irez = options.irez,\n      d2201 = options.d2201,\n      d2211 = options.d2211,\n      d3210 = options.d3210,\n      d3222 = options.d3222,\n      d4410 = options.d4410,\n      d4422 = options.d4422,\n      d5220 = options.d5220,\n      d5232 = options.d5232,\n      d5421 = options.d5421,\n      d5433 = options.d5433,\n      dedt = options.dedt,\n      del1 = options.del1,\n      del2 = options.del2,\n      del3 = options.del3,\n      didt = options.didt,\n      dmdt = options.dmdt,\n      dnodt = options.dnodt,\n      domdt = options.domdt,\n      argpo = options.argpo,\n      argpdot = options.argpdot,\n      t = options.t,\n      tc = options.tc,\n      gsto = options.gsto,\n      xfact = options.xfact,\n      xlamo = options.xlamo,\n      no = options.no;\n  var atime = options.atime,\n      em = options.em,\n      argpm = options.argpm,\n      inclm = options.inclm,\n      xli = options.xli,\n      mm = options.mm,\n      xni = options.xni,\n      nodem = options.nodem,\n      nm = options.nm;\n  var fasx2 = 0.13130908;\n  var fasx4 = 2.8843198;\n  var fasx6 = 0.37448087;\n  var g22 = 5.7686396;\n  var g32 = 0.95240898;\n  var g44 = 1.8014998;\n  var g52 = 1.0508330;\n  var g54 = 4.4108898;\n  var rptim = 4.37526908801129966e-3; // equates to 7.29211514668855e-5 rad/sec\n\n  var stepp = 720.0;\n  var stepn = -720.0;\n  var step2 = 259200.0;\n  var delt;\n  var x2li;\n  var x2omi;\n  var xl;\n  var xldot;\n  var xnddt;\n  var xndt;\n  var xomi;\n  var dndt = 0.0;\n  var ft = 0.0; //  ----------- calculate deep space resonance effects -----------\n\n  var theta = (gsto + tc * rptim) % twoPi;\n  em += dedt * t;\n  inclm += didt * t;\n  argpm += domdt * t;\n  nodem += dnodt * t;\n  mm += dmdt * t; // sgp4fix for negative inclinations\n  // the following if statement should be commented out\n  // if (inclm < 0.0)\n  // {\n  //   inclm = -inclm;\n  //   argpm = argpm - pi;\n  //   nodem = nodem + pi;\n  // }\n\n  /* - update resonances : numerical (euler-maclaurin) integration - */\n\n  /* ------------------------- epoch restart ----------------------  */\n  //   sgp4fix for propagator problems\n  //   the following integration works for negative time steps and periods\n  //   the specific changes are unknown because the original code was so convoluted\n  // sgp4fix take out atime = 0.0 and fix for faster operation\n\n  if (irez !== 0) {\n    //  sgp4fix streamline check\n    if (atime === 0.0 || t * atime <= 0.0 || Math.abs(t) < Math.abs(atime)) {\n      atime = 0.0;\n      xni = no;\n      xli = xlamo;\n    } // sgp4fix move check outside loop\n\n\n    if (t > 0.0) {\n      delt = stepp;\n    } else {\n      delt = stepn;\n    }\n\n    var iretn = 381; // added for do loop\n\n    while (iretn === 381) {\n      //  ------------------- dot terms calculated -------------\n      //  ----------- near - synchronous resonance terms -------\n      if (irez !== 2) {\n        xndt = del1 * Math.sin(xli - fasx2) + del2 * Math.sin(2.0 * (xli - fasx4)) + del3 * Math.sin(3.0 * (xli - fasx6));\n        xldot = xni + xfact;\n        xnddt = del1 * Math.cos(xli - fasx2) + 2.0 * del2 * Math.cos(2.0 * (xli - fasx4)) + 3.0 * del3 * Math.cos(3.0 * (xli - fasx6));\n        xnddt *= xldot;\n      } else {\n        // --------- near - half-day resonance terms --------\n        xomi = argpo + argpdot * atime;\n        x2omi = xomi + xomi;\n        x2li = xli + xli;\n        xndt = d2201 * Math.sin(x2omi + xli - g22) + d2211 * Math.sin(xli - g22) + d3210 * Math.sin(xomi + xli - g32) + d3222 * Math.sin(-xomi + xli - g32) + d4410 * Math.sin(x2omi + x2li - g44) + d4422 * Math.sin(x2li - g44) + d5220 * Math.sin(xomi + xli - g52) + d5232 * Math.sin(-xomi + xli - g52) + d5421 * Math.sin(xomi + x2li - g54) + d5433 * Math.sin(-xomi + x2li - g54);\n        xldot = xni + xfact;\n        xnddt = d2201 * Math.cos(x2omi + xli - g22) + d2211 * Math.cos(xli - g22) + d3210 * Math.cos(xomi + xli - g32) + d3222 * Math.cos(-xomi + xli - g32) + d5220 * Math.cos(xomi + xli - g52) + d5232 * Math.cos(-xomi + xli - g52) + 2.0 * d4410 * Math.cos(x2omi + x2li - g44) + d4422 * Math.cos(x2li - g44) + d5421 * Math.cos(xomi + x2li - g54) + d5433 * Math.cos(-xomi + x2li - g54);\n        xnddt *= xldot;\n      } //  ----------------------- integrator -------------------\n      //  sgp4fix move end checks to end of routine\n\n\n      if (Math.abs(t - atime) >= stepp) {\n        iretn = 381;\n      } else {\n        ft = t - atime;\n        iretn = 0;\n      }\n\n      if (iretn === 381) {\n        xli += xldot * delt + xndt * step2;\n        xni += xndt * delt + xnddt * step2;\n        atime += delt;\n      }\n    }\n\n    nm = xni + xndt * ft + xnddt * ft * ft * 0.5;\n    xl = xli + xldot * ft + xndt * ft * ft * 0.5;\n\n    if (irez !== 1) {\n      mm = xl - 2.0 * nodem + 2.0 * theta;\n      dndt = nm - no;\n    } else {\n      mm = xl - nodem - argpm + theta;\n      dndt = nm - no;\n    }\n\n    nm = no + dndt;\n  }\n\n  return {\n    atime: atime,\n    em: em,\n    argpm: argpm,\n    inclm: inclm,\n    xli: xli,\n    mm: mm,\n    xni: xni,\n    nodem: nodem,\n    dndt: dndt,\n    nm: nm\n  };\n}\n/*----------------------------------------------------------------------------\n *\n *                             procedure sgp4\n *\n *  this procedure is the sgp4 prediction model from space command. this is an\n *    updated and combined version of sgp4 and sdp4, which were originally\n *    published separately in spacetrack report //3. this version follows the\n *    methodology from the aiaa paper (2006) describing the history and\n *    development of the code.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    satrec  - initialised structure from sgp4init() call.\n *    tsince  - time since epoch (minutes)\n *\n *  outputs       :\n *    r           - position vector                     km\n *    v           - velocity                            km/sec\n *  return code - non-zero on error.\n *                   1 - mean elements, ecc >= 1.0 or ecc < -0.001 or a < 0.95 er\n *                   2 - mean motion less than 0.0\n *                   3 - pert elements, ecc < 0.0  or  ecc > 1.0\n *                   4 - semi-latus rectum < 0.0\n *                   5 - epoch elements are sub-orbital\n *                   6 - satellite has decayed\n *\n *  locals        :\n *    am          -\n *    axnl, aynl        -\n *    betal       -\n *    cosim   , sinim   , cosomm  , sinomm  , cnod    , snod    , cos2u   ,\n *    sin2u   , coseo1  , sineo1  , cosi    , sini    , cosip   , sinip   ,\n *    cosisq  , cossu   , sinsu   , cosu    , sinu\n *    delm        -\n *    delomg      -\n *    dndt        -\n *    eccm        -\n *    emsq        -\n *    ecose       -\n *    el2         -\n *    eo1         -\n *    eccp        -\n *    esine       -\n *    argpm       -\n *    argpp       -\n *    omgadf      -\n *    pl          -\n *    r           -\n *    rtemsq      -\n *    rdotl       -\n *    rl          -\n *    rvdot       -\n *    rvdotl      -\n *    su          -\n *    t2  , t3   , t4    , tc\n *    tem5, temp , temp1 , temp2  , tempa  , tempe  , templ\n *    u   , ux   , uy    , uz     , vx     , vy     , vz\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    nm          - mean motion\n *    nodem       - right asc of ascending node\n *    xinc        -\n *    xincp       -\n *    xl          -\n *    xlm         -\n *    mp          -\n *    xmdf        -\n *    xmx         -\n *    xmy         -\n *    nodedf      -\n *    xnode       -\n *    nodep       -\n *    np          -\n *\n *  coupling      :\n *    getgravconst-\n *    dpper\n *    dspace\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report //3 1980\n *    hoots, norad spacetrack report //6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\n\nfunction sgp4(satrec, tsince) {\n  /* eslint-disable no-param-reassign */\n  var coseo1;\n  var sineo1;\n  var cosip;\n  var sinip;\n  var cosisq;\n  var delm;\n  var delomg;\n  var eo1;\n  var argpm;\n  var argpp;\n  var su;\n  var t3;\n  var t4;\n  var tc;\n  var tem5;\n  var temp;\n  var tempa;\n  var tempe;\n  var templ;\n  var inclm;\n  var mm;\n  var nm;\n  var nodem;\n  var xincp;\n  var xlm;\n  var mp;\n  var nodep;\n  /* ------------------ set mathematical constants --------------- */\n  // sgp4fix divisor for divide by zero check on inclination\n  // the old check used 1.0 + cos(pi-1.0e-9), but then compared it to\n  // 1.5 e-12, so the threshold was changed to 1.5e-12 for consistency\n\n  var temp4 = 1.5e-12; // --------------------- clear sgp4 error flag -----------------\n\n  satrec.t = tsince;\n  satrec.error = 0; //  ------- update for secular gravity and atmospheric drag -----\n\n  var xmdf = satrec.mo + satrec.mdot * satrec.t;\n  var argpdf = satrec.argpo + satrec.argpdot * satrec.t;\n  var nodedf = satrec.nodeo + satrec.nodedot * satrec.t;\n  argpm = argpdf;\n  mm = xmdf;\n  var t2 = satrec.t * satrec.t;\n  nodem = nodedf + satrec.nodecf * t2;\n  tempa = 1.0 - satrec.cc1 * satrec.t;\n  tempe = satrec.bstar * satrec.cc4 * satrec.t;\n  templ = satrec.t2cof * t2;\n\n  if (satrec.isimp !== 1) {\n    delomg = satrec.omgcof * satrec.t; //  sgp4fix use mutliply for speed instead of pow\n\n    var delmtemp = 1.0 + satrec.eta * Math.cos(xmdf);\n    delm = satrec.xmcof * (delmtemp * delmtemp * delmtemp - satrec.delmo);\n    temp = delomg + delm;\n    mm = xmdf + temp;\n    argpm = argpdf - temp;\n    t3 = t2 * satrec.t;\n    t4 = t3 * satrec.t;\n    tempa = tempa - satrec.d2 * t2 - satrec.d3 * t3 - satrec.d4 * t4;\n    tempe += satrec.bstar * satrec.cc5 * (Math.sin(mm) - satrec.sinmao);\n    templ = templ + satrec.t3cof * t3 + t4 * (satrec.t4cof + satrec.t * satrec.t5cof);\n  }\n\n  nm = satrec.no;\n  var em = satrec.ecco;\n  inclm = satrec.inclo;\n\n  if (satrec.method === 'd') {\n    tc = satrec.t;\n    var dspaceOptions = {\n      irez: satrec.irez,\n      d2201: satrec.d2201,\n      d2211: satrec.d2211,\n      d3210: satrec.d3210,\n      d3222: satrec.d3222,\n      d4410: satrec.d4410,\n      d4422: satrec.d4422,\n      d5220: satrec.d5220,\n      d5232: satrec.d5232,\n      d5421: satrec.d5421,\n      d5433: satrec.d5433,\n      dedt: satrec.dedt,\n      del1: satrec.del1,\n      del2: satrec.del2,\n      del3: satrec.del3,\n      didt: satrec.didt,\n      dmdt: satrec.dmdt,\n      dnodt: satrec.dnodt,\n      domdt: satrec.domdt,\n      argpo: satrec.argpo,\n      argpdot: satrec.argpdot,\n      t: satrec.t,\n      tc: tc,\n      gsto: satrec.gsto,\n      xfact: satrec.xfact,\n      xlamo: satrec.xlamo,\n      no: satrec.no,\n      atime: satrec.atime,\n      em: em,\n      argpm: argpm,\n      inclm: inclm,\n      xli: satrec.xli,\n      mm: mm,\n      xni: satrec.xni,\n      nodem: nodem,\n      nm: nm\n    };\n    var dspaceResult = dspace(dspaceOptions);\n    em = dspaceResult.em;\n    argpm = dspaceResult.argpm;\n    inclm = dspaceResult.inclm;\n    mm = dspaceResult.mm;\n    nodem = dspaceResult.nodem;\n    nm = dspaceResult.nm;\n  }\n\n  if (nm <= 0.0) {\n    // printf(\"// error nm %f\\n\", nm);\n    satrec.error = 2; // sgp4fix add return\n\n    return [false, false];\n  }\n\n  var am = Math.pow(xke / nm, x2o3) * tempa * tempa;\n  nm = xke / Math.pow(am, 1.5);\n  em -= tempe; // fix tolerance for error recognition\n  // sgp4fix am is fixed from the previous nm check\n\n  if (em >= 1.0 || em < -0.001) {\n    // || (am < 0.95)\n    // printf(\"// error em %f\\n\", em);\n    satrec.error = 1; // sgp4fix to return if there is an error in eccentricity\n\n    return [false, false];\n  } //  sgp4fix fix tolerance to avoid a divide by zero\n\n\n  if (em < 1.0e-6) {\n    em = 1.0e-6;\n  }\n\n  mm += satrec.no * templ;\n  xlm = mm + argpm + nodem;\n  nodem %= twoPi;\n  argpm %= twoPi;\n  xlm %= twoPi;\n  mm = (xlm - argpm - nodem) % twoPi; // ----------------- compute extra mean quantities -------------\n\n  var sinim = Math.sin(inclm);\n  var cosim = Math.cos(inclm); // -------------------- add lunar-solar periodics --------------\n\n  var ep = em;\n  xincp = inclm;\n  argpp = argpm;\n  nodep = nodem;\n  mp = mm;\n  sinip = sinim;\n  cosip = cosim;\n\n  if (satrec.method === 'd') {\n    var dpperParameters = {\n      inclo: satrec.inclo,\n      init: 'n',\n      ep: ep,\n      inclp: xincp,\n      nodep: nodep,\n      argpp: argpp,\n      mp: mp,\n      opsmode: satrec.operationmode\n    };\n    var dpperResult = dpper(satrec, dpperParameters);\n    ep = dpperResult.ep;\n    nodep = dpperResult.nodep;\n    argpp = dpperResult.argpp;\n    mp = dpperResult.mp;\n    xincp = dpperResult.inclp;\n\n    if (xincp < 0.0) {\n      xincp = -xincp;\n      nodep += pi;\n      argpp -= pi;\n    }\n\n    if (ep < 0.0 || ep > 1.0) {\n      //  printf(\"// error ep %f\\n\", ep);\n      satrec.error = 3; //  sgp4fix add return\n\n      return [false, false];\n    }\n  } //  -------------------- long period periodics ------------------\n\n\n  if (satrec.method === 'd') {\n    sinip = Math.sin(xincp);\n    cosip = Math.cos(xincp);\n    satrec.aycof = -0.5 * j3oj2 * sinip; //  sgp4fix for divide by zero for xincp = 180 deg\n\n    if (Math.abs(cosip + 1.0) > 1.5e-12) {\n      satrec.xlcof = -0.25 * j3oj2 * sinip * (3.0 + 5.0 * cosip) / (1.0 + cosip);\n    } else {\n      satrec.xlcof = -0.25 * j3oj2 * sinip * (3.0 + 5.0 * cosip) / temp4;\n    }\n  }\n\n  var axnl = ep * Math.cos(argpp);\n  temp = 1.0 / (am * (1.0 - ep * ep));\n  var aynl = ep * Math.sin(argpp) + temp * satrec.aycof;\n  var xl = mp + argpp + nodep + temp * satrec.xlcof * axnl; // --------------------- solve kepler's equation ---------------\n\n  var u = (xl - nodep) % twoPi;\n  eo1 = u;\n  tem5 = 9999.9;\n  var ktr = 1; //    sgp4fix for kepler iteration\n  //    the following iteration needs better limits on corrections\n\n  while (Math.abs(tem5) >= 1.0e-12 && ktr <= 10) {\n    sineo1 = Math.sin(eo1);\n    coseo1 = Math.cos(eo1);\n    tem5 = 1.0 - coseo1 * axnl - sineo1 * aynl;\n    tem5 = (u - aynl * coseo1 + axnl * sineo1 - eo1) / tem5;\n\n    if (Math.abs(tem5) >= 0.95) {\n      if (tem5 > 0.0) {\n        tem5 = 0.95;\n      } else {\n        tem5 = -0.95;\n      }\n    }\n\n    eo1 += tem5;\n    ktr += 1;\n  } //  ------------- short period preliminary quantities -----------\n\n\n  var ecose = axnl * coseo1 + aynl * sineo1;\n  var esine = axnl * sineo1 - aynl * coseo1;\n  var el2 = axnl * axnl + aynl * aynl;\n  var pl = am * (1.0 - el2);\n\n  if (pl < 0.0) {\n    //  printf(\"// error pl %f\\n\", pl);\n    satrec.error = 4; //  sgp4fix add return\n\n    return [false, false];\n  }\n\n  var rl = am * (1.0 - ecose);\n  var rdotl = Math.sqrt(am) * esine / rl;\n  var rvdotl = Math.sqrt(pl) / rl;\n  var betal = Math.sqrt(1.0 - el2);\n  temp = esine / (1.0 + betal);\n  var sinu = am / rl * (sineo1 - aynl - axnl * temp);\n  var cosu = am / rl * (coseo1 - axnl + aynl * temp);\n  su = Math.atan2(sinu, cosu);\n  var sin2u = (cosu + cosu) * sinu;\n  var cos2u = 1.0 - 2.0 * sinu * sinu;\n  temp = 1.0 / pl;\n  var temp1 = 0.5 * j2 * temp;\n  var temp2 = temp1 * temp; // -------------- update for short period periodics ------------\n\n  if (satrec.method === 'd') {\n    cosisq = cosip * cosip;\n    satrec.con41 = 3.0 * cosisq - 1.0;\n    satrec.x1mth2 = 1.0 - cosisq;\n    satrec.x7thm1 = 7.0 * cosisq - 1.0;\n  }\n\n  var mrt = rl * (1.0 - 1.5 * temp2 * betal * satrec.con41) + 0.5 * temp1 * satrec.x1mth2 * cos2u; // sgp4fix for decaying satellites\n\n  if (mrt < 1.0) {\n    // printf(\"// decay condition %11.6f \\n\",mrt);\n    satrec.error = 6;\n    return {\n      position: false,\n      velocity: false\n    };\n  }\n\n  su -= 0.25 * temp2 * satrec.x7thm1 * sin2u;\n  var xnode = nodep + 1.5 * temp2 * cosip * sin2u;\n  var xinc = xincp + 1.5 * temp2 * cosip * sinip * cos2u;\n  var mvt = rdotl - nm * temp1 * satrec.x1mth2 * sin2u / xke;\n  var rvdot = rvdotl + nm * temp1 * (satrec.x1mth2 * cos2u + 1.5 * satrec.con41) / xke; // --------------------- orientation vectors -------------------\n\n  var sinsu = Math.sin(su);\n  var cossu = Math.cos(su);\n  var snod = Math.sin(xnode);\n  var cnod = Math.cos(xnode);\n  var sini = Math.sin(xinc);\n  var cosi = Math.cos(xinc);\n  var xmx = -snod * cosi;\n  var xmy = cnod * cosi;\n  var ux = xmx * sinsu + cnod * cossu;\n  var uy = xmy * sinsu + snod * cossu;\n  var uz = sini * sinsu;\n  var vx = xmx * cossu - cnod * sinsu;\n  var vy = xmy * cossu - snod * sinsu;\n  var vz = sini * cossu; // --------- position and velocity (in km and km/sec) ----------\n\n  var r = {\n    x: mrt * ux * earthRadius,\n    y: mrt * uy * earthRadius,\n    z: mrt * uz * earthRadius\n  };\n  var v = {\n    x: (mvt * ux + rvdot * vx) * vkmpersec,\n    y: (mvt * uy + rvdot * vy) * vkmpersec,\n    z: (mvt * uz + rvdot * vz) * vkmpersec\n  };\n  return {\n    position: r,\n    velocity: v\n  };\n  /* eslint-enable no-param-reassign */\n}\n/*-----------------------------------------------------------------------------\n *\n *                             procedure sgp4init\n *\n *  this procedure initializes variables for sgp4.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    opsmode     - mode of operation afspc or improved 'a', 'i'\n *    satn        - satellite number\n *    bstar       - sgp4 type drag coefficient              kg/m2er\n *    ecco        - eccentricity\n *    epoch       - epoch time in days from jan 0, 1950. 0 hr\n *    argpo       - argument of perigee (output if ds)\n *    inclo       - inclination\n *    mo          - mean anomaly (output if ds)\n *    no          - mean motion\n *    nodeo       - right ascension of ascending node\n *\n *  outputs       :\n *    rec      - common values for subsequent calls\n *    return code - non-zero on error.\n *                   1 - mean elements, ecc >= 1.0 or ecc < -0.001 or a < 0.95 er\n *                   2 - mean motion less than 0.0\n *                   3 - pert elements, ecc < 0.0  or  ecc > 1.0\n *                   4 - semi-latus rectum < 0.0\n *                   5 - epoch elements are sub-orbital\n *                   6 - satellite has decayed\n *\n *  locals        :\n *    cnodm  , snodm  , cosim  , sinim  , cosomm , sinomm\n *    cc1sq  , cc2    , cc3\n *    coef   , coef1\n *    cosio4      -\n *    day         -\n *    dndt        -\n *    em          - eccentricity\n *    emsq        - eccentricity squared\n *    eeta        -\n *    etasq       -\n *    gam         -\n *    argpm       - argument of perigee\n *    nodem       -\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    nm          - mean motion\n *    perige      - perigee\n *    pinvsq      -\n *    psisq       -\n *    qzms24      -\n *    rtemsq      -\n *    s1, s2, s3, s4, s5, s6, s7          -\n *    sfour       -\n *    ss1, ss2, ss3, ss4, ss5, ss6, ss7         -\n *    sz1, sz2, sz3\n *    sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33        -\n *    tc          -\n *    temp        -\n *    temp1, temp2, temp3       -\n *    tsi         -\n *    xpidot      -\n *    xhdot1      -\n *    z1, z2, z3          -\n *    z11, z12, z13, z21, z22, z23, z31, z32, z33         -\n *\n *  coupling      :\n *    getgravconst-\n *    initl       -\n *    dscom       -\n *    dpper       -\n *    dsinit      -\n *    sgp4        -\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\n\nfunction sgp4init(satrec, options) {\n  /* eslint-disable no-param-reassign */\n  var opsmode = options.opsmode,\n      satn = options.satn,\n      epoch = options.epoch,\n      xbstar = options.xbstar,\n      xecco = options.xecco,\n      xargpo = options.xargpo,\n      xinclo = options.xinclo,\n      xmo = options.xmo,\n      xno = options.xno,\n      xnodeo = options.xnodeo;\n  var cosim;\n  var sinim;\n  var cc1sq;\n  var cc2;\n  var cc3;\n  var coef;\n  var coef1;\n  var cosio4;\n  var em;\n  var emsq;\n  var eeta;\n  var etasq;\n  var argpm;\n  var nodem;\n  var inclm;\n  var mm;\n  var nm;\n  var perige;\n  var pinvsq;\n  var psisq;\n  var qzms24;\n  var s1;\n  var s2;\n  var s3;\n  var s4;\n  var s5;\n  var sfour;\n  var ss1;\n  var ss2;\n  var ss3;\n  var ss4;\n  var ss5;\n  var sz1;\n  var sz3;\n  var sz11;\n  var sz13;\n  var sz21;\n  var sz23;\n  var sz31;\n  var sz33;\n  var tc;\n  var temp;\n  var temp1;\n  var temp2;\n  var temp3;\n  var tsi;\n  var xpidot;\n  var xhdot1;\n  var z1;\n  var z3;\n  var z11;\n  var z13;\n  var z21;\n  var z23;\n  var z31;\n  var z33;\n  /* ------------------------ initialization --------------------- */\n  // sgp4fix divisor for divide by zero check on inclination\n  // the old check used 1.0 + Math.cos(pi-1.0e-9), but then compared it to\n  // 1.5 e-12, so the threshold was changed to 1.5e-12 for consistency\n\n  var temp4 = 1.5e-12; // ----------- set all near earth variables to zero ------------\n\n  satrec.isimp = 0;\n  satrec.method = 'n';\n  satrec.aycof = 0.0;\n  satrec.con41 = 0.0;\n  satrec.cc1 = 0.0;\n  satrec.cc4 = 0.0;\n  satrec.cc5 = 0.0;\n  satrec.d2 = 0.0;\n  satrec.d3 = 0.0;\n  satrec.d4 = 0.0;\n  satrec.delmo = 0.0;\n  satrec.eta = 0.0;\n  satrec.argpdot = 0.0;\n  satrec.omgcof = 0.0;\n  satrec.sinmao = 0.0;\n  satrec.t = 0.0;\n  satrec.t2cof = 0.0;\n  satrec.t3cof = 0.0;\n  satrec.t4cof = 0.0;\n  satrec.t5cof = 0.0;\n  satrec.x1mth2 = 0.0;\n  satrec.x7thm1 = 0.0;\n  satrec.mdot = 0.0;\n  satrec.nodedot = 0.0;\n  satrec.xlcof = 0.0;\n  satrec.xmcof = 0.0;\n  satrec.nodecf = 0.0; // ----------- set all deep space variables to zero ------------\n\n  satrec.irez = 0;\n  satrec.d2201 = 0.0;\n  satrec.d2211 = 0.0;\n  satrec.d3210 = 0.0;\n  satrec.d3222 = 0.0;\n  satrec.d4410 = 0.0;\n  satrec.d4422 = 0.0;\n  satrec.d5220 = 0.0;\n  satrec.d5232 = 0.0;\n  satrec.d5421 = 0.0;\n  satrec.d5433 = 0.0;\n  satrec.dedt = 0.0;\n  satrec.del1 = 0.0;\n  satrec.del2 = 0.0;\n  satrec.del3 = 0.0;\n  satrec.didt = 0.0;\n  satrec.dmdt = 0.0;\n  satrec.dnodt = 0.0;\n  satrec.domdt = 0.0;\n  satrec.e3 = 0.0;\n  satrec.ee2 = 0.0;\n  satrec.peo = 0.0;\n  satrec.pgho = 0.0;\n  satrec.pho = 0.0;\n  satrec.pinco = 0.0;\n  satrec.plo = 0.0;\n  satrec.se2 = 0.0;\n  satrec.se3 = 0.0;\n  satrec.sgh2 = 0.0;\n  satrec.sgh3 = 0.0;\n  satrec.sgh4 = 0.0;\n  satrec.sh2 = 0.0;\n  satrec.sh3 = 0.0;\n  satrec.si2 = 0.0;\n  satrec.si3 = 0.0;\n  satrec.sl2 = 0.0;\n  satrec.sl3 = 0.0;\n  satrec.sl4 = 0.0;\n  satrec.gsto = 0.0;\n  satrec.xfact = 0.0;\n  satrec.xgh2 = 0.0;\n  satrec.xgh3 = 0.0;\n  satrec.xgh4 = 0.0;\n  satrec.xh2 = 0.0;\n  satrec.xh3 = 0.0;\n  satrec.xi2 = 0.0;\n  satrec.xi3 = 0.0;\n  satrec.xl2 = 0.0;\n  satrec.xl3 = 0.0;\n  satrec.xl4 = 0.0;\n  satrec.xlamo = 0.0;\n  satrec.zmol = 0.0;\n  satrec.zmos = 0.0;\n  satrec.atime = 0.0;\n  satrec.xli = 0.0;\n  satrec.xni = 0.0; // sgp4fix - note the following variables are also passed directly via satrec.\n  // it is possible to streamline the sgp4init call by deleting the \"x\"\n  // variables, but the user would need to set the satrec.* values first. we\n  // include the additional assignments in case twoline2rv is not used.\n\n  satrec.bstar = xbstar;\n  satrec.ecco = xecco;\n  satrec.argpo = xargpo;\n  satrec.inclo = xinclo;\n  satrec.mo = xmo;\n  satrec.no = xno;\n  satrec.nodeo = xnodeo; //  sgp4fix add opsmode\n\n  satrec.operationmode = opsmode; // ------------------------ earth constants -----------------------\n  // sgp4fix identify constants and allow alternate values\n\n  var ss = 78.0 / earthRadius + 1.0; // sgp4fix use multiply for speed instead of pow\n\n  var qzms2ttemp = (120.0 - 78.0) / earthRadius;\n  var qzms2t = qzms2ttemp * qzms2ttemp * qzms2ttemp * qzms2ttemp;\n  satrec.init = 'y';\n  satrec.t = 0.0;\n  var initlOptions = {\n    satn: satn,\n    ecco: satrec.ecco,\n    epoch: epoch,\n    inclo: satrec.inclo,\n    no: satrec.no,\n    method: satrec.method,\n    opsmode: satrec.operationmode\n  };\n  var initlResult = initl(initlOptions);\n  var ao = initlResult.ao,\n      con42 = initlResult.con42,\n      cosio = initlResult.cosio,\n      cosio2 = initlResult.cosio2,\n      eccsq = initlResult.eccsq,\n      omeosq = initlResult.omeosq,\n      posq = initlResult.posq,\n      rp = initlResult.rp,\n      rteosq = initlResult.rteosq,\n      sinio = initlResult.sinio;\n  satrec.no = initlResult.no;\n  satrec.con41 = initlResult.con41;\n  satrec.gsto = initlResult.gsto;\n  satrec.error = 0; // sgp4fix remove this check as it is unnecessary\n  // the mrt check in sgp4 handles decaying satellite cases even if the starting\n  // condition is below the surface of te earth\n  // if (rp < 1.0)\n  // {\n  //   printf(\"// *** satn%d epoch elts sub-orbital ***\\n\", satn);\n  //   satrec.error = 5;\n  // }\n\n  if (omeosq >= 0.0 || satrec.no >= 0.0) {\n    satrec.isimp = 0;\n\n    if (rp < 220.0 / earthRadius + 1.0) {\n      satrec.isimp = 1;\n    }\n\n    sfour = ss;\n    qzms24 = qzms2t;\n    perige = (rp - 1.0) * earthRadius; // - for perigees below 156 km, s and qoms2t are altered -\n\n    if (perige < 156.0) {\n      sfour = perige - 78.0;\n\n      if (perige < 98.0) {\n        sfour = 20.0;\n      } // sgp4fix use multiply for speed instead of pow\n\n\n      var qzms24temp = (120.0 - sfour) / earthRadius;\n      qzms24 = qzms24temp * qzms24temp * qzms24temp * qzms24temp;\n      sfour = sfour / earthRadius + 1.0;\n    }\n\n    pinvsq = 1.0 / posq;\n    tsi = 1.0 / (ao - sfour);\n    satrec.eta = ao * satrec.ecco * tsi;\n    etasq = satrec.eta * satrec.eta;\n    eeta = satrec.ecco * satrec.eta;\n    psisq = Math.abs(1.0 - etasq);\n    coef = qzms24 * Math.pow(tsi, 4.0);\n    coef1 = coef / Math.pow(psisq, 3.5);\n    cc2 = coef1 * satrec.no * (ao * (1.0 + 1.5 * etasq + eeta * (4.0 + etasq)) + 0.375 * j2 * tsi / psisq * satrec.con41 * (8.0 + 3.0 * etasq * (8.0 + etasq)));\n    satrec.cc1 = satrec.bstar * cc2;\n    cc3 = 0.0;\n\n    if (satrec.ecco > 1.0e-4) {\n      cc3 = -2.0 * coef * tsi * j3oj2 * satrec.no * sinio / satrec.ecco;\n    }\n\n    satrec.x1mth2 = 1.0 - cosio2;\n    satrec.cc4 = 2.0 * satrec.no * coef1 * ao * omeosq * (satrec.eta * (2.0 + 0.5 * etasq) + satrec.ecco * (0.5 + 2.0 * etasq) - j2 * tsi / (ao * psisq) * (-3.0 * satrec.con41 * (1.0 - 2.0 * eeta + etasq * (1.5 - 0.5 * eeta)) + 0.75 * satrec.x1mth2 * (2.0 * etasq - eeta * (1.0 + etasq)) * Math.cos(2.0 * satrec.argpo)));\n    satrec.cc5 = 2.0 * coef1 * ao * omeosq * (1.0 + 2.75 * (etasq + eeta) + eeta * etasq);\n    cosio4 = cosio2 * cosio2;\n    temp1 = 1.5 * j2 * pinvsq * satrec.no;\n    temp2 = 0.5 * temp1 * j2 * pinvsq;\n    temp3 = -0.46875 * j4 * pinvsq * pinvsq * satrec.no;\n    satrec.mdot = satrec.no + 0.5 * temp1 * rteosq * satrec.con41 + 0.0625 * temp2 * rteosq * (13.0 - 78.0 * cosio2 + 137.0 * cosio4);\n    satrec.argpdot = -0.5 * temp1 * con42 + 0.0625 * temp2 * (7.0 - 114.0 * cosio2 + 395.0 * cosio4) + temp3 * (3.0 - 36.0 * cosio2 + 49.0 * cosio4);\n    xhdot1 = -temp1 * cosio;\n    satrec.nodedot = xhdot1 + (0.5 * temp2 * (4.0 - 19.0 * cosio2) + 2.0 * temp3 * (3.0 - 7.0 * cosio2)) * cosio;\n    xpidot = satrec.argpdot + satrec.nodedot;\n    satrec.omgcof = satrec.bstar * cc3 * Math.cos(satrec.argpo);\n    satrec.xmcof = 0.0;\n\n    if (satrec.ecco > 1.0e-4) {\n      satrec.xmcof = -x2o3 * coef * satrec.bstar / eeta;\n    }\n\n    satrec.nodecf = 3.5 * omeosq * xhdot1 * satrec.cc1;\n    satrec.t2cof = 1.5 * satrec.cc1; // sgp4fix for divide by zero with xinco = 180 deg\n\n    if (Math.abs(cosio + 1.0) > 1.5e-12) {\n      satrec.xlcof = -0.25 * j3oj2 * sinio * (3.0 + 5.0 * cosio) / (1.0 + cosio);\n    } else {\n      satrec.xlcof = -0.25 * j3oj2 * sinio * (3.0 + 5.0 * cosio) / temp4;\n    }\n\n    satrec.aycof = -0.5 * j3oj2 * sinio; // sgp4fix use multiply for speed instead of pow\n\n    var delmotemp = 1.0 + satrec.eta * Math.cos(satrec.mo);\n    satrec.delmo = delmotemp * delmotemp * delmotemp;\n    satrec.sinmao = Math.sin(satrec.mo);\n    satrec.x7thm1 = 7.0 * cosio2 - 1.0; // --------------- deep space initialization -------------\n\n    if (2 * pi / satrec.no >= 225.0) {\n      satrec.method = 'd';\n      satrec.isimp = 1;\n      tc = 0.0;\n      inclm = satrec.inclo;\n      var dscomOptions = {\n        epoch: epoch,\n        ep: satrec.ecco,\n        argpp: satrec.argpo,\n        tc: tc,\n        inclp: satrec.inclo,\n        nodep: satrec.nodeo,\n        np: satrec.no,\n        e3: satrec.e3,\n        ee2: satrec.ee2,\n        peo: satrec.peo,\n        pgho: satrec.pgho,\n        pho: satrec.pho,\n        pinco: satrec.pinco,\n        plo: satrec.plo,\n        se2: satrec.se2,\n        se3: satrec.se3,\n        sgh2: satrec.sgh2,\n        sgh3: satrec.sgh3,\n        sgh4: satrec.sgh4,\n        sh2: satrec.sh2,\n        sh3: satrec.sh3,\n        si2: satrec.si2,\n        si3: satrec.si3,\n        sl2: satrec.sl2,\n        sl3: satrec.sl3,\n        sl4: satrec.sl4,\n        xgh2: satrec.xgh2,\n        xgh3: satrec.xgh3,\n        xgh4: satrec.xgh4,\n        xh2: satrec.xh2,\n        xh3: satrec.xh3,\n        xi2: satrec.xi2,\n        xi3: satrec.xi3,\n        xl2: satrec.xl2,\n        xl3: satrec.xl3,\n        xl4: satrec.xl4,\n        zmol: satrec.zmol,\n        zmos: satrec.zmos\n      };\n      var dscomResult = dscom(dscomOptions);\n      satrec.e3 = dscomResult.e3;\n      satrec.ee2 = dscomResult.ee2;\n      satrec.peo = dscomResult.peo;\n      satrec.pgho = dscomResult.pgho;\n      satrec.pho = dscomResult.pho;\n      satrec.pinco = dscomResult.pinco;\n      satrec.plo = dscomResult.plo;\n      satrec.se2 = dscomResult.se2;\n      satrec.se3 = dscomResult.se3;\n      satrec.sgh2 = dscomResult.sgh2;\n      satrec.sgh3 = dscomResult.sgh3;\n      satrec.sgh4 = dscomResult.sgh4;\n      satrec.sh2 = dscomResult.sh2;\n      satrec.sh3 = dscomResult.sh3;\n      satrec.si2 = dscomResult.si2;\n      satrec.si3 = dscomResult.si3;\n      satrec.sl2 = dscomResult.sl2;\n      satrec.sl3 = dscomResult.sl3;\n      satrec.sl4 = dscomResult.sl4;\n      sinim = dscomResult.sinim;\n      cosim = dscomResult.cosim;\n      em = dscomResult.em;\n      emsq = dscomResult.emsq;\n      s1 = dscomResult.s1;\n      s2 = dscomResult.s2;\n      s3 = dscomResult.s3;\n      s4 = dscomResult.s4;\n      s5 = dscomResult.s5;\n      ss1 = dscomResult.ss1;\n      ss2 = dscomResult.ss2;\n      ss3 = dscomResult.ss3;\n      ss4 = dscomResult.ss4;\n      ss5 = dscomResult.ss5;\n      sz1 = dscomResult.sz1;\n      sz3 = dscomResult.sz3;\n      sz11 = dscomResult.sz11;\n      sz13 = dscomResult.sz13;\n      sz21 = dscomResult.sz21;\n      sz23 = dscomResult.sz23;\n      sz31 = dscomResult.sz31;\n      sz33 = dscomResult.sz33;\n      satrec.xgh2 = dscomResult.xgh2;\n      satrec.xgh3 = dscomResult.xgh3;\n      satrec.xgh4 = dscomResult.xgh4;\n      satrec.xh2 = dscomResult.xh2;\n      satrec.xh3 = dscomResult.xh3;\n      satrec.xi2 = dscomResult.xi2;\n      satrec.xi3 = dscomResult.xi3;\n      satrec.xl2 = dscomResult.xl2;\n      satrec.xl3 = dscomResult.xl3;\n      satrec.xl4 = dscomResult.xl4;\n      satrec.zmol = dscomResult.zmol;\n      satrec.zmos = dscomResult.zmos;\n      nm = dscomResult.nm;\n      z1 = dscomResult.z1;\n      z3 = dscomResult.z3;\n      z11 = dscomResult.z11;\n      z13 = dscomResult.z13;\n      z21 = dscomResult.z21;\n      z23 = dscomResult.z23;\n      z31 = dscomResult.z31;\n      z33 = dscomResult.z33;\n      var dpperOptions = {\n        inclo: inclm,\n        init: satrec.init,\n        ep: satrec.ecco,\n        inclp: satrec.inclo,\n        nodep: satrec.nodeo,\n        argpp: satrec.argpo,\n        mp: satrec.mo,\n        opsmode: satrec.operationmode\n      };\n      var dpperResult = dpper(satrec, dpperOptions);\n      satrec.ecco = dpperResult.ep;\n      satrec.inclo = dpperResult.inclp;\n      satrec.nodeo = dpperResult.nodep;\n      satrec.argpo = dpperResult.argpp;\n      satrec.mo = dpperResult.mp;\n      argpm = 0.0;\n      nodem = 0.0;\n      mm = 0.0;\n      var dsinitOptions = {\n        cosim: cosim,\n        emsq: emsq,\n        argpo: satrec.argpo,\n        s1: s1,\n        s2: s2,\n        s3: s3,\n        s4: s4,\n        s5: s5,\n        sinim: sinim,\n        ss1: ss1,\n        ss2: ss2,\n        ss3: ss3,\n        ss4: ss4,\n        ss5: ss5,\n        sz1: sz1,\n        sz3: sz3,\n        sz11: sz11,\n        sz13: sz13,\n        sz21: sz21,\n        sz23: sz23,\n        sz31: sz31,\n        sz33: sz33,\n        t: satrec.t,\n        tc: tc,\n        gsto: satrec.gsto,\n        mo: satrec.mo,\n        mdot: satrec.mdot,\n        no: satrec.no,\n        nodeo: satrec.nodeo,\n        nodedot: satrec.nodedot,\n        xpidot: xpidot,\n        z1: z1,\n        z3: z3,\n        z11: z11,\n        z13: z13,\n        z21: z21,\n        z23: z23,\n        z31: z31,\n        z33: z33,\n        ecco: satrec.ecco,\n        eccsq: eccsq,\n        em: em,\n        argpm: argpm,\n        inclm: inclm,\n        mm: mm,\n        nm: nm,\n        nodem: nodem,\n        irez: satrec.irez,\n        atime: satrec.atime,\n        d2201: satrec.d2201,\n        d2211: satrec.d2211,\n        d3210: satrec.d3210,\n        d3222: satrec.d3222,\n        d4410: satrec.d4410,\n        d4422: satrec.d4422,\n        d5220: satrec.d5220,\n        d5232: satrec.d5232,\n        d5421: satrec.d5421,\n        d5433: satrec.d5433,\n        dedt: satrec.dedt,\n        didt: satrec.didt,\n        dmdt: satrec.dmdt,\n        dnodt: satrec.dnodt,\n        domdt: satrec.domdt,\n        del1: satrec.del1,\n        del2: satrec.del2,\n        del3: satrec.del3,\n        xfact: satrec.xfact,\n        xlamo: satrec.xlamo,\n        xli: satrec.xli,\n        xni: satrec.xni\n      };\n      var dsinitResult = dsinit(dsinitOptions);\n      satrec.irez = dsinitResult.irez;\n      satrec.atime = dsinitResult.atime;\n      satrec.d2201 = dsinitResult.d2201;\n      satrec.d2211 = dsinitResult.d2211;\n      satrec.d3210 = dsinitResult.d3210;\n      satrec.d3222 = dsinitResult.d3222;\n      satrec.d4410 = dsinitResult.d4410;\n      satrec.d4422 = dsinitResult.d4422;\n      satrec.d5220 = dsinitResult.d5220;\n      satrec.d5232 = dsinitResult.d5232;\n      satrec.d5421 = dsinitResult.d5421;\n      satrec.d5433 = dsinitResult.d5433;\n      satrec.dedt = dsinitResult.dedt;\n      satrec.didt = dsinitResult.didt;\n      satrec.dmdt = dsinitResult.dmdt;\n      satrec.dnodt = dsinitResult.dnodt;\n      satrec.domdt = dsinitResult.domdt;\n      satrec.del1 = dsinitResult.del1;\n      satrec.del2 = dsinitResult.del2;\n      satrec.del3 = dsinitResult.del3;\n      satrec.xfact = dsinitResult.xfact;\n      satrec.xlamo = dsinitResult.xlamo;\n      satrec.xli = dsinitResult.xli;\n      satrec.xni = dsinitResult.xni;\n    } // ----------- set variables if not deep space -----------\n\n\n    if (satrec.isimp !== 1) {\n      cc1sq = satrec.cc1 * satrec.cc1;\n      satrec.d2 = 4.0 * ao * tsi * cc1sq;\n      temp = satrec.d2 * tsi * satrec.cc1 / 3.0;\n      satrec.d3 = (17.0 * ao + sfour) * temp;\n      satrec.d4 = 0.5 * temp * ao * tsi * (221.0 * ao + 31.0 * sfour) * satrec.cc1;\n      satrec.t3cof = satrec.d2 + 2.0 * cc1sq;\n      satrec.t4cof = 0.25 * (3.0 * satrec.d3 + satrec.cc1 * (12.0 * satrec.d2 + 10.0 * cc1sq));\n      satrec.t5cof = 0.2 * (3.0 * satrec.d4 + 12.0 * satrec.cc1 * satrec.d3 + 6.0 * satrec.d2 * satrec.d2 + 15.0 * cc1sq * (2.0 * satrec.d2 + cc1sq));\n    }\n    /* finally propogate to zero epoch to initialize all others. */\n    // sgp4fix take out check to let satellites process until they are actually below earth surface\n    // if(satrec.error == 0)\n\n  }\n\n  sgp4(satrec, 0, 0);\n  satrec.init = 'n';\n  /* eslint-enable no-param-reassign */\n}\n/* -----------------------------------------------------------------------------\n *\n *                           function twoline2rv\n *\n *  this function converts the two line element set character string data to\n *    variables and initializes the sgp4 variables. several intermediate varaibles\n *    and quantities are determined. note that the result is a structure so multiple\n *    satellites can be processed simultaneously without having to reinitialize. the\n *    verification mode is an important option that permits quick checks of any\n *    changes to the underlying technical theory. this option works using a\n *    modified tle file in which the start, stop, and delta time values are\n *    included at the end of the second line of data. this only works with the\n *    verification mode. the catalog mode simply propagates from -1440 to 1440 min\n *    from epoch and is useful when performing entire catalog runs.\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs        :\n *    longstr1    - first line of the tle\n *    longstr2    - second line of the tle\n *    typerun     - type of run                    verification 'v', catalog 'c',\n *                                                 manual 'm'\n *    typeinput   - type of manual input           mfe 'm', epoch 'e', dayofyr 'd'\n *    opsmode     - mode of operation afspc or improved 'a', 'i'\n *    whichconst  - which set of constants to use  72, 84\n *\n *  outputs       :\n *    satrec      - structure containing all the sgp4 satellite information\n *\n *  coupling      :\n *    getgravconst-\n *    days2mdhms  - conversion of days to month, day, hour, minute, second\n *    jday        - convert day month year hour minute second into julian date\n *    sgp4init    - initialize the sgp4 variables\n *\n *  references    :\n *    norad spacetrack report #3\n *    vallado, crawford, hujsak, kelso  2006\n --------------------------------------------------------------------------- */\n\n/**\n * Return a Satellite imported from two lines of TLE data.\n *\n * Provide the two TLE lines as strings `longstr1` and `longstr2`,\n * and select which standard set of gravitational constants you want\n * by providing `gravity_constants`:\n *\n * `sgp4.propagation.wgs72` - Standard WGS 72 model\n * `sgp4.propagation.wgs84` - More recent WGS 84 model\n * `sgp4.propagation.wgs72old` - Legacy support for old SGP4 behavior\n *\n * Normally, computations are made using letious recent improvements\n * to the algorithm.  If you want to turn some of these off and go\n * back into \"afspc\" mode, then set `afspc_mode` to `True`.\n */\n\n\nfunction twoline2satrec(longstr1, longstr2) {\n  var opsmode = 'i';\n  var xpdotp = 1440.0 / (2.0 * pi); // 229.1831180523293;\n\n  var year = 0;\n  var satrec = {};\n  satrec.error = 0;\n  satrec.satnum = longstr1.substring(2, 7);\n  satrec.epochyr = parseInt(longstr1.substring(18, 20), 10);\n  satrec.epochdays = parseFloat(longstr1.substring(20, 32));\n  satrec.ndot = parseFloat(longstr1.substring(33, 43));\n  satrec.nddot = parseFloat(\".\".concat(parseInt(longstr1.substring(44, 50), 10), \"E\").concat(longstr1.substring(50, 52)));\n  satrec.bstar = parseFloat(\"\".concat(longstr1.substring(53, 54), \".\").concat(parseInt(longstr1.substring(54, 59), 10), \"E\").concat(longstr1.substring(59, 61))); // satrec.satnum = longstr2.substring(2, 7);\n\n  satrec.inclo = parseFloat(longstr2.substring(8, 16));\n  satrec.nodeo = parseFloat(longstr2.substring(17, 25));\n  satrec.ecco = parseFloat(\".\".concat(longstr2.substring(26, 33)));\n  satrec.argpo = parseFloat(longstr2.substring(34, 42));\n  satrec.mo = parseFloat(longstr2.substring(43, 51));\n  satrec.no = parseFloat(longstr2.substring(52, 63)); // ---- find no, ndot, nddot ----\n\n  satrec.no /= xpdotp; //   rad/min\n  // satrec.nddot= satrec.nddot * Math.pow(10.0, nexp);\n  // satrec.bstar= satrec.bstar * Math.pow(10.0, ibexp);\n  // ---- convert to sgp4 units ----\n\n  satrec.a = Math.pow(satrec.no * tumin, -2.0 / 3.0);\n  satrec.ndot /= xpdotp * 1440.0; // ? * minperday\n\n  satrec.nddot /= xpdotp * 1440.0 * 1440; // ---- find standard orbital elements ----\n\n  satrec.inclo *= deg2rad;\n  satrec.nodeo *= deg2rad;\n  satrec.argpo *= deg2rad;\n  satrec.mo *= deg2rad;\n  satrec.alta = satrec.a * (1.0 + satrec.ecco) - 1.0;\n  satrec.altp = satrec.a * (1.0 - satrec.ecco) - 1.0; // ----------------------------------------------------------------\n  // find sgp4epoch time of element set\n  // remember that sgp4 uses units of days from 0 jan 1950 (sgp4epoch)\n  // and minutes from the epoch (time)\n  // ----------------------------------------------------------------\n  // ---------------- temp fix for years from 1957-2056 -------------------\n  // --------- correct fix will occur when year is 4-digit in tle ---------\n\n  if (satrec.epochyr < 57) {\n    year = satrec.epochyr + 2000;\n  } else {\n    year = satrec.epochyr + 1900;\n  }\n\n  var mdhmsResult = days2mdhms(year, satrec.epochdays);\n  var mon = mdhmsResult.mon,\n      day = mdhmsResult.day,\n      hr = mdhmsResult.hr,\n      minute = mdhmsResult.minute,\n      sec = mdhmsResult.sec;\n  satrec.jdsatepoch = jday(year, mon, day, hr, minute, sec); //  ---------------- initialize the orbit at sgp4epoch -------------------\n\n  sgp4init(satrec, {\n    opsmode: opsmode,\n    satn: satrec.satnum,\n    epoch: satrec.jdsatepoch - 2433281.5,\n    xbstar: satrec.bstar,\n    xecco: satrec.ecco,\n    xargpo: satrec.argpo,\n    xinclo: satrec.inclo,\n    xmo: satrec.mo,\n    xno: satrec.no,\n    xnodeo: satrec.nodeo\n  });\n  return satrec;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction propagate() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  } // Return a position and velocity vector for a given date and time.\n\n\n  var satrec = args[0];\n  var date = Array.prototype.slice.call(args, 1);\n  var j = jday.apply(void 0, _toConsumableArray(date));\n  var m = (j - satrec.jdsatepoch) * minutesPerDay;\n  return sgp4(satrec, m);\n}\n\nfunction dopplerFactor(location, position, velocity) {\n  var currentRange = Math.sqrt(Math.pow(position.x - location.x, 2) + Math.pow(position.y - location.y, 2) + Math.pow(position.z - location.z, 2));\n  var nextPos = {\n    x: position.x + velocity.x,\n    y: position.y + velocity.y,\n    z: position.z + velocity.z\n  };\n  var nextRange = Math.sqrt(Math.pow(nextPos.x - location.x, 2) + Math.pow(nextPos.y - location.y, 2) + Math.pow(nextPos.z - location.z, 2));\n  var rangeRate = nextRange - currentRange;\n\n  function sign(value) {\n    return value >= 0 ? 1 : -1;\n  }\n\n  rangeRate *= sign(rangeRate);\n  var c = 299792.458; // Speed of light in km/s\n\n  return 1 + rangeRate / c;\n}\n\nfunction radiansToDegrees(radians) {\n  return radians * rad2deg;\n}\n\nfunction degreesToRadians(degrees) {\n  return degrees * deg2rad;\n}\n\nfunction degreesLat(radians) {\n  if (radians < -pi / 2 || radians > pi / 2) {\n    throw new RangeError('Latitude radians must be in range [-pi/2; pi/2].');\n  }\n\n  return radiansToDegrees(radians);\n}\n\nfunction degreesLong(radians) {\n  if (radians < -pi || radians > pi) {\n    throw new RangeError('Longitude radians must be in range [-pi; pi].');\n  }\n\n  return radiansToDegrees(radians);\n}\n\nfunction radiansLat(degrees) {\n  if (degrees < -90 || degrees > 90) {\n    throw new RangeError('Latitude degrees must be in range [-90; 90].');\n  }\n\n  return degreesToRadians(degrees);\n}\n\nfunction radiansLong(degrees) {\n  if (degrees < -180 || degrees > 180) {\n    throw new RangeError('Longitude degrees must be in range [-180; 180].');\n  }\n\n  return degreesToRadians(degrees);\n}\n\nfunction geodeticToEcf(geodetic) {\n  var longitude = geodetic.longitude,\n      latitude = geodetic.latitude,\n      height = geodetic.height;\n  var a = 6378.137;\n  var b = 6356.7523142;\n  var f = (a - b) / a;\n  var e2 = 2 * f - f * f;\n  var normal = a / Math.sqrt(1 - e2 * (Math.sin(latitude) * Math.sin(latitude)));\n  var x = (normal + height) * Math.cos(latitude) * Math.cos(longitude);\n  var y = (normal + height) * Math.cos(latitude) * Math.sin(longitude);\n  var z = (normal * (1 - e2) + height) * Math.sin(latitude);\n  return {\n    x: x,\n    y: y,\n    z: z\n  };\n}\n\nfunction eciToGeodetic(eci, gmst) {\n  // http://www.celestrak.com/columns/v02n03/\n  var a = 6378.137;\n  var b = 6356.7523142;\n  var R = Math.sqrt(eci.x * eci.x + eci.y * eci.y);\n  var f = (a - b) / a;\n  var e2 = 2 * f - f * f;\n  var longitude = Math.atan2(eci.y, eci.x) - gmst;\n\n  while (longitude < -pi) {\n    longitude += twoPi;\n  }\n\n  while (longitude > pi) {\n    longitude -= twoPi;\n  }\n\n  var kmax = 20;\n  var k = 0;\n  var latitude = Math.atan2(eci.z, Math.sqrt(eci.x * eci.x + eci.y * eci.y));\n  var C;\n\n  while (k < kmax) {\n    C = 1 / Math.sqrt(1 - e2 * (Math.sin(latitude) * Math.sin(latitude)));\n    latitude = Math.atan2(eci.z + a * C * e2 * Math.sin(latitude), R);\n    k += 1;\n  }\n\n  var height = R / Math.cos(latitude) - a * C;\n  return {\n    longitude: longitude,\n    latitude: latitude,\n    height: height\n  };\n}\n\nfunction ecfToEci(ecf, gmst) {\n  // ccar.colorado.edu/ASEN5070/handouts/coordsys.doc\n  //\n  // [X]     [C -S  0][X]\n  // [Y]  =  [S  C  0][Y]\n  // [Z]eci  [0  0  1][Z]ecf\n  //\n  var X = ecf.x * Math.cos(gmst) - ecf.y * Math.sin(gmst);\n  var Y = ecf.x * Math.sin(gmst) + ecf.y * Math.cos(gmst);\n  var Z = ecf.z;\n  return {\n    x: X,\n    y: Y,\n    z: Z\n  };\n}\n\nfunction eciToEcf(eci, gmst) {\n  // ccar.colorado.edu/ASEN5070/handouts/coordsys.doc\n  //\n  // [X]     [C -S  0][X]\n  // [Y]  =  [S  C  0][Y]\n  // [Z]eci  [0  0  1][Z]ecf\n  //\n  //\n  // Inverse:\n  // [X]     [C  S  0][X]\n  // [Y]  =  [-S C  0][Y]\n  // [Z]ecf  [0  0  1][Z]eci\n  var x = eci.x * Math.cos(gmst) + eci.y * Math.sin(gmst);\n  var y = eci.x * -Math.sin(gmst) + eci.y * Math.cos(gmst);\n  var z = eci.z;\n  return {\n    x: x,\n    y: y,\n    z: z\n  };\n}\n\nfunction topocentric(observerGeodetic, satelliteEcf) {\n  // http://www.celestrak.com/columns/v02n02/\n  // TS Kelso's method, except I'm using ECF frame\n  // and he uses ECI.\n  var longitude = observerGeodetic.longitude,\n      latitude = observerGeodetic.latitude;\n  var observerEcf = geodeticToEcf(observerGeodetic);\n  var rx = satelliteEcf.x - observerEcf.x;\n  var ry = satelliteEcf.y - observerEcf.y;\n  var rz = satelliteEcf.z - observerEcf.z;\n  var topS = Math.sin(latitude) * Math.cos(longitude) * rx + Math.sin(latitude) * Math.sin(longitude) * ry - Math.cos(latitude) * rz;\n  var topE = -Math.sin(longitude) * rx + Math.cos(longitude) * ry;\n  var topZ = Math.cos(latitude) * Math.cos(longitude) * rx + Math.cos(latitude) * Math.sin(longitude) * ry + Math.sin(latitude) * rz;\n  return {\n    topS: topS,\n    topE: topE,\n    topZ: topZ\n  };\n}\n/**\n * @param {Object} tc\n * @param {Number} tc.topS Positive horizontal vector S due south.\n * @param {Number} tc.topE Positive horizontal vector E due east.\n * @param {Number} tc.topZ Vector Z normal to the surface of the earth (up).\n * @returns {Object}\n */\n\n\nfunction topocentricToLookAngles(tc) {\n  var topS = tc.topS,\n      topE = tc.topE,\n      topZ = tc.topZ;\n  var rangeSat = Math.sqrt(topS * topS + topE * topE + topZ * topZ);\n  var El = Math.asin(topZ / rangeSat);\n  var Az = Math.atan2(-topE, topS) + pi;\n  return {\n    azimuth: Az,\n    elevation: El,\n    rangeSat: rangeSat // Range in km\n\n  };\n}\n\nfunction ecfToLookAngles(observerGeodetic, satelliteEcf) {\n  var topocentricCoords = topocentric(observerGeodetic, satelliteEcf);\n  return topocentricToLookAngles(topocentricCoords);\n}\n\nexport { constants, propagate, sgp4, twoline2satrec, gstime, jday, invjday, dopplerFactor, radiansToDegrees, degreesToRadians, degreesLat, degreesLong, radiansLat, radiansLong, geodeticToEcf, eciToGeodetic, eciToEcf, ecfToEci, ecfToLookAngles };","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/node_modules/satellite.js/dist/satellite.es.js"],"names":["pi","Math","PI","twoPi","deg2rad","rad2deg","minutesPerDay","mu","earthRadius","xke","sqrt","vkmpersec","tumin","j2","j3","j4","j3oj2","x2o3","constants","Object","freeze","days2mdhms","year","days","lmonth","dayofyr","floor","i","inttemp","mon","day","temp","hr","minute","sec","jdayInternal","msec","arguments","length","undefined","jday","Date","date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","invjday","jd","asArray","tu","leapyrs","mdhms","UTC","dpper","satrec","options","e3","ee2","peo","pgho","pho","pinco","plo","se2","se3","sgh2","sgh3","sgh4","sh2","sh3","si2","si3","sl2","sl3","sl4","t","xgh2","xgh3","xgh4","xh2","xh3","xi2","xi3","xl2","xl3","xl4","zmol","zmos","init","opsmode","ep","inclp","nodep","argpp","mp","alfdp","betdp","cosip","sinip","cosop","sinop","dalf","dbet","dls","f2","f3","pe","pgh","ph","pinc","pl","sinzf","xls","xnoh","zf","zm","zns","zes","znl","zel","sin","cos","ses","sis","sls","sghs","shs","sel","sil","sll","sghl","shll","atan2","abs","dscom","epoch","tc","np","a1","a2","a3","a4","a5","a6","a7","a8","a9","a10","cc","x1","x2","x3","x4","x5","x6","x7","x8","zcosg","zsing","zcosh","zsinh","zcosi","zsini","ss1","ss2","ss3","ss4","ss5","ss6","ss7","sz1","sz2","sz3","sz11","sz12","sz13","sz21","sz22","sz23","sz31","sz32","sz33","s1","s2","s3","s4","s5","s6","s7","z1","z2","z3","z11","z12","z13","z21","z22","z23","z31","z32","z33","c1ss","c1l","zsinis","zcosis","zcosgs","zsings","nm","em","snodm","cnodm","sinomm","cosomm","sinim","cosim","emsq","betasq","rtemsq","xnodce","stem","ctem","zcosil","zsinil","zsinhl","zcoshl","gam","zx","zy","zcosgl","zsingl","xnoi","lsflg","dsinit","argpo","gsto","mo","mdot","no","nodeo","nodedot","xpidot","ecco","eccsq","argpm","inclm","mm","nodem","irez","atime","d2201","d2211","d3210","d3222","d4410","d4422","d5220","d5232","d5421","d5433","dedt","didt","dmdt","dnodt","domdt","del1","del2","del3","xfact","xlamo","xli","xni","f220","f221","f311","f321","f322","f330","f441","f442","f522","f523","f542","f543","g200","g201","g211","g300","g310","g322","g410","g422","g520","g521","g532","g533","sini2","temp1","xno2","ainv2","aonv","cosisq","eoc","q22","q31","q33","root22","root44","root54","rptim","root32","root52","sgs","dndt","theta","pow","emo","emsqo","gstimeInternal","jdut1","tut1","gstime","apply","initl","inclo","omeosq","rteosq","cosio","cosio2","ak","d1","delPrime","adel","ao","sinio","po","con42","con41","ainv","posq","rp","method","ts70","ds70","tfrac","c1","thgr70","fk5r","c1p2p","dspace","argpdot","fasx2","fasx4","fasx6","g22","g32","g44","g52","g54","stepp","stepn","step2","delt","x2li","x2omi","xl","xldot","xnddt","xndt","xomi","ft","iretn","sgp4","tsince","coseo1","sineo1","delm","delomg","eo1","su","t3","t4","tem5","tempa","tempe","templ","xincp","xlm","temp4","error","xmdf","argpdf","nodedf","t2","nodecf","cc1","bstar","cc4","t2cof","isimp","omgcof","delmtemp","eta","xmcof","delmo","d2","d3","d4","cc5","sinmao","t3cof","t4cof","t5cof","dspaceOptions","dspaceResult","am","dpperParameters","operationmode","dpperResult","aycof","xlcof","axnl","aynl","u","ktr","ecose","esine","el2","rl","rdotl","rvdotl","betal","sinu","cosu","sin2u","cos2u","temp2","x1mth2","x7thm1","mrt","position","velocity","xnode","xinc","mvt","rvdot","sinsu","cossu","snod","cnod","sini","cosi","xmx","xmy","ux","uy","uz","vx","vy","vz","r","x","y","z","v","sgp4init","satn","xbstar","xecco","xargpo","xinclo","xmo","xno","xnodeo","cc1sq","cc2","cc3","coef","coef1","cosio4","eeta","etasq","perige","pinvsq","psisq","qzms24","sfour","temp3","tsi","xhdot1","ss","qzms2ttemp","qzms2t","initlOptions","initlResult","qzms24temp","delmotemp","dscomOptions","dscomResult","dpperOptions","dsinitOptions","dsinitResult","twoline2satrec","longstr1","longstr2","xpdotp","satnum","substring","epochyr","parseInt","epochdays","parseFloat","ndot","nddot","concat","a","alta","altp","mdhmsResult","jdsatepoch","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","Array","isArray","arr2","iter","Symbol","iterator","prototype","toString","call","from","TypeError","propagate","_len","args","_key","slice","j","m","dopplerFactor","location","currentRange","nextPos","nextRange","rangeRate","sign","value","c","radiansToDegrees","radians","degreesToRadians","degrees","degreesLat","RangeError","degreesLong","radiansLat","radiansLong","geodeticToEcf","geodetic","longitude","latitude","height","b","f","e2","normal","eciToGeodetic","eci","gmst","R","kmax","k","C","ecfToEci","ecf","X","Y","Z","eciToEcf","topocentric","observerGeodetic","satelliteEcf","observerEcf","rx","ry","rz","topS","topE","topZ","topocentricToLookAngles","rangeSat","El","asin","Az","azimuth","elevation","ecfToLookAngles","topocentricCoords"],"mappings":"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","sourcesContent":["/*!\n * satellite-js v3.0.1\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\nvar pi = Math.PI;\nvar twoPi = pi * 2;\nvar deg2rad = pi / 180.0;\nvar rad2deg = 180 / pi;\nvar minutesPerDay = 1440.0;\nvar mu = 398600.5; // in km3 / s2\n\nvar earthRadius = 6378.137; // in km\n\nvar xke = 60.0 / Math.sqrt(earthRadius * earthRadius * earthRadius / mu);\nvar vkmpersec = earthRadius * xke / 60.0;\nvar tumin = 1.0 / xke;\nvar j2 = 0.00108262998905;\nvar j3 = -0.00000253215306;\nvar j4 = -0.00000161098761;\nvar j3oj2 = j3 / j2;\nvar x2o3 = 2.0 / 3.0;\n\nvar constants = /*#__PURE__*/Object.freeze({\n  pi: pi,\n  twoPi: twoPi,\n  deg2rad: deg2rad,\n  rad2deg: rad2deg,\n  minutesPerDay: minutesPerDay,\n  mu: mu,\n  earthRadius: earthRadius,\n  xke: xke,\n  vkmpersec: vkmpersec,\n  tumin: tumin,\n  j2: j2,\n  j3: j3,\n  j4: j4,\n  j3oj2: j3oj2,\n  x2o3: x2o3\n});\n\n/* -----------------------------------------------------------------------------\n *\n *                           procedure days2mdhms\n *\n *  this procedure converts the day of the year, days, to the equivalent month\n *    day, hour, minute and second.\n *\n *  algorithm     : set up array for the number of days per month\n *                  find leap year - use 1900 because 2000 is a leap year\n *                  loop through a temp value while the value is < the days\n *                  perform int conversions to the correct day and month\n *                  convert remainder into h m s using type conversions\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs          description                    range / units\n *    year        - year                           1900 .. 2100\n *    days        - julian day of the year         0.0  .. 366.0\n *\n *  outputs       :\n *    mon         - month                          1 .. 12\n *    day         - day                            1 .. 28,29,30,31\n *    hr          - hour                           0 .. 23\n *    min         - minute                         0 .. 59\n *    sec         - second                         0.0 .. 59.999\n *\n *  locals        :\n *    dayofyr     - day of year\n *    temp        - temporary extended values\n *    inttemp     - temporary int value\n *    i           - index\n *    lmonth[12]  - int array containing the number of days per month\n *\n *  coupling      :\n *    none.\n * --------------------------------------------------------------------------- */\nfunction days2mdhms(year, days) {\n  var lmonth = [31, year % 4 === 0 ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  var dayofyr = Math.floor(days); //  ----------------- find month and day of month ----------------\n\n  var i = 1;\n  var inttemp = 0;\n\n  while (dayofyr > inttemp + lmonth[i - 1] && i < 12) {\n    inttemp += lmonth[i - 1];\n    i += 1;\n  }\n\n  var mon = i;\n  var day = dayofyr - inttemp; //  ----------------- find hours minutes and seconds -------------\n\n  var temp = (days - dayofyr) * 24.0;\n  var hr = Math.floor(temp);\n  temp = (temp - hr) * 60.0;\n  var minute = Math.floor(temp);\n  var sec = (temp - minute) * 60.0;\n  return {\n    mon: mon,\n    day: day,\n    hr: hr,\n    minute: minute,\n    sec: sec\n  };\n}\n/* -----------------------------------------------------------------------------\n *\n *                           procedure jday\n *\n *  this procedure finds the julian date given the year, month, day, and time.\n *    the julian date is defined by each elapsed day since noon, jan 1, 4713 bc.\n *\n *  algorithm     : calculate the answer in one step for efficiency\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs          description                    range / units\n *    year        - year                           1900 .. 2100\n *    mon         - month                          1 .. 12\n *    day         - day                            1 .. 28,29,30,31\n *    hr          - universal time hour            0 .. 23\n *    min         - universal time min             0 .. 59\n *    sec         - universal time sec             0.0 .. 59.999\n *\n *  outputs       :\n *    jd          - julian date                    days from 4713 bc\n *\n *  locals        :\n *    none.\n *\n *  coupling      :\n *    none.\n *\n *  references    :\n *    vallado       2007, 189, alg 14, ex 3-14\n *\n * --------------------------------------------------------------------------- */\n\nfunction jdayInternal(year, mon, day, hr, minute, sec) {\n  var msec = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n  return 367.0 * year - Math.floor(7 * (year + Math.floor((mon + 9) / 12.0)) * 0.25) + Math.floor(275 * mon / 9.0) + day + 1721013.5 + ((msec / 60000 + sec / 60.0 + minute) / 60.0 + hr) / 24.0 // ut in days\n  // # - 0.5*sgn(100.0*year + mon - 190002.5) + 0.5;\n  ;\n}\n\nfunction jday(year, mon, day, hr, minute, sec, msec) {\n  if (year instanceof Date) {\n    var date = year;\n    return jdayInternal(date.getUTCFullYear(), date.getUTCMonth() + 1, // Note, this function requires months in range 1-12.\n    date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  }\n\n  return jdayInternal(year, mon, day, hr, minute, sec, msec);\n}\n/* -----------------------------------------------------------------------------\n *\n *                           procedure invjday\n *\n *  this procedure finds the year, month, day, hour, minute and second\n *  given the julian date. tu can be ut1, tdt, tdb, etc.\n *\n *  algorithm     : set up starting values\n *                  find leap year - use 1900 because 2000 is a leap year\n *                  find the elapsed days through the year in a loop\n *                  call routine to find each individual value\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs          description                    range / units\n *    jd          - julian date                    days from 4713 bc\n *\n *  outputs       :\n *    year        - year                           1900 .. 2100\n *    mon         - month                          1 .. 12\n *    day         - day                            1 .. 28,29,30,31\n *    hr          - hour                           0 .. 23\n *    min         - minute                         0 .. 59\n *    sec         - second                         0.0 .. 59.999\n *\n *  locals        :\n *    days        - day of year plus fractional\n *                  portion of a day               days\n *    tu          - julian centuries from 0 h\n *                  jan 0, 1900\n *    temp        - temporary double values\n *    leapyrs     - number of leap years from 1900\n *\n *  coupling      :\n *    days2mdhms  - finds month, day, hour, minute and second given days and year\n *\n *  references    :\n *    vallado       2007, 208, alg 22, ex 3-13\n * --------------------------------------------------------------------------- */\n\nfunction invjday(jd, asArray) {\n  // --------------- find year and days of the year -\n  var temp = jd - 2415019.5;\n  var tu = temp / 365.25;\n  var year = 1900 + Math.floor(tu);\n  var leapyrs = Math.floor((year - 1901) * 0.25); // optional nudge by 8.64x10-7 sec to get even outputs\n\n  var days = temp - ((year - 1900) * 365.0 + leapyrs) + 0.00000000001; // ------------ check for case of beginning of a year -----------\n\n  if (days < 1.0) {\n    year -= 1;\n    leapyrs = Math.floor((year - 1901) * 0.25);\n    days = temp - ((year - 1900) * 365.0 + leapyrs);\n  } // ----------------- find remaing data  -------------------------\n\n\n  var mdhms = days2mdhms(year, days);\n  var mon = mdhms.mon,\n      day = mdhms.day,\n      hr = mdhms.hr,\n      minute = mdhms.minute;\n  var sec = mdhms.sec - 0.00000086400;\n\n  if (asArray) {\n    return [year, mon, day, hr, minute, Math.floor(sec)];\n  }\n\n  return new Date(Date.UTC(year, mon - 1, day, hr, minute, Math.floor(sec)));\n}\n\n/* -----------------------------------------------------------------------------\n *\n *                           procedure dpper\n *\n *  this procedure provides deep space long period periodic contributions\n *    to the mean elements.  by design, these periodics are zero at epoch.\n *    this used to be dscom which included initialization, but it's really a\n *    recurring function.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    e3          -\n *    ee2         -\n *    peo         -\n *    pgho        -\n *    pho         -\n *    pinco       -\n *    plo         -\n *    se2 , se3 , sgh2, sgh3, sgh4, sh2, sh3, si2, si3, sl2, sl3, sl4 -\n *    t           -\n *    xh2, xh3, xi2, xi3, xl2, xl3, xl4 -\n *    zmol        -\n *    zmos        -\n *    ep          - eccentricity                           0.0 - 1.0\n *    inclo       - inclination - needed for lyddane modification\n *    nodep       - right ascension of ascending node\n *    argpp       - argument of perigee\n *    mp          - mean anomaly\n *\n *  outputs       :\n *    ep          - eccentricity                           0.0 - 1.0\n *    inclp       - inclination\n *    nodep        - right ascension of ascending node\n *    argpp       - argument of perigee\n *    mp          - mean anomaly\n *\n *  locals        :\n *    alfdp       -\n *    betdp       -\n *    cosip  , sinip  , cosop  , sinop  ,\n *    dalf        -\n *    dbet        -\n *    dls         -\n *    f2, f3      -\n *    pe          -\n *    pgh         -\n *    ph          -\n *    pinc        -\n *    pl          -\n *    sel   , ses   , sghl  , sghs  , shl   , shs   , sil   , sinzf , sis   ,\n *    sll   , sls\n *    xls         -\n *    xnoh        -\n *    zf          -\n *    zm          -\n *\n *  coupling      :\n *    none.\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\nfunction dpper(satrec, options) {\n  var e3 = satrec.e3,\n      ee2 = satrec.ee2,\n      peo = satrec.peo,\n      pgho = satrec.pgho,\n      pho = satrec.pho,\n      pinco = satrec.pinco,\n      plo = satrec.plo,\n      se2 = satrec.se2,\n      se3 = satrec.se3,\n      sgh2 = satrec.sgh2,\n      sgh3 = satrec.sgh3,\n      sgh4 = satrec.sgh4,\n      sh2 = satrec.sh2,\n      sh3 = satrec.sh3,\n      si2 = satrec.si2,\n      si3 = satrec.si3,\n      sl2 = satrec.sl2,\n      sl3 = satrec.sl3,\n      sl4 = satrec.sl4,\n      t = satrec.t,\n      xgh2 = satrec.xgh2,\n      xgh3 = satrec.xgh3,\n      xgh4 = satrec.xgh4,\n      xh2 = satrec.xh2,\n      xh3 = satrec.xh3,\n      xi2 = satrec.xi2,\n      xi3 = satrec.xi3,\n      xl2 = satrec.xl2,\n      xl3 = satrec.xl3,\n      xl4 = satrec.xl4,\n      zmol = satrec.zmol,\n      zmos = satrec.zmos;\n  var init = options.init,\n      opsmode = options.opsmode;\n  var ep = options.ep,\n      inclp = options.inclp,\n      nodep = options.nodep,\n      argpp = options.argpp,\n      mp = options.mp; // Copy satellite attributes into local variables for convenience\n  // and symmetry in writing formulae.\n\n  var alfdp;\n  var betdp;\n  var cosip;\n  var sinip;\n  var cosop;\n  var sinop;\n  var dalf;\n  var dbet;\n  var dls;\n  var f2;\n  var f3;\n  var pe;\n  var pgh;\n  var ph;\n  var pinc;\n  var pl;\n  var sinzf;\n  var xls;\n  var xnoh;\n  var zf;\n  var zm; //  ---------------------- constants -----------------------------\n\n  var zns = 1.19459e-5;\n  var zes = 0.01675;\n  var znl = 1.5835218e-4;\n  var zel = 0.05490; //  --------------- calculate time varying periodics -----------\n\n  zm = zmos + zns * t; // be sure that the initial call has time set to zero\n\n  if (init === 'y') {\n    zm = zmos;\n  }\n\n  zf = zm + 2.0 * zes * Math.sin(zm);\n  sinzf = Math.sin(zf);\n  f2 = 0.5 * sinzf * sinzf - 0.25;\n  f3 = -0.5 * sinzf * Math.cos(zf);\n  var ses = se2 * f2 + se3 * f3;\n  var sis = si2 * f2 + si3 * f3;\n  var sls = sl2 * f2 + sl3 * f3 + sl4 * sinzf;\n  var sghs = sgh2 * f2 + sgh3 * f3 + sgh4 * sinzf;\n  var shs = sh2 * f2 + sh3 * f3;\n  zm = zmol + znl * t;\n\n  if (init === 'y') {\n    zm = zmol;\n  }\n\n  zf = zm + 2.0 * zel * Math.sin(zm);\n  sinzf = Math.sin(zf);\n  f2 = 0.5 * sinzf * sinzf - 0.25;\n  f3 = -0.5 * sinzf * Math.cos(zf);\n  var sel = ee2 * f2 + e3 * f3;\n  var sil = xi2 * f2 + xi3 * f3;\n  var sll = xl2 * f2 + xl3 * f3 + xl4 * sinzf;\n  var sghl = xgh2 * f2 + xgh3 * f3 + xgh4 * sinzf;\n  var shll = xh2 * f2 + xh3 * f3;\n  pe = ses + sel;\n  pinc = sis + sil;\n  pl = sls + sll;\n  pgh = sghs + sghl;\n  ph = shs + shll;\n\n  if (init === 'n') {\n    pe -= peo;\n    pinc -= pinco;\n    pl -= plo;\n    pgh -= pgho;\n    ph -= pho;\n    inclp += pinc;\n    ep += pe;\n    sinip = Math.sin(inclp);\n    cosip = Math.cos(inclp);\n    /* ----------------- apply periodics directly ------------ */\n    // sgp4fix for lyddane choice\n    // strn3 used original inclination - this is technically feasible\n    // gsfc used perturbed inclination - also technically feasible\n    // probably best to readjust the 0.2 limit value and limit discontinuity\n    // 0.2 rad = 11.45916 deg\n    // use next line for original strn3 approach and original inclination\n    // if (inclo >= 0.2)\n    // use next line for gsfc version and perturbed inclination\n\n    if (inclp >= 0.2) {\n      ph /= sinip;\n      pgh -= cosip * ph;\n      argpp += pgh;\n      nodep += ph;\n      mp += pl;\n    } else {\n      //  ---- apply periodics with lyddane modification ----\n      sinop = Math.sin(nodep);\n      cosop = Math.cos(nodep);\n      alfdp = sinip * sinop;\n      betdp = sinip * cosop;\n      dalf = ph * cosop + pinc * cosip * sinop;\n      dbet = -ph * sinop + pinc * cosip * cosop;\n      alfdp += dalf;\n      betdp += dbet;\n      nodep %= twoPi; //  sgp4fix for afspc written intrinsic functions\n      //  nodep used without a trigonometric function ahead\n\n      if (nodep < 0.0 && opsmode === 'a') {\n        nodep += twoPi;\n      }\n\n      xls = mp + argpp + cosip * nodep;\n      dls = pl + pgh - pinc * nodep * sinip;\n      xls += dls;\n      xnoh = nodep;\n      nodep = Math.atan2(alfdp, betdp); //  sgp4fix for afspc written intrinsic functions\n      //  nodep used without a trigonometric function ahead\n\n      if (nodep < 0.0 && opsmode === 'a') {\n        nodep += twoPi;\n      }\n\n      if (Math.abs(xnoh - nodep) > pi) {\n        if (nodep < xnoh) {\n          nodep += twoPi;\n        } else {\n          nodep -= twoPi;\n        }\n      }\n\n      mp += pl;\n      argpp = xls - mp - cosip * nodep;\n    }\n  }\n\n  return {\n    ep: ep,\n    inclp: inclp,\n    nodep: nodep,\n    argpp: argpp,\n    mp: mp\n  };\n}\n\n/*-----------------------------------------------------------------------------\n *\n *                           procedure dscom\n *\n *  this procedure provides deep space common items used by both the secular\n *    and periodics subroutines.  input is provided as shown. this routine\n *    used to be called dpper, but the functions inside weren't well organized.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    epoch       -\n *    ep          - eccentricity\n *    argpp       - argument of perigee\n *    tc          -\n *    inclp       - inclination\n *    nodep       - right ascension of ascending node\n *    np          - mean motion\n *\n *  outputs       :\n *    sinim  , cosim  , sinomm , cosomm , snodm  , cnodm\n *    day         -\n *    e3          -\n *    ee2         -\n *    em          - eccentricity\n *    emsq        - eccentricity squared\n *    gam         -\n *    peo         -\n *    pgho        -\n *    pho         -\n *    pinco       -\n *    plo         -\n *    rtemsq      -\n *    se2, se3         -\n *    sgh2, sgh3, sgh4        -\n *    sh2, sh3, si2, si3, sl2, sl3, sl4         -\n *    s1, s2, s3, s4, s5, s6, s7          -\n *    ss1, ss2, ss3, ss4, ss5, ss6, ss7, sz1, sz2, sz3         -\n *    sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33        -\n *    xgh2, xgh3, xgh4, xh2, xh3, xi2, xi3, xl2, xl3, xl4         -\n *    nm          - mean motion\n *    z1, z2, z3, z11, z12, z13, z21, z22, z23, z31, z32, z33         -\n *    zmol        -\n *    zmos        -\n *\n *  locals        :\n *    a1, a2, a3, a4, a5, a6, a7, a8, a9, a10         -\n *    betasq      -\n *    cc          -\n *    ctem, stem        -\n *    x1, x2, x3, x4, x5, x6, x7, x8          -\n *    xnodce      -\n *    xnoi        -\n *    zcosg  , zsing  , zcosgl , zsingl , zcosh  , zsinh  , zcoshl , zsinhl ,\n *    zcosi  , zsini  , zcosil , zsinil ,\n *    zx          -\n *    zy          -\n *\n *  coupling      :\n *    none.\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\nfunction dscom(options) {\n  var epoch = options.epoch,\n      ep = options.ep,\n      argpp = options.argpp,\n      tc = options.tc,\n      inclp = options.inclp,\n      nodep = options.nodep,\n      np = options.np;\n  var a1;\n  var a2;\n  var a3;\n  var a4;\n  var a5;\n  var a6;\n  var a7;\n  var a8;\n  var a9;\n  var a10;\n  var cc;\n  var x1;\n  var x2;\n  var x3;\n  var x4;\n  var x5;\n  var x6;\n  var x7;\n  var x8;\n  var zcosg;\n  var zsing;\n  var zcosh;\n  var zsinh;\n  var zcosi;\n  var zsini;\n  var ss1;\n  var ss2;\n  var ss3;\n  var ss4;\n  var ss5;\n  var ss6;\n  var ss7;\n  var sz1;\n  var sz2;\n  var sz3;\n  var sz11;\n  var sz12;\n  var sz13;\n  var sz21;\n  var sz22;\n  var sz23;\n  var sz31;\n  var sz32;\n  var sz33;\n  var s1;\n  var s2;\n  var s3;\n  var s4;\n  var s5;\n  var s6;\n  var s7;\n  var z1;\n  var z2;\n  var z3;\n  var z11;\n  var z12;\n  var z13;\n  var z21;\n  var z22;\n  var z23;\n  var z31;\n  var z32;\n  var z33; // -------------------------- constants -------------------------\n\n  var zes = 0.01675;\n  var zel = 0.05490;\n  var c1ss = 2.9864797e-6;\n  var c1l = 4.7968065e-7;\n  var zsinis = 0.39785416;\n  var zcosis = 0.91744867;\n  var zcosgs = 0.1945905;\n  var zsings = -0.98088458; //  --------------------- local variables ------------------------\n\n  var nm = np;\n  var em = ep;\n  var snodm = Math.sin(nodep);\n  var cnodm = Math.cos(nodep);\n  var sinomm = Math.sin(argpp);\n  var cosomm = Math.cos(argpp);\n  var sinim = Math.sin(inclp);\n  var cosim = Math.cos(inclp);\n  var emsq = em * em;\n  var betasq = 1.0 - emsq;\n  var rtemsq = Math.sqrt(betasq); //  ----------------- initialize lunar solar terms ---------------\n\n  var peo = 0.0;\n  var pinco = 0.0;\n  var plo = 0.0;\n  var pgho = 0.0;\n  var pho = 0.0;\n  var day = epoch + 18261.5 + tc / 1440.0;\n  var xnodce = (4.5236020 - 9.2422029e-4 * day) % twoPi;\n  var stem = Math.sin(xnodce);\n  var ctem = Math.cos(xnodce);\n  var zcosil = 0.91375164 - 0.03568096 * ctem;\n  var zsinil = Math.sqrt(1.0 - zcosil * zcosil);\n  var zsinhl = 0.089683511 * stem / zsinil;\n  var zcoshl = Math.sqrt(1.0 - zsinhl * zsinhl);\n  var gam = 5.8351514 + 0.0019443680 * day;\n  var zx = 0.39785416 * stem / zsinil;\n  var zy = zcoshl * ctem + 0.91744867 * zsinhl * stem;\n  zx = Math.atan2(zx, zy);\n  zx += gam - xnodce;\n  var zcosgl = Math.cos(zx);\n  var zsingl = Math.sin(zx); //  ------------------------- do solar terms ---------------------\n\n  zcosg = zcosgs;\n  zsing = zsings;\n  zcosi = zcosis;\n  zsini = zsinis;\n  zcosh = cnodm;\n  zsinh = snodm;\n  cc = c1ss;\n  var xnoi = 1.0 / nm;\n  var lsflg = 0;\n\n  while (lsflg < 2) {\n    lsflg += 1;\n    a1 = zcosg * zcosh + zsing * zcosi * zsinh;\n    a3 = -zsing * zcosh + zcosg * zcosi * zsinh;\n    a7 = -zcosg * zsinh + zsing * zcosi * zcosh;\n    a8 = zsing * zsini;\n    a9 = zsing * zsinh + zcosg * zcosi * zcosh;\n    a10 = zcosg * zsini;\n    a2 = cosim * a7 + sinim * a8;\n    a4 = cosim * a9 + sinim * a10;\n    a5 = -sinim * a7 + cosim * a8;\n    a6 = -sinim * a9 + cosim * a10;\n    x1 = a1 * cosomm + a2 * sinomm;\n    x2 = a3 * cosomm + a4 * sinomm;\n    x3 = -a1 * sinomm + a2 * cosomm;\n    x4 = -a3 * sinomm + a4 * cosomm;\n    x5 = a5 * sinomm;\n    x6 = a6 * sinomm;\n    x7 = a5 * cosomm;\n    x8 = a6 * cosomm;\n    z31 = 12.0 * x1 * x1 - 3.0 * x3 * x3;\n    z32 = 24.0 * x1 * x2 - 6.0 * x3 * x4;\n    z33 = 12.0 * x2 * x2 - 3.0 * x4 * x4;\n    z1 = 3.0 * (a1 * a1 + a2 * a2) + z31 * emsq;\n    z2 = 6.0 * (a1 * a3 + a2 * a4) + z32 * emsq;\n    z3 = 3.0 * (a3 * a3 + a4 * a4) + z33 * emsq;\n    z11 = -6.0 * a1 * a5 + emsq * (-24.0 * x1 * x7 - 6.0 * x3 * x5);\n    z12 = -6.0 * (a1 * a6 + a3 * a5) + emsq * (-24.0 * (x2 * x7 + x1 * x8) + -6.0 * (x3 * x6 + x4 * x5));\n    z13 = -6.0 * a3 * a6 + emsq * (-24.0 * x2 * x8 - 6.0 * x4 * x6);\n    z21 = 6.0 * a2 * a5 + emsq * (24.0 * x1 * x5 - 6.0 * x3 * x7);\n    z22 = 6.0 * (a4 * a5 + a2 * a6) + emsq * (24.0 * (x2 * x5 + x1 * x6) - 6.0 * (x4 * x7 + x3 * x8));\n    z23 = 6.0 * a4 * a6 + emsq * (24.0 * x2 * x6 - 6.0 * x4 * x8);\n    z1 = z1 + z1 + betasq * z31;\n    z2 = z2 + z2 + betasq * z32;\n    z3 = z3 + z3 + betasq * z33;\n    s3 = cc * xnoi;\n    s2 = -0.5 * s3 / rtemsq;\n    s4 = s3 * rtemsq;\n    s1 = -15.0 * em * s4;\n    s5 = x1 * x3 + x2 * x4;\n    s6 = x2 * x3 + x1 * x4;\n    s7 = x2 * x4 - x1 * x3; //  ----------------------- do lunar terms -------------------\n\n    if (lsflg === 1) {\n      ss1 = s1;\n      ss2 = s2;\n      ss3 = s3;\n      ss4 = s4;\n      ss5 = s5;\n      ss6 = s6;\n      ss7 = s7;\n      sz1 = z1;\n      sz2 = z2;\n      sz3 = z3;\n      sz11 = z11;\n      sz12 = z12;\n      sz13 = z13;\n      sz21 = z21;\n      sz22 = z22;\n      sz23 = z23;\n      sz31 = z31;\n      sz32 = z32;\n      sz33 = z33;\n      zcosg = zcosgl;\n      zsing = zsingl;\n      zcosi = zcosil;\n      zsini = zsinil;\n      zcosh = zcoshl * cnodm + zsinhl * snodm;\n      zsinh = snodm * zcoshl - cnodm * zsinhl;\n      cc = c1l;\n    }\n  }\n\n  var zmol = (4.7199672 + (0.22997150 * day - gam)) % twoPi;\n  var zmos = (6.2565837 + 0.017201977 * day) % twoPi; //  ------------------------ do solar terms ----------------------\n\n  var se2 = 2.0 * ss1 * ss6;\n  var se3 = 2.0 * ss1 * ss7;\n  var si2 = 2.0 * ss2 * sz12;\n  var si3 = 2.0 * ss2 * (sz13 - sz11);\n  var sl2 = -2.0 * ss3 * sz2;\n  var sl3 = -2.0 * ss3 * (sz3 - sz1);\n  var sl4 = -2.0 * ss3 * (-21.0 - 9.0 * emsq) * zes;\n  var sgh2 = 2.0 * ss4 * sz32;\n  var sgh3 = 2.0 * ss4 * (sz33 - sz31);\n  var sgh4 = -18.0 * ss4 * zes;\n  var sh2 = -2.0 * ss2 * sz22;\n  var sh3 = -2.0 * ss2 * (sz23 - sz21); //  ------------------------ do lunar terms ----------------------\n\n  var ee2 = 2.0 * s1 * s6;\n  var e3 = 2.0 * s1 * s7;\n  var xi2 = 2.0 * s2 * z12;\n  var xi3 = 2.0 * s2 * (z13 - z11);\n  var xl2 = -2.0 * s3 * z2;\n  var xl3 = -2.0 * s3 * (z3 - z1);\n  var xl4 = -2.0 * s3 * (-21.0 - 9.0 * emsq) * zel;\n  var xgh2 = 2.0 * s4 * z32;\n  var xgh3 = 2.0 * s4 * (z33 - z31);\n  var xgh4 = -18.0 * s4 * zel;\n  var xh2 = -2.0 * s2 * z22;\n  var xh3 = -2.0 * s2 * (z23 - z21);\n  return {\n    snodm: snodm,\n    cnodm: cnodm,\n    sinim: sinim,\n    cosim: cosim,\n    sinomm: sinomm,\n    cosomm: cosomm,\n    day: day,\n    e3: e3,\n    ee2: ee2,\n    em: em,\n    emsq: emsq,\n    gam: gam,\n    peo: peo,\n    pgho: pgho,\n    pho: pho,\n    pinco: pinco,\n    plo: plo,\n    rtemsq: rtemsq,\n    se2: se2,\n    se3: se3,\n    sgh2: sgh2,\n    sgh3: sgh3,\n    sgh4: sgh4,\n    sh2: sh2,\n    sh3: sh3,\n    si2: si2,\n    si3: si3,\n    sl2: sl2,\n    sl3: sl3,\n    sl4: sl4,\n    s1: s1,\n    s2: s2,\n    s3: s3,\n    s4: s4,\n    s5: s5,\n    s6: s6,\n    s7: s7,\n    ss1: ss1,\n    ss2: ss2,\n    ss3: ss3,\n    ss4: ss4,\n    ss5: ss5,\n    ss6: ss6,\n    ss7: ss7,\n    sz1: sz1,\n    sz2: sz2,\n    sz3: sz3,\n    sz11: sz11,\n    sz12: sz12,\n    sz13: sz13,\n    sz21: sz21,\n    sz22: sz22,\n    sz23: sz23,\n    sz31: sz31,\n    sz32: sz32,\n    sz33: sz33,\n    xgh2: xgh2,\n    xgh3: xgh3,\n    xgh4: xgh4,\n    xh2: xh2,\n    xh3: xh3,\n    xi2: xi2,\n    xi3: xi3,\n    xl2: xl2,\n    xl3: xl3,\n    xl4: xl4,\n    nm: nm,\n    z1: z1,\n    z2: z2,\n    z3: z3,\n    z11: z11,\n    z12: z12,\n    z13: z13,\n    z21: z21,\n    z22: z22,\n    z23: z23,\n    z31: z31,\n    z32: z32,\n    z33: z33,\n    zmol: zmol,\n    zmos: zmos\n  };\n}\n\n/*-----------------------------------------------------------------------------\n *\n *                           procedure dsinit\n *\n *  this procedure provides deep space contributions to mean motion dot due\n *    to geopotential resonance with half day and one day orbits.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    cosim, sinim-\n *    emsq        - eccentricity squared\n *    argpo       - argument of perigee\n *    s1, s2, s3, s4, s5      -\n *    ss1, ss2, ss3, ss4, ss5 -\n *    sz1, sz3, sz11, sz13, sz21, sz23, sz31, sz33 -\n *    t           - time\n *    tc          -\n *    gsto        - greenwich sidereal time                   rad\n *    mo          - mean anomaly\n *    mdot        - mean anomaly dot (rate)\n *    no          - mean motion\n *    nodeo       - right ascension of ascending node\n *    nodedot     - right ascension of ascending node dot (rate)\n *    xpidot      -\n *    z1, z3, z11, z13, z21, z23, z31, z33 -\n *    eccm        - eccentricity\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    xn          - mean motion\n *    nodem       - right ascension of ascending node\n *\n *  outputs       :\n *    em          - eccentricity\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    nm          - mean motion\n *    nodem       - right ascension of ascending node\n *    irez        - flag for resonance           0-none, 1-one day, 2-half day\n *    atime       -\n *    d2201, d2211, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433    -\n *    dedt        -\n *    didt        -\n *    dmdt        -\n *    dndt        -\n *    dnodt       -\n *    domdt       -\n *    del1, del2, del3        -\n *    ses  , sghl , sghs , sgs  , shl  , shs  , sis  , sls\n *    theta       -\n *    xfact       -\n *    xlamo       -\n *    xli         -\n *    xni\n *\n *  locals        :\n *    ainv2       -\n *    aonv        -\n *    cosisq      -\n *    eoc         -\n *    f220, f221, f311, f321, f322, f330, f441, f442, f522, f523, f542, f543  -\n *    g200, g201, g211, g300, g310, g322, g410, g422, g520, g521, g532, g533  -\n *    sini2       -\n *    temp        -\n *    temp1       -\n *    theta       -\n *    xno2        -\n *\n *  coupling      :\n *    getgravconst\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\nfunction dsinit(options) {\n  var cosim = options.cosim,\n      argpo = options.argpo,\n      s1 = options.s1,\n      s2 = options.s2,\n      s3 = options.s3,\n      s4 = options.s4,\n      s5 = options.s5,\n      sinim = options.sinim,\n      ss1 = options.ss1,\n      ss2 = options.ss2,\n      ss3 = options.ss3,\n      ss4 = options.ss4,\n      ss5 = options.ss5,\n      sz1 = options.sz1,\n      sz3 = options.sz3,\n      sz11 = options.sz11,\n      sz13 = options.sz13,\n      sz21 = options.sz21,\n      sz23 = options.sz23,\n      sz31 = options.sz31,\n      sz33 = options.sz33,\n      t = options.t,\n      tc = options.tc,\n      gsto = options.gsto,\n      mo = options.mo,\n      mdot = options.mdot,\n      no = options.no,\n      nodeo = options.nodeo,\n      nodedot = options.nodedot,\n      xpidot = options.xpidot,\n      z1 = options.z1,\n      z3 = options.z3,\n      z11 = options.z11,\n      z13 = options.z13,\n      z21 = options.z21,\n      z23 = options.z23,\n      z31 = options.z31,\n      z33 = options.z33,\n      ecco = options.ecco,\n      eccsq = options.eccsq;\n  var emsq = options.emsq,\n      em = options.em,\n      argpm = options.argpm,\n      inclm = options.inclm,\n      mm = options.mm,\n      nm = options.nm,\n      nodem = options.nodem,\n      irez = options.irez,\n      atime = options.atime,\n      d2201 = options.d2201,\n      d2211 = options.d2211,\n      d3210 = options.d3210,\n      d3222 = options.d3222,\n      d4410 = options.d4410,\n      d4422 = options.d4422,\n      d5220 = options.d5220,\n      d5232 = options.d5232,\n      d5421 = options.d5421,\n      d5433 = options.d5433,\n      dedt = options.dedt,\n      didt = options.didt,\n      dmdt = options.dmdt,\n      dnodt = options.dnodt,\n      domdt = options.domdt,\n      del1 = options.del1,\n      del2 = options.del2,\n      del3 = options.del3,\n      xfact = options.xfact,\n      xlamo = options.xlamo,\n      xli = options.xli,\n      xni = options.xni;\n  var f220;\n  var f221;\n  var f311;\n  var f321;\n  var f322;\n  var f330;\n  var f441;\n  var f442;\n  var f522;\n  var f523;\n  var f542;\n  var f543;\n  var g200;\n  var g201;\n  var g211;\n  var g300;\n  var g310;\n  var g322;\n  var g410;\n  var g422;\n  var g520;\n  var g521;\n  var g532;\n  var g533;\n  var sini2;\n  var temp;\n  var temp1;\n  var xno2;\n  var ainv2;\n  var aonv;\n  var cosisq;\n  var eoc;\n  var q22 = 1.7891679e-6;\n  var q31 = 2.1460748e-6;\n  var q33 = 2.2123015e-7;\n  var root22 = 1.7891679e-6;\n  var root44 = 7.3636953e-9;\n  var root54 = 2.1765803e-9;\n  var rptim = 4.37526908801129966e-3; // equates to 7.29211514668855e-5 rad/sec\n\n  var root32 = 3.7393792e-7;\n  var root52 = 1.1428639e-7;\n  var znl = 1.5835218e-4;\n  var zns = 1.19459e-5; // -------------------- deep space initialization ------------\n\n  irez = 0;\n\n  if (nm < 0.0052359877 && nm > 0.0034906585) {\n    irez = 1;\n  }\n\n  if (nm >= 8.26e-3 && nm <= 9.24e-3 && em >= 0.5) {\n    irez = 2;\n  } // ------------------------ do solar terms -------------------\n\n\n  var ses = ss1 * zns * ss5;\n  var sis = ss2 * zns * (sz11 + sz13);\n  var sls = -zns * ss3 * (sz1 + sz3 - 14.0 - 6.0 * emsq);\n  var sghs = ss4 * zns * (sz31 + sz33 - 6.0);\n  var shs = -zns * ss2 * (sz21 + sz23); // sgp4fix for 180 deg incl\n\n  if (inclm < 5.2359877e-2 || inclm > pi - 5.2359877e-2) {\n    shs = 0.0;\n  }\n\n  if (sinim !== 0.0) {\n    shs /= sinim;\n  }\n\n  var sgs = sghs - cosim * shs; // ------------------------- do lunar terms ------------------\n\n  dedt = ses + s1 * znl * s5;\n  didt = sis + s2 * znl * (z11 + z13);\n  dmdt = sls - znl * s3 * (z1 + z3 - 14.0 - 6.0 * emsq);\n  var sghl = s4 * znl * (z31 + z33 - 6.0);\n  var shll = -znl * s2 * (z21 + z23); // sgp4fix for 180 deg incl\n\n  if (inclm < 5.2359877e-2 || inclm > pi - 5.2359877e-2) {\n    shll = 0.0;\n  }\n\n  domdt = sgs + sghl;\n  dnodt = shs;\n\n  if (sinim !== 0.0) {\n    domdt -= cosim / sinim * shll;\n    dnodt += shll / sinim;\n  } // ----------- calculate deep space resonance effects --------\n\n\n  var dndt = 0.0;\n  var theta = (gsto + tc * rptim) % twoPi;\n  em += dedt * t;\n  inclm += didt * t;\n  argpm += domdt * t;\n  nodem += dnodt * t;\n  mm += dmdt * t; // sgp4fix for negative inclinations\n  // the following if statement should be commented out\n  // if (inclm < 0.0)\n  // {\n  //   inclm  = -inclm;\n  //   argpm  = argpm - pi;\n  //   nodem = nodem + pi;\n  // }\n  // -------------- initialize the resonance terms -------------\n\n  if (irez !== 0) {\n    aonv = Math.pow(nm / xke, x2o3); // ---------- geopotential resonance for 12 hour orbits ------\n\n    if (irez === 2) {\n      cosisq = cosim * cosim;\n      var emo = em;\n      em = ecco;\n      var emsqo = emsq;\n      emsq = eccsq;\n      eoc = em * emsq;\n      g201 = -0.306 - (em - 0.64) * 0.440;\n\n      if (em <= 0.65) {\n        g211 = 3.616 - 13.2470 * em + 16.2900 * emsq;\n        g310 = -19.302 + 117.3900 * em - 228.4190 * emsq + 156.5910 * eoc;\n        g322 = -18.9068 + 109.7927 * em - 214.6334 * emsq + 146.5816 * eoc;\n        g410 = -41.122 + 242.6940 * em - 471.0940 * emsq + 313.9530 * eoc;\n        g422 = -146.407 + 841.8800 * em - 1629.014 * emsq + 1083.4350 * eoc;\n        g520 = -532.114 + 3017.977 * em - 5740.032 * emsq + 3708.2760 * eoc;\n      } else {\n        g211 = -72.099 + 331.819 * em - 508.738 * emsq + 266.724 * eoc;\n        g310 = -346.844 + 1582.851 * em - 2415.925 * emsq + 1246.113 * eoc;\n        g322 = -342.585 + 1554.908 * em - 2366.899 * emsq + 1215.972 * eoc;\n        g410 = -1052.797 + 4758.686 * em - 7193.992 * emsq + 3651.957 * eoc;\n        g422 = -3581.690 + 16178.110 * em - 24462.770 * emsq + 12422.520 * eoc;\n\n        if (em > 0.715) {\n          g520 = -5149.66 + 29936.92 * em - 54087.36 * emsq + 31324.56 * eoc;\n        } else {\n          g520 = 1464.74 - 4664.75 * em + 3763.64 * emsq;\n        }\n      }\n\n      if (em < 0.7) {\n        g533 = -919.22770 + 4988.6100 * em - 9064.7700 * emsq + 5542.21 * eoc;\n        g521 = -822.71072 + 4568.6173 * em - 8491.4146 * emsq + 5337.524 * eoc;\n        g532 = -853.66600 + 4690.2500 * em - 8624.7700 * emsq + 5341.4 * eoc;\n      } else {\n        g533 = -37995.780 + 161616.52 * em - 229838.20 * emsq + 109377.94 * eoc;\n        g521 = -51752.104 + 218913.95 * em - 309468.16 * emsq + 146349.42 * eoc;\n        g532 = -40023.880 + 170470.89 * em - 242699.48 * emsq + 115605.82 * eoc;\n      }\n\n      sini2 = sinim * sinim;\n      f220 = 0.75 * (1.0 + 2.0 * cosim + cosisq);\n      f221 = 1.5 * sini2;\n      f321 = 1.875 * sinim * (1.0 - 2.0 * cosim - 3.0 * cosisq);\n      f322 = -1.875 * sinim * (1.0 + 2.0 * cosim - 3.0 * cosisq);\n      f441 = 35.0 * sini2 * f220;\n      f442 = 39.3750 * sini2 * sini2;\n      f522 = 9.84375 * sinim * (sini2 * (1.0 - 2.0 * cosim - 5.0 * cosisq) + 0.33333333 * (-2.0 + 4.0 * cosim + 6.0 * cosisq));\n      f523 = sinim * (4.92187512 * sini2 * (-2.0 - 4.0 * cosim + 10.0 * cosisq) + 6.56250012 * (1.0 + 2.0 * cosim - 3.0 * cosisq));\n      f542 = 29.53125 * sinim * (2.0 - 8.0 * cosim + cosisq * (-12.0 + 8.0 * cosim + 10.0 * cosisq));\n      f543 = 29.53125 * sinim * (-2.0 - 8.0 * cosim + cosisq * (12.0 + 8.0 * cosim - 10.0 * cosisq));\n      xno2 = nm * nm;\n      ainv2 = aonv * aonv;\n      temp1 = 3.0 * xno2 * ainv2;\n      temp = temp1 * root22;\n      d2201 = temp * f220 * g201;\n      d2211 = temp * f221 * g211;\n      temp1 *= aonv;\n      temp = temp1 * root32;\n      d3210 = temp * f321 * g310;\n      d3222 = temp * f322 * g322;\n      temp1 *= aonv;\n      temp = 2.0 * temp1 * root44;\n      d4410 = temp * f441 * g410;\n      d4422 = temp * f442 * g422;\n      temp1 *= aonv;\n      temp = temp1 * root52;\n      d5220 = temp * f522 * g520;\n      d5232 = temp * f523 * g532;\n      temp = 2.0 * temp1 * root54;\n      d5421 = temp * f542 * g521;\n      d5433 = temp * f543 * g533;\n      xlamo = (mo + nodeo + nodeo - (theta + theta)) % twoPi;\n      xfact = mdot + dmdt + 2.0 * (nodedot + dnodt - rptim) - no;\n      em = emo;\n      emsq = emsqo;\n    } //  ---------------- synchronous resonance terms --------------\n\n\n    if (irez === 1) {\n      g200 = 1.0 + emsq * (-2.5 + 0.8125 * emsq);\n      g310 = 1.0 + 2.0 * emsq;\n      g300 = 1.0 + emsq * (-6.0 + 6.60937 * emsq);\n      f220 = 0.75 * (1.0 + cosim) * (1.0 + cosim);\n      f311 = 0.9375 * sinim * sinim * (1.0 + 3.0 * cosim) - 0.75 * (1.0 + cosim);\n      f330 = 1.0 + cosim;\n      f330 *= 1.875 * f330 * f330;\n      del1 = 3.0 * nm * nm * aonv * aonv;\n      del2 = 2.0 * del1 * f220 * g200 * q22;\n      del3 = 3.0 * del1 * f330 * g300 * q33 * aonv;\n      del1 = del1 * f311 * g310 * q31 * aonv;\n      xlamo = (mo + nodeo + argpo - theta) % twoPi;\n      xfact = mdot + xpidot + dmdt + domdt + dnodt - (no + rptim);\n    } //  ------------ for sgp4, initialize the integrator ----------\n\n\n    xli = xlamo;\n    xni = no;\n    atime = 0.0;\n    nm = no + dndt;\n  }\n\n  return {\n    em: em,\n    argpm: argpm,\n    inclm: inclm,\n    mm: mm,\n    nm: nm,\n    nodem: nodem,\n    irez: irez,\n    atime: atime,\n    d2201: d2201,\n    d2211: d2211,\n    d3210: d3210,\n    d3222: d3222,\n    d4410: d4410,\n    d4422: d4422,\n    d5220: d5220,\n    d5232: d5232,\n    d5421: d5421,\n    d5433: d5433,\n    dedt: dedt,\n    didt: didt,\n    dmdt: dmdt,\n    dndt: dndt,\n    dnodt: dnodt,\n    domdt: domdt,\n    del1: del1,\n    del2: del2,\n    del3: del3,\n    xfact: xfact,\n    xlamo: xlamo,\n    xli: xli,\n    xni: xni\n  };\n}\n\n/* -----------------------------------------------------------------------------\n *\n *                           function gstime\n *\n *  this function finds the greenwich sidereal time.\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs          description                    range / units\n *    jdut1       - julian date in ut1             days from 4713 bc\n *\n *  outputs       :\n *    gstime      - greenwich sidereal time        0 to 2pi rad\n *\n *  locals        :\n *    temp        - temporary variable for doubles   rad\n *    tut1        - julian centuries from the\n *                  jan 1, 2000 12 h epoch (ut1)\n *\n *  coupling      :\n *    none\n *\n *  references    :\n *    vallado       2004, 191, eq 3-45\n * --------------------------------------------------------------------------- */\n\nfunction gstimeInternal(jdut1) {\n  var tut1 = (jdut1 - 2451545.0) / 36525.0;\n  var temp = -6.2e-6 * tut1 * tut1 * tut1 + 0.093104 * tut1 * tut1 + (876600.0 * 3600 + 8640184.812866) * tut1 + 67310.54841; // # sec\n\n  temp = temp * deg2rad / 240.0 % twoPi; // 360/86400 = 1/240, to deg, to rad\n  //  ------------------------ check quadrants ---------------------\n\n  if (temp < 0.0) {\n    temp += twoPi;\n  }\n\n  return temp;\n}\n\nfunction gstime() {\n  if ((arguments.length <= 0 ? undefined : arguments[0]) instanceof Date || arguments.length > 1) {\n    return gstimeInternal(jday.apply(void 0, arguments));\n  }\n\n  return gstimeInternal.apply(void 0, arguments);\n}\n\n/*-----------------------------------------------------------------------------\n *\n *                           procedure initl\n *\n *  this procedure initializes the sgp4 propagator. all the initialization is\n *    consolidated here instead of having multiple loops inside other routines.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    ecco        - eccentricity                           0.0 - 1.0\n *    epoch       - epoch time in days from jan 0, 1950. 0 hr\n *    inclo       - inclination of satellite\n *    no          - mean motion of satellite\n *    satn        - satellite number\n *\n *  outputs       :\n *    ainv        - 1.0 / a\n *    ao          - semi major axis\n *    con41       -\n *    con42       - 1.0 - 5.0 cos(i)\n *    cosio       - cosine of inclination\n *    cosio2      - cosio squared\n *    eccsq       - eccentricity squared\n *    method      - flag for deep space                    'd', 'n'\n *    omeosq      - 1.0 - ecco * ecco\n *    posq        - semi-parameter squared\n *    rp          - radius of perigee\n *    rteosq      - square root of (1.0 - ecco*ecco)\n *    sinio       - sine of inclination\n *    gsto        - gst at time of observation               rad\n *    no          - mean motion of satellite\n *\n *  locals        :\n *    ak          -\n *    d1          -\n *    del         -\n *    adel        -\n *    po          -\n *\n *  coupling      :\n *    getgravconst\n *    gstime      - find greenwich sidereal time from the julian date\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\nfunction initl(options) {\n  var ecco = options.ecco,\n      epoch = options.epoch,\n      inclo = options.inclo,\n      opsmode = options.opsmode;\n  var no = options.no; // sgp4fix use old way of finding gst\n  // ----------------------- earth constants ---------------------\n  // sgp4fix identify constants and allow alternate values\n  // ------------- calculate auxillary epoch quantities ----------\n\n  var eccsq = ecco * ecco;\n  var omeosq = 1.0 - eccsq;\n  var rteosq = Math.sqrt(omeosq);\n  var cosio = Math.cos(inclo);\n  var cosio2 = cosio * cosio; // ------------------ un-kozai the mean motion -----------------\n\n  var ak = Math.pow(xke / no, x2o3);\n  var d1 = 0.75 * j2 * (3.0 * cosio2 - 1.0) / (rteosq * omeosq);\n  var delPrime = d1 / (ak * ak);\n  var adel = ak * (1.0 - delPrime * delPrime - delPrime * (1.0 / 3.0 + 134.0 * delPrime * delPrime / 81.0));\n  delPrime = d1 / (adel * adel);\n  no /= 1.0 + delPrime;\n  var ao = Math.pow(xke / no, x2o3);\n  var sinio = Math.sin(inclo);\n  var po = ao * omeosq;\n  var con42 = 1.0 - 5.0 * cosio2;\n  var con41 = -con42 - cosio2 - cosio2;\n  var ainv = 1.0 / ao;\n  var posq = po * po;\n  var rp = ao * (1.0 - ecco);\n  var method = 'n'; //  sgp4fix modern approach to finding sidereal time\n\n  var gsto;\n\n  if (opsmode === 'a') {\n    //  sgp4fix use old way of finding gst\n    //  count integer number of days from 0 jan 1970\n    var ts70 = epoch - 7305.0;\n    var ds70 = Math.floor(ts70 + 1.0e-8);\n    var tfrac = ts70 - ds70; //  find greenwich location at epoch\n\n    var c1 = 1.72027916940703639e-2;\n    var thgr70 = 1.7321343856509374;\n    var fk5r = 5.07551419432269442e-15;\n    var c1p2p = c1 + twoPi;\n    gsto = (thgr70 + c1 * ds70 + c1p2p * tfrac + ts70 * ts70 * fk5r) % twoPi;\n\n    if (gsto < 0.0) {\n      gsto += twoPi;\n    }\n  } else {\n    gsto = gstime(epoch + 2433281.5);\n  }\n\n  return {\n    no: no,\n    method: method,\n    ainv: ainv,\n    ao: ao,\n    con41: con41,\n    con42: con42,\n    cosio: cosio,\n    cosio2: cosio2,\n    eccsq: eccsq,\n    omeosq: omeosq,\n    posq: posq,\n    rp: rp,\n    rteosq: rteosq,\n    sinio: sinio,\n    gsto: gsto\n  };\n}\n\n/*-----------------------------------------------------------------------------\n *\n *                           procedure dspace\n *\n *  this procedure provides deep space contributions to mean elements for\n *    perturbing third body.  these effects have been averaged over one\n *    revolution of the sun and moon.  for earth resonance effects, the\n *    effects have been averaged over no revolutions of the satellite.\n *    (mean motion)\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    d2201, d2211, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433 -\n *    dedt        -\n *    del1, del2, del3  -\n *    didt        -\n *    dmdt        -\n *    dnodt       -\n *    domdt       -\n *    irez        - flag for resonance           0-none, 1-one day, 2-half day\n *    argpo       - argument of perigee\n *    argpdot     - argument of perigee dot (rate)\n *    t           - time\n *    tc          -\n *    gsto        - gst\n *    xfact       -\n *    xlamo       -\n *    no          - mean motion\n *    atime       -\n *    em          - eccentricity\n *    ft          -\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    xli         -\n *    mm          - mean anomaly\n *    xni         - mean motion\n *    nodem       - right ascension of ascending node\n *\n *  outputs       :\n *    atime       -\n *    em          - eccentricity\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    xli         -\n *    mm          - mean anomaly\n *    xni         -\n *    nodem       - right ascension of ascending node\n *    dndt        -\n *    nm          - mean motion\n *\n *  locals        :\n *    delt        -\n *    ft          -\n *    theta       -\n *    x2li        -\n *    x2omi       -\n *    xl          -\n *    xldot       -\n *    xnddt       -\n *    xndt        -\n *    xomi        -\n *\n *  coupling      :\n *    none        -\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\nfunction dspace(options) {\n  var irez = options.irez,\n      d2201 = options.d2201,\n      d2211 = options.d2211,\n      d3210 = options.d3210,\n      d3222 = options.d3222,\n      d4410 = options.d4410,\n      d4422 = options.d4422,\n      d5220 = options.d5220,\n      d5232 = options.d5232,\n      d5421 = options.d5421,\n      d5433 = options.d5433,\n      dedt = options.dedt,\n      del1 = options.del1,\n      del2 = options.del2,\n      del3 = options.del3,\n      didt = options.didt,\n      dmdt = options.dmdt,\n      dnodt = options.dnodt,\n      domdt = options.domdt,\n      argpo = options.argpo,\n      argpdot = options.argpdot,\n      t = options.t,\n      tc = options.tc,\n      gsto = options.gsto,\n      xfact = options.xfact,\n      xlamo = options.xlamo,\n      no = options.no;\n  var atime = options.atime,\n      em = options.em,\n      argpm = options.argpm,\n      inclm = options.inclm,\n      xli = options.xli,\n      mm = options.mm,\n      xni = options.xni,\n      nodem = options.nodem,\n      nm = options.nm;\n  var fasx2 = 0.13130908;\n  var fasx4 = 2.8843198;\n  var fasx6 = 0.37448087;\n  var g22 = 5.7686396;\n  var g32 = 0.95240898;\n  var g44 = 1.8014998;\n  var g52 = 1.0508330;\n  var g54 = 4.4108898;\n  var rptim = 4.37526908801129966e-3; // equates to 7.29211514668855e-5 rad/sec\n\n  var stepp = 720.0;\n  var stepn = -720.0;\n  var step2 = 259200.0;\n  var delt;\n  var x2li;\n  var x2omi;\n  var xl;\n  var xldot;\n  var xnddt;\n  var xndt;\n  var xomi;\n  var dndt = 0.0;\n  var ft = 0.0; //  ----------- calculate deep space resonance effects -----------\n\n  var theta = (gsto + tc * rptim) % twoPi;\n  em += dedt * t;\n  inclm += didt * t;\n  argpm += domdt * t;\n  nodem += dnodt * t;\n  mm += dmdt * t; // sgp4fix for negative inclinations\n  // the following if statement should be commented out\n  // if (inclm < 0.0)\n  // {\n  //   inclm = -inclm;\n  //   argpm = argpm - pi;\n  //   nodem = nodem + pi;\n  // }\n\n  /* - update resonances : numerical (euler-maclaurin) integration - */\n\n  /* ------------------------- epoch restart ----------------------  */\n  //   sgp4fix for propagator problems\n  //   the following integration works for negative time steps and periods\n  //   the specific changes are unknown because the original code was so convoluted\n  // sgp4fix take out atime = 0.0 and fix for faster operation\n\n  if (irez !== 0) {\n    //  sgp4fix streamline check\n    if (atime === 0.0 || t * atime <= 0.0 || Math.abs(t) < Math.abs(atime)) {\n      atime = 0.0;\n      xni = no;\n      xli = xlamo;\n    } // sgp4fix move check outside loop\n\n\n    if (t > 0.0) {\n      delt = stepp;\n    } else {\n      delt = stepn;\n    }\n\n    var iretn = 381; // added for do loop\n\n    while (iretn === 381) {\n      //  ------------------- dot terms calculated -------------\n      //  ----------- near - synchronous resonance terms -------\n      if (irez !== 2) {\n        xndt = del1 * Math.sin(xli - fasx2) + del2 * Math.sin(2.0 * (xli - fasx4)) + del3 * Math.sin(3.0 * (xli - fasx6));\n        xldot = xni + xfact;\n        xnddt = del1 * Math.cos(xli - fasx2) + 2.0 * del2 * Math.cos(2.0 * (xli - fasx4)) + 3.0 * del3 * Math.cos(3.0 * (xli - fasx6));\n        xnddt *= xldot;\n      } else {\n        // --------- near - half-day resonance terms --------\n        xomi = argpo + argpdot * atime;\n        x2omi = xomi + xomi;\n        x2li = xli + xli;\n        xndt = d2201 * Math.sin(x2omi + xli - g22) + d2211 * Math.sin(xli - g22) + d3210 * Math.sin(xomi + xli - g32) + d3222 * Math.sin(-xomi + xli - g32) + d4410 * Math.sin(x2omi + x2li - g44) + d4422 * Math.sin(x2li - g44) + d5220 * Math.sin(xomi + xli - g52) + d5232 * Math.sin(-xomi + xli - g52) + d5421 * Math.sin(xomi + x2li - g54) + d5433 * Math.sin(-xomi + x2li - g54);\n        xldot = xni + xfact;\n        xnddt = d2201 * Math.cos(x2omi + xli - g22) + d2211 * Math.cos(xli - g22) + d3210 * Math.cos(xomi + xli - g32) + d3222 * Math.cos(-xomi + xli - g32) + d5220 * Math.cos(xomi + xli - g52) + d5232 * Math.cos(-xomi + xli - g52) + 2.0 * d4410 * Math.cos(x2omi + x2li - g44) + d4422 * Math.cos(x2li - g44) + d5421 * Math.cos(xomi + x2li - g54) + d5433 * Math.cos(-xomi + x2li - g54);\n        xnddt *= xldot;\n      } //  ----------------------- integrator -------------------\n      //  sgp4fix move end checks to end of routine\n\n\n      if (Math.abs(t - atime) >= stepp) {\n        iretn = 381;\n      } else {\n        ft = t - atime;\n        iretn = 0;\n      }\n\n      if (iretn === 381) {\n        xli += xldot * delt + xndt * step2;\n        xni += xndt * delt + xnddt * step2;\n        atime += delt;\n      }\n    }\n\n    nm = xni + xndt * ft + xnddt * ft * ft * 0.5;\n    xl = xli + xldot * ft + xndt * ft * ft * 0.5;\n\n    if (irez !== 1) {\n      mm = xl - 2.0 * nodem + 2.0 * theta;\n      dndt = nm - no;\n    } else {\n      mm = xl - nodem - argpm + theta;\n      dndt = nm - no;\n    }\n\n    nm = no + dndt;\n  }\n\n  return {\n    atime: atime,\n    em: em,\n    argpm: argpm,\n    inclm: inclm,\n    xli: xli,\n    mm: mm,\n    xni: xni,\n    nodem: nodem,\n    dndt: dndt,\n    nm: nm\n  };\n}\n\n/*----------------------------------------------------------------------------\n *\n *                             procedure sgp4\n *\n *  this procedure is the sgp4 prediction model from space command. this is an\n *    updated and combined version of sgp4 and sdp4, which were originally\n *    published separately in spacetrack report //3. this version follows the\n *    methodology from the aiaa paper (2006) describing the history and\n *    development of the code.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    satrec  - initialised structure from sgp4init() call.\n *    tsince  - time since epoch (minutes)\n *\n *  outputs       :\n *    r           - position vector                     km\n *    v           - velocity                            km/sec\n *  return code - non-zero on error.\n *                   1 - mean elements, ecc >= 1.0 or ecc < -0.001 or a < 0.95 er\n *                   2 - mean motion less than 0.0\n *                   3 - pert elements, ecc < 0.0  or  ecc > 1.0\n *                   4 - semi-latus rectum < 0.0\n *                   5 - epoch elements are sub-orbital\n *                   6 - satellite has decayed\n *\n *  locals        :\n *    am          -\n *    axnl, aynl        -\n *    betal       -\n *    cosim   , sinim   , cosomm  , sinomm  , cnod    , snod    , cos2u   ,\n *    sin2u   , coseo1  , sineo1  , cosi    , sini    , cosip   , sinip   ,\n *    cosisq  , cossu   , sinsu   , cosu    , sinu\n *    delm        -\n *    delomg      -\n *    dndt        -\n *    eccm        -\n *    emsq        -\n *    ecose       -\n *    el2         -\n *    eo1         -\n *    eccp        -\n *    esine       -\n *    argpm       -\n *    argpp       -\n *    omgadf      -\n *    pl          -\n *    r           -\n *    rtemsq      -\n *    rdotl       -\n *    rl          -\n *    rvdot       -\n *    rvdotl      -\n *    su          -\n *    t2  , t3   , t4    , tc\n *    tem5, temp , temp1 , temp2  , tempa  , tempe  , templ\n *    u   , ux   , uy    , uz     , vx     , vy     , vz\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    nm          - mean motion\n *    nodem       - right asc of ascending node\n *    xinc        -\n *    xincp       -\n *    xl          -\n *    xlm         -\n *    mp          -\n *    xmdf        -\n *    xmx         -\n *    xmy         -\n *    nodedf      -\n *    xnode       -\n *    nodep       -\n *    np          -\n *\n *  coupling      :\n *    getgravconst-\n *    dpper\n *    dspace\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report //3 1980\n *    hoots, norad spacetrack report //6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\nfunction sgp4(satrec, tsince) {\n  /* eslint-disable no-param-reassign */\n  var coseo1;\n  var sineo1;\n  var cosip;\n  var sinip;\n  var cosisq;\n  var delm;\n  var delomg;\n  var eo1;\n  var argpm;\n  var argpp;\n  var su;\n  var t3;\n  var t4;\n  var tc;\n  var tem5;\n  var temp;\n  var tempa;\n  var tempe;\n  var templ;\n  var inclm;\n  var mm;\n  var nm;\n  var nodem;\n  var xincp;\n  var xlm;\n  var mp;\n  var nodep;\n  /* ------------------ set mathematical constants --------------- */\n  // sgp4fix divisor for divide by zero check on inclination\n  // the old check used 1.0 + cos(pi-1.0e-9), but then compared it to\n  // 1.5 e-12, so the threshold was changed to 1.5e-12 for consistency\n\n  var temp4 = 1.5e-12; // --------------------- clear sgp4 error flag -----------------\n\n  satrec.t = tsince;\n  satrec.error = 0; //  ------- update for secular gravity and atmospheric drag -----\n\n  var xmdf = satrec.mo + satrec.mdot * satrec.t;\n  var argpdf = satrec.argpo + satrec.argpdot * satrec.t;\n  var nodedf = satrec.nodeo + satrec.nodedot * satrec.t;\n  argpm = argpdf;\n  mm = xmdf;\n  var t2 = satrec.t * satrec.t;\n  nodem = nodedf + satrec.nodecf * t2;\n  tempa = 1.0 - satrec.cc1 * satrec.t;\n  tempe = satrec.bstar * satrec.cc4 * satrec.t;\n  templ = satrec.t2cof * t2;\n\n  if (satrec.isimp !== 1) {\n    delomg = satrec.omgcof * satrec.t; //  sgp4fix use mutliply for speed instead of pow\n\n    var delmtemp = 1.0 + satrec.eta * Math.cos(xmdf);\n    delm = satrec.xmcof * (delmtemp * delmtemp * delmtemp - satrec.delmo);\n    temp = delomg + delm;\n    mm = xmdf + temp;\n    argpm = argpdf - temp;\n    t3 = t2 * satrec.t;\n    t4 = t3 * satrec.t;\n    tempa = tempa - satrec.d2 * t2 - satrec.d3 * t3 - satrec.d4 * t4;\n    tempe += satrec.bstar * satrec.cc5 * (Math.sin(mm) - satrec.sinmao);\n    templ = templ + satrec.t3cof * t3 + t4 * (satrec.t4cof + satrec.t * satrec.t5cof);\n  }\n\n  nm = satrec.no;\n  var em = satrec.ecco;\n  inclm = satrec.inclo;\n\n  if (satrec.method === 'd') {\n    tc = satrec.t;\n    var dspaceOptions = {\n      irez: satrec.irez,\n      d2201: satrec.d2201,\n      d2211: satrec.d2211,\n      d3210: satrec.d3210,\n      d3222: satrec.d3222,\n      d4410: satrec.d4410,\n      d4422: satrec.d4422,\n      d5220: satrec.d5220,\n      d5232: satrec.d5232,\n      d5421: satrec.d5421,\n      d5433: satrec.d5433,\n      dedt: satrec.dedt,\n      del1: satrec.del1,\n      del2: satrec.del2,\n      del3: satrec.del3,\n      didt: satrec.didt,\n      dmdt: satrec.dmdt,\n      dnodt: satrec.dnodt,\n      domdt: satrec.domdt,\n      argpo: satrec.argpo,\n      argpdot: satrec.argpdot,\n      t: satrec.t,\n      tc: tc,\n      gsto: satrec.gsto,\n      xfact: satrec.xfact,\n      xlamo: satrec.xlamo,\n      no: satrec.no,\n      atime: satrec.atime,\n      em: em,\n      argpm: argpm,\n      inclm: inclm,\n      xli: satrec.xli,\n      mm: mm,\n      xni: satrec.xni,\n      nodem: nodem,\n      nm: nm\n    };\n    var dspaceResult = dspace(dspaceOptions);\n    em = dspaceResult.em;\n    argpm = dspaceResult.argpm;\n    inclm = dspaceResult.inclm;\n    mm = dspaceResult.mm;\n    nodem = dspaceResult.nodem;\n    nm = dspaceResult.nm;\n  }\n\n  if (nm <= 0.0) {\n    // printf(\"// error nm %f\\n\", nm);\n    satrec.error = 2; // sgp4fix add return\n\n    return [false, false];\n  }\n\n  var am = Math.pow(xke / nm, x2o3) * tempa * tempa;\n  nm = xke / Math.pow(am, 1.5);\n  em -= tempe; // fix tolerance for error recognition\n  // sgp4fix am is fixed from the previous nm check\n\n  if (em >= 1.0 || em < -0.001) {\n    // || (am < 0.95)\n    // printf(\"// error em %f\\n\", em);\n    satrec.error = 1; // sgp4fix to return if there is an error in eccentricity\n\n    return [false, false];\n  } //  sgp4fix fix tolerance to avoid a divide by zero\n\n\n  if (em < 1.0e-6) {\n    em = 1.0e-6;\n  }\n\n  mm += satrec.no * templ;\n  xlm = mm + argpm + nodem;\n  nodem %= twoPi;\n  argpm %= twoPi;\n  xlm %= twoPi;\n  mm = (xlm - argpm - nodem) % twoPi; // ----------------- compute extra mean quantities -------------\n\n  var sinim = Math.sin(inclm);\n  var cosim = Math.cos(inclm); // -------------------- add lunar-solar periodics --------------\n\n  var ep = em;\n  xincp = inclm;\n  argpp = argpm;\n  nodep = nodem;\n  mp = mm;\n  sinip = sinim;\n  cosip = cosim;\n\n  if (satrec.method === 'd') {\n    var dpperParameters = {\n      inclo: satrec.inclo,\n      init: 'n',\n      ep: ep,\n      inclp: xincp,\n      nodep: nodep,\n      argpp: argpp,\n      mp: mp,\n      opsmode: satrec.operationmode\n    };\n    var dpperResult = dpper(satrec, dpperParameters);\n    ep = dpperResult.ep;\n    nodep = dpperResult.nodep;\n    argpp = dpperResult.argpp;\n    mp = dpperResult.mp;\n    xincp = dpperResult.inclp;\n\n    if (xincp < 0.0) {\n      xincp = -xincp;\n      nodep += pi;\n      argpp -= pi;\n    }\n\n    if (ep < 0.0 || ep > 1.0) {\n      //  printf(\"// error ep %f\\n\", ep);\n      satrec.error = 3; //  sgp4fix add return\n\n      return [false, false];\n    }\n  } //  -------------------- long period periodics ------------------\n\n\n  if (satrec.method === 'd') {\n    sinip = Math.sin(xincp);\n    cosip = Math.cos(xincp);\n    satrec.aycof = -0.5 * j3oj2 * sinip; //  sgp4fix for divide by zero for xincp = 180 deg\n\n    if (Math.abs(cosip + 1.0) > 1.5e-12) {\n      satrec.xlcof = -0.25 * j3oj2 * sinip * (3.0 + 5.0 * cosip) / (1.0 + cosip);\n    } else {\n      satrec.xlcof = -0.25 * j3oj2 * sinip * (3.0 + 5.0 * cosip) / temp4;\n    }\n  }\n\n  var axnl = ep * Math.cos(argpp);\n  temp = 1.0 / (am * (1.0 - ep * ep));\n  var aynl = ep * Math.sin(argpp) + temp * satrec.aycof;\n  var xl = mp + argpp + nodep + temp * satrec.xlcof * axnl; // --------------------- solve kepler's equation ---------------\n\n  var u = (xl - nodep) % twoPi;\n  eo1 = u;\n  tem5 = 9999.9;\n  var ktr = 1; //    sgp4fix for kepler iteration\n  //    the following iteration needs better limits on corrections\n\n  while (Math.abs(tem5) >= 1.0e-12 && ktr <= 10) {\n    sineo1 = Math.sin(eo1);\n    coseo1 = Math.cos(eo1);\n    tem5 = 1.0 - coseo1 * axnl - sineo1 * aynl;\n    tem5 = (u - aynl * coseo1 + axnl * sineo1 - eo1) / tem5;\n\n    if (Math.abs(tem5) >= 0.95) {\n      if (tem5 > 0.0) {\n        tem5 = 0.95;\n      } else {\n        tem5 = -0.95;\n      }\n    }\n\n    eo1 += tem5;\n    ktr += 1;\n  } //  ------------- short period preliminary quantities -----------\n\n\n  var ecose = axnl * coseo1 + aynl * sineo1;\n  var esine = axnl * sineo1 - aynl * coseo1;\n  var el2 = axnl * axnl + aynl * aynl;\n  var pl = am * (1.0 - el2);\n\n  if (pl < 0.0) {\n    //  printf(\"// error pl %f\\n\", pl);\n    satrec.error = 4; //  sgp4fix add return\n\n    return [false, false];\n  }\n\n  var rl = am * (1.0 - ecose);\n  var rdotl = Math.sqrt(am) * esine / rl;\n  var rvdotl = Math.sqrt(pl) / rl;\n  var betal = Math.sqrt(1.0 - el2);\n  temp = esine / (1.0 + betal);\n  var sinu = am / rl * (sineo1 - aynl - axnl * temp);\n  var cosu = am / rl * (coseo1 - axnl + aynl * temp);\n  su = Math.atan2(sinu, cosu);\n  var sin2u = (cosu + cosu) * sinu;\n  var cos2u = 1.0 - 2.0 * sinu * sinu;\n  temp = 1.0 / pl;\n  var temp1 = 0.5 * j2 * temp;\n  var temp2 = temp1 * temp; // -------------- update for short period periodics ------------\n\n  if (satrec.method === 'd') {\n    cosisq = cosip * cosip;\n    satrec.con41 = 3.0 * cosisq - 1.0;\n    satrec.x1mth2 = 1.0 - cosisq;\n    satrec.x7thm1 = 7.0 * cosisq - 1.0;\n  }\n\n  var mrt = rl * (1.0 - 1.5 * temp2 * betal * satrec.con41) + 0.5 * temp1 * satrec.x1mth2 * cos2u; // sgp4fix for decaying satellites\n\n  if (mrt < 1.0) {\n    // printf(\"// decay condition %11.6f \\n\",mrt);\n    satrec.error = 6;\n    return {\n      position: false,\n      velocity: false\n    };\n  }\n\n  su -= 0.25 * temp2 * satrec.x7thm1 * sin2u;\n  var xnode = nodep + 1.5 * temp2 * cosip * sin2u;\n  var xinc = xincp + 1.5 * temp2 * cosip * sinip * cos2u;\n  var mvt = rdotl - nm * temp1 * satrec.x1mth2 * sin2u / xke;\n  var rvdot = rvdotl + nm * temp1 * (satrec.x1mth2 * cos2u + 1.5 * satrec.con41) / xke; // --------------------- orientation vectors -------------------\n\n  var sinsu = Math.sin(su);\n  var cossu = Math.cos(su);\n  var snod = Math.sin(xnode);\n  var cnod = Math.cos(xnode);\n  var sini = Math.sin(xinc);\n  var cosi = Math.cos(xinc);\n  var xmx = -snod * cosi;\n  var xmy = cnod * cosi;\n  var ux = xmx * sinsu + cnod * cossu;\n  var uy = xmy * sinsu + snod * cossu;\n  var uz = sini * sinsu;\n  var vx = xmx * cossu - cnod * sinsu;\n  var vy = xmy * cossu - snod * sinsu;\n  var vz = sini * cossu; // --------- position and velocity (in km and km/sec) ----------\n\n  var r = {\n    x: mrt * ux * earthRadius,\n    y: mrt * uy * earthRadius,\n    z: mrt * uz * earthRadius\n  };\n  var v = {\n    x: (mvt * ux + rvdot * vx) * vkmpersec,\n    y: (mvt * uy + rvdot * vy) * vkmpersec,\n    z: (mvt * uz + rvdot * vz) * vkmpersec\n  };\n  return {\n    position: r,\n    velocity: v\n  };\n  /* eslint-enable no-param-reassign */\n}\n\n/*-----------------------------------------------------------------------------\n *\n *                             procedure sgp4init\n *\n *  this procedure initializes variables for sgp4.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    opsmode     - mode of operation afspc or improved 'a', 'i'\n *    satn        - satellite number\n *    bstar       - sgp4 type drag coefficient              kg/m2er\n *    ecco        - eccentricity\n *    epoch       - epoch time in days from jan 0, 1950. 0 hr\n *    argpo       - argument of perigee (output if ds)\n *    inclo       - inclination\n *    mo          - mean anomaly (output if ds)\n *    no          - mean motion\n *    nodeo       - right ascension of ascending node\n *\n *  outputs       :\n *    rec      - common values for subsequent calls\n *    return code - non-zero on error.\n *                   1 - mean elements, ecc >= 1.0 or ecc < -0.001 or a < 0.95 er\n *                   2 - mean motion less than 0.0\n *                   3 - pert elements, ecc < 0.0  or  ecc > 1.0\n *                   4 - semi-latus rectum < 0.0\n *                   5 - epoch elements are sub-orbital\n *                   6 - satellite has decayed\n *\n *  locals        :\n *    cnodm  , snodm  , cosim  , sinim  , cosomm , sinomm\n *    cc1sq  , cc2    , cc3\n *    coef   , coef1\n *    cosio4      -\n *    day         -\n *    dndt        -\n *    em          - eccentricity\n *    emsq        - eccentricity squared\n *    eeta        -\n *    etasq       -\n *    gam         -\n *    argpm       - argument of perigee\n *    nodem       -\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    nm          - mean motion\n *    perige      - perigee\n *    pinvsq      -\n *    psisq       -\n *    qzms24      -\n *    rtemsq      -\n *    s1, s2, s3, s4, s5, s6, s7          -\n *    sfour       -\n *    ss1, ss2, ss3, ss4, ss5, ss6, ss7         -\n *    sz1, sz2, sz3\n *    sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33        -\n *    tc          -\n *    temp        -\n *    temp1, temp2, temp3       -\n *    tsi         -\n *    xpidot      -\n *    xhdot1      -\n *    z1, z2, z3          -\n *    z11, z12, z13, z21, z22, z23, z31, z32, z33         -\n *\n *  coupling      :\n *    getgravconst-\n *    initl       -\n *    dscom       -\n *    dpper       -\n *    dsinit      -\n *    sgp4        -\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\nfunction sgp4init(satrec, options) {\n  /* eslint-disable no-param-reassign */\n  var opsmode = options.opsmode,\n      satn = options.satn,\n      epoch = options.epoch,\n      xbstar = options.xbstar,\n      xecco = options.xecco,\n      xargpo = options.xargpo,\n      xinclo = options.xinclo,\n      xmo = options.xmo,\n      xno = options.xno,\n      xnodeo = options.xnodeo;\n  var cosim;\n  var sinim;\n  var cc1sq;\n  var cc2;\n  var cc3;\n  var coef;\n  var coef1;\n  var cosio4;\n  var em;\n  var emsq;\n  var eeta;\n  var etasq;\n  var argpm;\n  var nodem;\n  var inclm;\n  var mm;\n  var nm;\n  var perige;\n  var pinvsq;\n  var psisq;\n  var qzms24;\n  var s1;\n  var s2;\n  var s3;\n  var s4;\n  var s5;\n  var sfour;\n  var ss1;\n  var ss2;\n  var ss3;\n  var ss4;\n  var ss5;\n  var sz1;\n  var sz3;\n  var sz11;\n  var sz13;\n  var sz21;\n  var sz23;\n  var sz31;\n  var sz33;\n  var tc;\n  var temp;\n  var temp1;\n  var temp2;\n  var temp3;\n  var tsi;\n  var xpidot;\n  var xhdot1;\n  var z1;\n  var z3;\n  var z11;\n  var z13;\n  var z21;\n  var z23;\n  var z31;\n  var z33;\n  /* ------------------------ initialization --------------------- */\n  // sgp4fix divisor for divide by zero check on inclination\n  // the old check used 1.0 + Math.cos(pi-1.0e-9), but then compared it to\n  // 1.5 e-12, so the threshold was changed to 1.5e-12 for consistency\n\n  var temp4 = 1.5e-12; // ----------- set all near earth variables to zero ------------\n\n  satrec.isimp = 0;\n  satrec.method = 'n';\n  satrec.aycof = 0.0;\n  satrec.con41 = 0.0;\n  satrec.cc1 = 0.0;\n  satrec.cc4 = 0.0;\n  satrec.cc5 = 0.0;\n  satrec.d2 = 0.0;\n  satrec.d3 = 0.0;\n  satrec.d4 = 0.0;\n  satrec.delmo = 0.0;\n  satrec.eta = 0.0;\n  satrec.argpdot = 0.0;\n  satrec.omgcof = 0.0;\n  satrec.sinmao = 0.0;\n  satrec.t = 0.0;\n  satrec.t2cof = 0.0;\n  satrec.t3cof = 0.0;\n  satrec.t4cof = 0.0;\n  satrec.t5cof = 0.0;\n  satrec.x1mth2 = 0.0;\n  satrec.x7thm1 = 0.0;\n  satrec.mdot = 0.0;\n  satrec.nodedot = 0.0;\n  satrec.xlcof = 0.0;\n  satrec.xmcof = 0.0;\n  satrec.nodecf = 0.0; // ----------- set all deep space variables to zero ------------\n\n  satrec.irez = 0;\n  satrec.d2201 = 0.0;\n  satrec.d2211 = 0.0;\n  satrec.d3210 = 0.0;\n  satrec.d3222 = 0.0;\n  satrec.d4410 = 0.0;\n  satrec.d4422 = 0.0;\n  satrec.d5220 = 0.0;\n  satrec.d5232 = 0.0;\n  satrec.d5421 = 0.0;\n  satrec.d5433 = 0.0;\n  satrec.dedt = 0.0;\n  satrec.del1 = 0.0;\n  satrec.del2 = 0.0;\n  satrec.del3 = 0.0;\n  satrec.didt = 0.0;\n  satrec.dmdt = 0.0;\n  satrec.dnodt = 0.0;\n  satrec.domdt = 0.0;\n  satrec.e3 = 0.0;\n  satrec.ee2 = 0.0;\n  satrec.peo = 0.0;\n  satrec.pgho = 0.0;\n  satrec.pho = 0.0;\n  satrec.pinco = 0.0;\n  satrec.plo = 0.0;\n  satrec.se2 = 0.0;\n  satrec.se3 = 0.0;\n  satrec.sgh2 = 0.0;\n  satrec.sgh3 = 0.0;\n  satrec.sgh4 = 0.0;\n  satrec.sh2 = 0.0;\n  satrec.sh3 = 0.0;\n  satrec.si2 = 0.0;\n  satrec.si3 = 0.0;\n  satrec.sl2 = 0.0;\n  satrec.sl3 = 0.0;\n  satrec.sl4 = 0.0;\n  satrec.gsto = 0.0;\n  satrec.xfact = 0.0;\n  satrec.xgh2 = 0.0;\n  satrec.xgh3 = 0.0;\n  satrec.xgh4 = 0.0;\n  satrec.xh2 = 0.0;\n  satrec.xh3 = 0.0;\n  satrec.xi2 = 0.0;\n  satrec.xi3 = 0.0;\n  satrec.xl2 = 0.0;\n  satrec.xl3 = 0.0;\n  satrec.xl4 = 0.0;\n  satrec.xlamo = 0.0;\n  satrec.zmol = 0.0;\n  satrec.zmos = 0.0;\n  satrec.atime = 0.0;\n  satrec.xli = 0.0;\n  satrec.xni = 0.0; // sgp4fix - note the following variables are also passed directly via satrec.\n  // it is possible to streamline the sgp4init call by deleting the \"x\"\n  // variables, but the user would need to set the satrec.* values first. we\n  // include the additional assignments in case twoline2rv is not used.\n\n  satrec.bstar = xbstar;\n  satrec.ecco = xecco;\n  satrec.argpo = xargpo;\n  satrec.inclo = xinclo;\n  satrec.mo = xmo;\n  satrec.no = xno;\n  satrec.nodeo = xnodeo; //  sgp4fix add opsmode\n\n  satrec.operationmode = opsmode; // ------------------------ earth constants -----------------------\n  // sgp4fix identify constants and allow alternate values\n\n  var ss = 78.0 / earthRadius + 1.0; // sgp4fix use multiply for speed instead of pow\n\n  var qzms2ttemp = (120.0 - 78.0) / earthRadius;\n  var qzms2t = qzms2ttemp * qzms2ttemp * qzms2ttemp * qzms2ttemp;\n  satrec.init = 'y';\n  satrec.t = 0.0;\n  var initlOptions = {\n    satn: satn,\n    ecco: satrec.ecco,\n    epoch: epoch,\n    inclo: satrec.inclo,\n    no: satrec.no,\n    method: satrec.method,\n    opsmode: satrec.operationmode\n  };\n  var initlResult = initl(initlOptions);\n  var ao = initlResult.ao,\n      con42 = initlResult.con42,\n      cosio = initlResult.cosio,\n      cosio2 = initlResult.cosio2,\n      eccsq = initlResult.eccsq,\n      omeosq = initlResult.omeosq,\n      posq = initlResult.posq,\n      rp = initlResult.rp,\n      rteosq = initlResult.rteosq,\n      sinio = initlResult.sinio;\n  satrec.no = initlResult.no;\n  satrec.con41 = initlResult.con41;\n  satrec.gsto = initlResult.gsto;\n  satrec.error = 0; // sgp4fix remove this check as it is unnecessary\n  // the mrt check in sgp4 handles decaying satellite cases even if the starting\n  // condition is below the surface of te earth\n  // if (rp < 1.0)\n  // {\n  //   printf(\"// *** satn%d epoch elts sub-orbital ***\\n\", satn);\n  //   satrec.error = 5;\n  // }\n\n  if (omeosq >= 0.0 || satrec.no >= 0.0) {\n    satrec.isimp = 0;\n\n    if (rp < 220.0 / earthRadius + 1.0) {\n      satrec.isimp = 1;\n    }\n\n    sfour = ss;\n    qzms24 = qzms2t;\n    perige = (rp - 1.0) * earthRadius; // - for perigees below 156 km, s and qoms2t are altered -\n\n    if (perige < 156.0) {\n      sfour = perige - 78.0;\n\n      if (perige < 98.0) {\n        sfour = 20.0;\n      } // sgp4fix use multiply for speed instead of pow\n\n\n      var qzms24temp = (120.0 - sfour) / earthRadius;\n      qzms24 = qzms24temp * qzms24temp * qzms24temp * qzms24temp;\n      sfour = sfour / earthRadius + 1.0;\n    }\n\n    pinvsq = 1.0 / posq;\n    tsi = 1.0 / (ao - sfour);\n    satrec.eta = ao * satrec.ecco * tsi;\n    etasq = satrec.eta * satrec.eta;\n    eeta = satrec.ecco * satrec.eta;\n    psisq = Math.abs(1.0 - etasq);\n    coef = qzms24 * Math.pow(tsi, 4.0);\n    coef1 = coef / Math.pow(psisq, 3.5);\n    cc2 = coef1 * satrec.no * (ao * (1.0 + 1.5 * etasq + eeta * (4.0 + etasq)) + 0.375 * j2 * tsi / psisq * satrec.con41 * (8.0 + 3.0 * etasq * (8.0 + etasq)));\n    satrec.cc1 = satrec.bstar * cc2;\n    cc3 = 0.0;\n\n    if (satrec.ecco > 1.0e-4) {\n      cc3 = -2.0 * coef * tsi * j3oj2 * satrec.no * sinio / satrec.ecco;\n    }\n\n    satrec.x1mth2 = 1.0 - cosio2;\n    satrec.cc4 = 2.0 * satrec.no * coef1 * ao * omeosq * (satrec.eta * (2.0 + 0.5 * etasq) + satrec.ecco * (0.5 + 2.0 * etasq) - j2 * tsi / (ao * psisq) * (-3.0 * satrec.con41 * (1.0 - 2.0 * eeta + etasq * (1.5 - 0.5 * eeta)) + 0.75 * satrec.x1mth2 * (2.0 * etasq - eeta * (1.0 + etasq)) * Math.cos(2.0 * satrec.argpo)));\n    satrec.cc5 = 2.0 * coef1 * ao * omeosq * (1.0 + 2.75 * (etasq + eeta) + eeta * etasq);\n    cosio4 = cosio2 * cosio2;\n    temp1 = 1.5 * j2 * pinvsq * satrec.no;\n    temp2 = 0.5 * temp1 * j2 * pinvsq;\n    temp3 = -0.46875 * j4 * pinvsq * pinvsq * satrec.no;\n    satrec.mdot = satrec.no + 0.5 * temp1 * rteosq * satrec.con41 + 0.0625 * temp2 * rteosq * (13.0 - 78.0 * cosio2 + 137.0 * cosio4);\n    satrec.argpdot = -0.5 * temp1 * con42 + 0.0625 * temp2 * (7.0 - 114.0 * cosio2 + 395.0 * cosio4) + temp3 * (3.0 - 36.0 * cosio2 + 49.0 * cosio4);\n    xhdot1 = -temp1 * cosio;\n    satrec.nodedot = xhdot1 + (0.5 * temp2 * (4.0 - 19.0 * cosio2) + 2.0 * temp3 * (3.0 - 7.0 * cosio2)) * cosio;\n    xpidot = satrec.argpdot + satrec.nodedot;\n    satrec.omgcof = satrec.bstar * cc3 * Math.cos(satrec.argpo);\n    satrec.xmcof = 0.0;\n\n    if (satrec.ecco > 1.0e-4) {\n      satrec.xmcof = -x2o3 * coef * satrec.bstar / eeta;\n    }\n\n    satrec.nodecf = 3.5 * omeosq * xhdot1 * satrec.cc1;\n    satrec.t2cof = 1.5 * satrec.cc1; // sgp4fix for divide by zero with xinco = 180 deg\n\n    if (Math.abs(cosio + 1.0) > 1.5e-12) {\n      satrec.xlcof = -0.25 * j3oj2 * sinio * (3.0 + 5.0 * cosio) / (1.0 + cosio);\n    } else {\n      satrec.xlcof = -0.25 * j3oj2 * sinio * (3.0 + 5.0 * cosio) / temp4;\n    }\n\n    satrec.aycof = -0.5 * j3oj2 * sinio; // sgp4fix use multiply for speed instead of pow\n\n    var delmotemp = 1.0 + satrec.eta * Math.cos(satrec.mo);\n    satrec.delmo = delmotemp * delmotemp * delmotemp;\n    satrec.sinmao = Math.sin(satrec.mo);\n    satrec.x7thm1 = 7.0 * cosio2 - 1.0; // --------------- deep space initialization -------------\n\n    if (2 * pi / satrec.no >= 225.0) {\n      satrec.method = 'd';\n      satrec.isimp = 1;\n      tc = 0.0;\n      inclm = satrec.inclo;\n      var dscomOptions = {\n        epoch: epoch,\n        ep: satrec.ecco,\n        argpp: satrec.argpo,\n        tc: tc,\n        inclp: satrec.inclo,\n        nodep: satrec.nodeo,\n        np: satrec.no,\n        e3: satrec.e3,\n        ee2: satrec.ee2,\n        peo: satrec.peo,\n        pgho: satrec.pgho,\n        pho: satrec.pho,\n        pinco: satrec.pinco,\n        plo: satrec.plo,\n        se2: satrec.se2,\n        se3: satrec.se3,\n        sgh2: satrec.sgh2,\n        sgh3: satrec.sgh3,\n        sgh4: satrec.sgh4,\n        sh2: satrec.sh2,\n        sh3: satrec.sh3,\n        si2: satrec.si2,\n        si3: satrec.si3,\n        sl2: satrec.sl2,\n        sl3: satrec.sl3,\n        sl4: satrec.sl4,\n        xgh2: satrec.xgh2,\n        xgh3: satrec.xgh3,\n        xgh4: satrec.xgh4,\n        xh2: satrec.xh2,\n        xh3: satrec.xh3,\n        xi2: satrec.xi2,\n        xi3: satrec.xi3,\n        xl2: satrec.xl2,\n        xl3: satrec.xl3,\n        xl4: satrec.xl4,\n        zmol: satrec.zmol,\n        zmos: satrec.zmos\n      };\n      var dscomResult = dscom(dscomOptions);\n      satrec.e3 = dscomResult.e3;\n      satrec.ee2 = dscomResult.ee2;\n      satrec.peo = dscomResult.peo;\n      satrec.pgho = dscomResult.pgho;\n      satrec.pho = dscomResult.pho;\n      satrec.pinco = dscomResult.pinco;\n      satrec.plo = dscomResult.plo;\n      satrec.se2 = dscomResult.se2;\n      satrec.se3 = dscomResult.se3;\n      satrec.sgh2 = dscomResult.sgh2;\n      satrec.sgh3 = dscomResult.sgh3;\n      satrec.sgh4 = dscomResult.sgh4;\n      satrec.sh2 = dscomResult.sh2;\n      satrec.sh3 = dscomResult.sh3;\n      satrec.si2 = dscomResult.si2;\n      satrec.si3 = dscomResult.si3;\n      satrec.sl2 = dscomResult.sl2;\n      satrec.sl3 = dscomResult.sl3;\n      satrec.sl4 = dscomResult.sl4;\n      sinim = dscomResult.sinim;\n      cosim = dscomResult.cosim;\n      em = dscomResult.em;\n      emsq = dscomResult.emsq;\n      s1 = dscomResult.s1;\n      s2 = dscomResult.s2;\n      s3 = dscomResult.s3;\n      s4 = dscomResult.s4;\n      s5 = dscomResult.s5;\n      ss1 = dscomResult.ss1;\n      ss2 = dscomResult.ss2;\n      ss3 = dscomResult.ss3;\n      ss4 = dscomResult.ss4;\n      ss5 = dscomResult.ss5;\n      sz1 = dscomResult.sz1;\n      sz3 = dscomResult.sz3;\n      sz11 = dscomResult.sz11;\n      sz13 = dscomResult.sz13;\n      sz21 = dscomResult.sz21;\n      sz23 = dscomResult.sz23;\n      sz31 = dscomResult.sz31;\n      sz33 = dscomResult.sz33;\n      satrec.xgh2 = dscomResult.xgh2;\n      satrec.xgh3 = dscomResult.xgh3;\n      satrec.xgh4 = dscomResult.xgh4;\n      satrec.xh2 = dscomResult.xh2;\n      satrec.xh3 = dscomResult.xh3;\n      satrec.xi2 = dscomResult.xi2;\n      satrec.xi3 = dscomResult.xi3;\n      satrec.xl2 = dscomResult.xl2;\n      satrec.xl3 = dscomResult.xl3;\n      satrec.xl4 = dscomResult.xl4;\n      satrec.zmol = dscomResult.zmol;\n      satrec.zmos = dscomResult.zmos;\n      nm = dscomResult.nm;\n      z1 = dscomResult.z1;\n      z3 = dscomResult.z3;\n      z11 = dscomResult.z11;\n      z13 = dscomResult.z13;\n      z21 = dscomResult.z21;\n      z23 = dscomResult.z23;\n      z31 = dscomResult.z31;\n      z33 = dscomResult.z33;\n      var dpperOptions = {\n        inclo: inclm,\n        init: satrec.init,\n        ep: satrec.ecco,\n        inclp: satrec.inclo,\n        nodep: satrec.nodeo,\n        argpp: satrec.argpo,\n        mp: satrec.mo,\n        opsmode: satrec.operationmode\n      };\n      var dpperResult = dpper(satrec, dpperOptions);\n      satrec.ecco = dpperResult.ep;\n      satrec.inclo = dpperResult.inclp;\n      satrec.nodeo = dpperResult.nodep;\n      satrec.argpo = dpperResult.argpp;\n      satrec.mo = dpperResult.mp;\n      argpm = 0.0;\n      nodem = 0.0;\n      mm = 0.0;\n      var dsinitOptions = {\n        cosim: cosim,\n        emsq: emsq,\n        argpo: satrec.argpo,\n        s1: s1,\n        s2: s2,\n        s3: s3,\n        s4: s4,\n        s5: s5,\n        sinim: sinim,\n        ss1: ss1,\n        ss2: ss2,\n        ss3: ss3,\n        ss4: ss4,\n        ss5: ss5,\n        sz1: sz1,\n        sz3: sz3,\n        sz11: sz11,\n        sz13: sz13,\n        sz21: sz21,\n        sz23: sz23,\n        sz31: sz31,\n        sz33: sz33,\n        t: satrec.t,\n        tc: tc,\n        gsto: satrec.gsto,\n        mo: satrec.mo,\n        mdot: satrec.mdot,\n        no: satrec.no,\n        nodeo: satrec.nodeo,\n        nodedot: satrec.nodedot,\n        xpidot: xpidot,\n        z1: z1,\n        z3: z3,\n        z11: z11,\n        z13: z13,\n        z21: z21,\n        z23: z23,\n        z31: z31,\n        z33: z33,\n        ecco: satrec.ecco,\n        eccsq: eccsq,\n        em: em,\n        argpm: argpm,\n        inclm: inclm,\n        mm: mm,\n        nm: nm,\n        nodem: nodem,\n        irez: satrec.irez,\n        atime: satrec.atime,\n        d2201: satrec.d2201,\n        d2211: satrec.d2211,\n        d3210: satrec.d3210,\n        d3222: satrec.d3222,\n        d4410: satrec.d4410,\n        d4422: satrec.d4422,\n        d5220: satrec.d5220,\n        d5232: satrec.d5232,\n        d5421: satrec.d5421,\n        d5433: satrec.d5433,\n        dedt: satrec.dedt,\n        didt: satrec.didt,\n        dmdt: satrec.dmdt,\n        dnodt: satrec.dnodt,\n        domdt: satrec.domdt,\n        del1: satrec.del1,\n        del2: satrec.del2,\n        del3: satrec.del3,\n        xfact: satrec.xfact,\n        xlamo: satrec.xlamo,\n        xli: satrec.xli,\n        xni: satrec.xni\n      };\n      var dsinitResult = dsinit(dsinitOptions);\n      satrec.irez = dsinitResult.irez;\n      satrec.atime = dsinitResult.atime;\n      satrec.d2201 = dsinitResult.d2201;\n      satrec.d2211 = dsinitResult.d2211;\n      satrec.d3210 = dsinitResult.d3210;\n      satrec.d3222 = dsinitResult.d3222;\n      satrec.d4410 = dsinitResult.d4410;\n      satrec.d4422 = dsinitResult.d4422;\n      satrec.d5220 = dsinitResult.d5220;\n      satrec.d5232 = dsinitResult.d5232;\n      satrec.d5421 = dsinitResult.d5421;\n      satrec.d5433 = dsinitResult.d5433;\n      satrec.dedt = dsinitResult.dedt;\n      satrec.didt = dsinitResult.didt;\n      satrec.dmdt = dsinitResult.dmdt;\n      satrec.dnodt = dsinitResult.dnodt;\n      satrec.domdt = dsinitResult.domdt;\n      satrec.del1 = dsinitResult.del1;\n      satrec.del2 = dsinitResult.del2;\n      satrec.del3 = dsinitResult.del3;\n      satrec.xfact = dsinitResult.xfact;\n      satrec.xlamo = dsinitResult.xlamo;\n      satrec.xli = dsinitResult.xli;\n      satrec.xni = dsinitResult.xni;\n    } // ----------- set variables if not deep space -----------\n\n\n    if (satrec.isimp !== 1) {\n      cc1sq = satrec.cc1 * satrec.cc1;\n      satrec.d2 = 4.0 * ao * tsi * cc1sq;\n      temp = satrec.d2 * tsi * satrec.cc1 / 3.0;\n      satrec.d3 = (17.0 * ao + sfour) * temp;\n      satrec.d4 = 0.5 * temp * ao * tsi * (221.0 * ao + 31.0 * sfour) * satrec.cc1;\n      satrec.t3cof = satrec.d2 + 2.0 * cc1sq;\n      satrec.t4cof = 0.25 * (3.0 * satrec.d3 + satrec.cc1 * (12.0 * satrec.d2 + 10.0 * cc1sq));\n      satrec.t5cof = 0.2 * (3.0 * satrec.d4 + 12.0 * satrec.cc1 * satrec.d3 + 6.0 * satrec.d2 * satrec.d2 + 15.0 * cc1sq * (2.0 * satrec.d2 + cc1sq));\n    }\n    /* finally propogate to zero epoch to initialize all others. */\n    // sgp4fix take out check to let satellites process until they are actually below earth surface\n    // if(satrec.error == 0)\n\n  }\n\n  sgp4(satrec, 0, 0);\n  satrec.init = 'n';\n  /* eslint-enable no-param-reassign */\n}\n\n/* -----------------------------------------------------------------------------\n *\n *                           function twoline2rv\n *\n *  this function converts the two line element set character string data to\n *    variables and initializes the sgp4 variables. several intermediate varaibles\n *    and quantities are determined. note that the result is a structure so multiple\n *    satellites can be processed simultaneously without having to reinitialize. the\n *    verification mode is an important option that permits quick checks of any\n *    changes to the underlying technical theory. this option works using a\n *    modified tle file in which the start, stop, and delta time values are\n *    included at the end of the second line of data. this only works with the\n *    verification mode. the catalog mode simply propagates from -1440 to 1440 min\n *    from epoch and is useful when performing entire catalog runs.\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs        :\n *    longstr1    - first line of the tle\n *    longstr2    - second line of the tle\n *    typerun     - type of run                    verification 'v', catalog 'c',\n *                                                 manual 'm'\n *    typeinput   - type of manual input           mfe 'm', epoch 'e', dayofyr 'd'\n *    opsmode     - mode of operation afspc or improved 'a', 'i'\n *    whichconst  - which set of constants to use  72, 84\n *\n *  outputs       :\n *    satrec      - structure containing all the sgp4 satellite information\n *\n *  coupling      :\n *    getgravconst-\n *    days2mdhms  - conversion of days to month, day, hour, minute, second\n *    jday        - convert day month year hour minute second into julian date\n *    sgp4init    - initialize the sgp4 variables\n *\n *  references    :\n *    norad spacetrack report #3\n *    vallado, crawford, hujsak, kelso  2006\n --------------------------------------------------------------------------- */\n\n/**\n * Return a Satellite imported from two lines of TLE data.\n *\n * Provide the two TLE lines as strings `longstr1` and `longstr2`,\n * and select which standard set of gravitational constants you want\n * by providing `gravity_constants`:\n *\n * `sgp4.propagation.wgs72` - Standard WGS 72 model\n * `sgp4.propagation.wgs84` - More recent WGS 84 model\n * `sgp4.propagation.wgs72old` - Legacy support for old SGP4 behavior\n *\n * Normally, computations are made using letious recent improvements\n * to the algorithm.  If you want to turn some of these off and go\n * back into \"afspc\" mode, then set `afspc_mode` to `True`.\n */\n\nfunction twoline2satrec(longstr1, longstr2) {\n  var opsmode = 'i';\n  var xpdotp = 1440.0 / (2.0 * pi); // 229.1831180523293;\n\n  var year = 0;\n  var satrec = {};\n  satrec.error = 0;\n  satrec.satnum = longstr1.substring(2, 7);\n  satrec.epochyr = parseInt(longstr1.substring(18, 20), 10);\n  satrec.epochdays = parseFloat(longstr1.substring(20, 32));\n  satrec.ndot = parseFloat(longstr1.substring(33, 43));\n  satrec.nddot = parseFloat(\".\".concat(parseInt(longstr1.substring(44, 50), 10), \"E\").concat(longstr1.substring(50, 52)));\n  satrec.bstar = parseFloat(\"\".concat(longstr1.substring(53, 54), \".\").concat(parseInt(longstr1.substring(54, 59), 10), \"E\").concat(longstr1.substring(59, 61))); // satrec.satnum = longstr2.substring(2, 7);\n\n  satrec.inclo = parseFloat(longstr2.substring(8, 16));\n  satrec.nodeo = parseFloat(longstr2.substring(17, 25));\n  satrec.ecco = parseFloat(\".\".concat(longstr2.substring(26, 33)));\n  satrec.argpo = parseFloat(longstr2.substring(34, 42));\n  satrec.mo = parseFloat(longstr2.substring(43, 51));\n  satrec.no = parseFloat(longstr2.substring(52, 63)); // ---- find no, ndot, nddot ----\n\n  satrec.no /= xpdotp; //   rad/min\n  // satrec.nddot= satrec.nddot * Math.pow(10.0, nexp);\n  // satrec.bstar= satrec.bstar * Math.pow(10.0, ibexp);\n  // ---- convert to sgp4 units ----\n\n  satrec.a = Math.pow(satrec.no * tumin, -2.0 / 3.0);\n  satrec.ndot /= xpdotp * 1440.0; // ? * minperday\n\n  satrec.nddot /= xpdotp * 1440.0 * 1440; // ---- find standard orbital elements ----\n\n  satrec.inclo *= deg2rad;\n  satrec.nodeo *= deg2rad;\n  satrec.argpo *= deg2rad;\n  satrec.mo *= deg2rad;\n  satrec.alta = satrec.a * (1.0 + satrec.ecco) - 1.0;\n  satrec.altp = satrec.a * (1.0 - satrec.ecco) - 1.0; // ----------------------------------------------------------------\n  // find sgp4epoch time of element set\n  // remember that sgp4 uses units of days from 0 jan 1950 (sgp4epoch)\n  // and minutes from the epoch (time)\n  // ----------------------------------------------------------------\n  // ---------------- temp fix for years from 1957-2056 -------------------\n  // --------- correct fix will occur when year is 4-digit in tle ---------\n\n  if (satrec.epochyr < 57) {\n    year = satrec.epochyr + 2000;\n  } else {\n    year = satrec.epochyr + 1900;\n  }\n\n  var mdhmsResult = days2mdhms(year, satrec.epochdays);\n  var mon = mdhmsResult.mon,\n      day = mdhmsResult.day,\n      hr = mdhmsResult.hr,\n      minute = mdhmsResult.minute,\n      sec = mdhmsResult.sec;\n  satrec.jdsatepoch = jday(year, mon, day, hr, minute, sec); //  ---------------- initialize the orbit at sgp4epoch -------------------\n\n  sgp4init(satrec, {\n    opsmode: opsmode,\n    satn: satrec.satnum,\n    epoch: satrec.jdsatepoch - 2433281.5,\n    xbstar: satrec.bstar,\n    xecco: satrec.ecco,\n    xargpo: satrec.argpo,\n    xinclo: satrec.inclo,\n    xmo: satrec.mo,\n    xno: satrec.no,\n    xnodeo: satrec.nodeo\n  });\n  return satrec;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction propagate() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  // Return a position and velocity vector for a given date and time.\n  var satrec = args[0];\n  var date = Array.prototype.slice.call(args, 1);\n  var j = jday.apply(void 0, _toConsumableArray(date));\n  var m = (j - satrec.jdsatepoch) * minutesPerDay;\n  return sgp4(satrec, m);\n}\n\nfunction dopplerFactor(location, position, velocity) {\n  var currentRange = Math.sqrt(Math.pow(position.x - location.x, 2) + Math.pow(position.y - location.y, 2) + Math.pow(position.z - location.z, 2));\n  var nextPos = {\n    x: position.x + velocity.x,\n    y: position.y + velocity.y,\n    z: position.z + velocity.z\n  };\n  var nextRange = Math.sqrt(Math.pow(nextPos.x - location.x, 2) + Math.pow(nextPos.y - location.y, 2) + Math.pow(nextPos.z - location.z, 2));\n  var rangeRate = nextRange - currentRange;\n\n  function sign(value) {\n    return value >= 0 ? 1 : -1;\n  }\n\n  rangeRate *= sign(rangeRate);\n  var c = 299792.458; // Speed of light in km/s\n\n  return 1 + rangeRate / c;\n}\n\nfunction radiansToDegrees(radians) {\n  return radians * rad2deg;\n}\nfunction degreesToRadians(degrees) {\n  return degrees * deg2rad;\n}\nfunction degreesLat(radians) {\n  if (radians < -pi / 2 || radians > pi / 2) {\n    throw new RangeError('Latitude radians must be in range [-pi/2; pi/2].');\n  }\n\n  return radiansToDegrees(radians);\n}\nfunction degreesLong(radians) {\n  if (radians < -pi || radians > pi) {\n    throw new RangeError('Longitude radians must be in range [-pi; pi].');\n  }\n\n  return radiansToDegrees(radians);\n}\nfunction radiansLat(degrees) {\n  if (degrees < -90 || degrees > 90) {\n    throw new RangeError('Latitude degrees must be in range [-90; 90].');\n  }\n\n  return degreesToRadians(degrees);\n}\nfunction radiansLong(degrees) {\n  if (degrees < -180 || degrees > 180) {\n    throw new RangeError('Longitude degrees must be in range [-180; 180].');\n  }\n\n  return degreesToRadians(degrees);\n}\nfunction geodeticToEcf(geodetic) {\n  var longitude = geodetic.longitude,\n      latitude = geodetic.latitude,\n      height = geodetic.height;\n  var a = 6378.137;\n  var b = 6356.7523142;\n  var f = (a - b) / a;\n  var e2 = 2 * f - f * f;\n  var normal = a / Math.sqrt(1 - e2 * (Math.sin(latitude) * Math.sin(latitude)));\n  var x = (normal + height) * Math.cos(latitude) * Math.cos(longitude);\n  var y = (normal + height) * Math.cos(latitude) * Math.sin(longitude);\n  var z = (normal * (1 - e2) + height) * Math.sin(latitude);\n  return {\n    x: x,\n    y: y,\n    z: z\n  };\n}\nfunction eciToGeodetic(eci, gmst) {\n  // http://www.celestrak.com/columns/v02n03/\n  var a = 6378.137;\n  var b = 6356.7523142;\n  var R = Math.sqrt(eci.x * eci.x + eci.y * eci.y);\n  var f = (a - b) / a;\n  var e2 = 2 * f - f * f;\n  var longitude = Math.atan2(eci.y, eci.x) - gmst;\n\n  while (longitude < -pi) {\n    longitude += twoPi;\n  }\n\n  while (longitude > pi) {\n    longitude -= twoPi;\n  }\n\n  var kmax = 20;\n  var k = 0;\n  var latitude = Math.atan2(eci.z, Math.sqrt(eci.x * eci.x + eci.y * eci.y));\n  var C;\n\n  while (k < kmax) {\n    C = 1 / Math.sqrt(1 - e2 * (Math.sin(latitude) * Math.sin(latitude)));\n    latitude = Math.atan2(eci.z + a * C * e2 * Math.sin(latitude), R);\n    k += 1;\n  }\n\n  var height = R / Math.cos(latitude) - a * C;\n  return {\n    longitude: longitude,\n    latitude: latitude,\n    height: height\n  };\n}\nfunction ecfToEci(ecf, gmst) {\n  // ccar.colorado.edu/ASEN5070/handouts/coordsys.doc\n  //\n  // [X]     [C -S  0][X]\n  // [Y]  =  [S  C  0][Y]\n  // [Z]eci  [0  0  1][Z]ecf\n  //\n  var X = ecf.x * Math.cos(gmst) - ecf.y * Math.sin(gmst);\n  var Y = ecf.x * Math.sin(gmst) + ecf.y * Math.cos(gmst);\n  var Z = ecf.z;\n  return {\n    x: X,\n    y: Y,\n    z: Z\n  };\n}\nfunction eciToEcf(eci, gmst) {\n  // ccar.colorado.edu/ASEN5070/handouts/coordsys.doc\n  //\n  // [X]     [C -S  0][X]\n  // [Y]  =  [S  C  0][Y]\n  // [Z]eci  [0  0  1][Z]ecf\n  //\n  //\n  // Inverse:\n  // [X]     [C  S  0][X]\n  // [Y]  =  [-S C  0][Y]\n  // [Z]ecf  [0  0  1][Z]eci\n  var x = eci.x * Math.cos(gmst) + eci.y * Math.sin(gmst);\n  var y = eci.x * -Math.sin(gmst) + eci.y * Math.cos(gmst);\n  var z = eci.z;\n  return {\n    x: x,\n    y: y,\n    z: z\n  };\n}\n\nfunction topocentric(observerGeodetic, satelliteEcf) {\n  // http://www.celestrak.com/columns/v02n02/\n  // TS Kelso's method, except I'm using ECF frame\n  // and he uses ECI.\n  var longitude = observerGeodetic.longitude,\n      latitude = observerGeodetic.latitude;\n  var observerEcf = geodeticToEcf(observerGeodetic);\n  var rx = satelliteEcf.x - observerEcf.x;\n  var ry = satelliteEcf.y - observerEcf.y;\n  var rz = satelliteEcf.z - observerEcf.z;\n  var topS = Math.sin(latitude) * Math.cos(longitude) * rx + Math.sin(latitude) * Math.sin(longitude) * ry - Math.cos(latitude) * rz;\n  var topE = -Math.sin(longitude) * rx + Math.cos(longitude) * ry;\n  var topZ = Math.cos(latitude) * Math.cos(longitude) * rx + Math.cos(latitude) * Math.sin(longitude) * ry + Math.sin(latitude) * rz;\n  return {\n    topS: topS,\n    topE: topE,\n    topZ: topZ\n  };\n}\n/**\n * @param {Object} tc\n * @param {Number} tc.topS Positive horizontal vector S due south.\n * @param {Number} tc.topE Positive horizontal vector E due east.\n * @param {Number} tc.topZ Vector Z normal to the surface of the earth (up).\n * @returns {Object}\n */\n\n\nfunction topocentricToLookAngles(tc) {\n  var topS = tc.topS,\n      topE = tc.topE,\n      topZ = tc.topZ;\n  var rangeSat = Math.sqrt(topS * topS + topE * topE + topZ * topZ);\n  var El = Math.asin(topZ / rangeSat);\n  var Az = Math.atan2(-topE, topS) + pi;\n  return {\n    azimuth: Az,\n    elevation: El,\n    rangeSat: rangeSat // Range in km\n\n  };\n}\n\nfunction ecfToLookAngles(observerGeodetic, satelliteEcf) {\n  var topocentricCoords = topocentric(observerGeodetic, satelliteEcf);\n  return topocentricToLookAngles(topocentricCoords);\n}\n\nexport { constants, propagate, sgp4, twoline2satrec, gstime, jday, invjday, dopplerFactor, radiansToDegrees, degreesToRadians, degreesLat, degreesLong, radiansLat, radiansLong, geodeticToEcf, eciToGeodetic, eciToEcf, ecfToEci, ecfToLookAngles };\n"]},"metadata":{},"sourceType":"module"}