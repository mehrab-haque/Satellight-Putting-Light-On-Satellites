{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\src\\\\components\\\\MapView.js\";\nimport React, { useState, createRef, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { getSatelliteInfo } from \"tle.js\";\nvar posInterval,\n    timeDiff,\n    pathInterval,\n    map,\n    marker,\n    infoWindow,\n    polyLine,\n    poly = [],\n    tle,\n    data;\n\nfunction getNormalizedCoord(coord, zoom) {\n  const y = coord.y;\n  let x = coord.x;\n  const tileRange = 1 << zoom;\n\n  if (y < 0 || y >= tileRange) {\n    return null;\n  }\n\n  if (x < 0 || x >= tileRange) {\n    x = (x % tileRange + tileRange) % tileRange;\n  }\n\n  return {\n    x: x,\n    y: y\n  };\n}\n\nconst MapView = forwardRef((props, ref) => {\n  tle = [props.data.tle_line1, props.data.tle_line2];\n  data = props.data;\n  timeDiff = props.timeDiff;\n  const [satCode, setSatCode] = useState(props.satCode);\n  const initialData = getSatelliteInfo(tle, Date.now() + timeDiff, 0, 0);\n  const containerRef = useRef();\n  useEffect(() => {\n    poly = [];\n    map = new window.google.maps.Map(containerRef.current, {\n      center: {\n        lat: initialData.lat,\n        lng: initialData.lng\n      },\n      zoom: 4,\n      streetViewControl: false,\n      mapTypeControlOptions: {\n        mapTypeIds: [window.google.maps.MapTypeId.ROADMAP, window.google.maps.MapTypeId.HYBRID, 'Sky']\n      }\n    });\n    const skyMapType = new window.google.maps.ImageMapType({\n      getTileUrl: function (coord, zoom) {\n        const normalizedCoord = getNormalizedCoord(coord, zoom);\n\n        if (!normalizedCoord) {\n          return \"\";\n        }\n\n        const bound = Math.pow(2, zoom);\n        return \"https://mw1.google.com/mw-planetary/sky/skytiles_v1\" + \"/\" + normalizedCoord.x + \"_\" + (bound - normalizedCoord.y - 1) + \"_\" + zoom + \".jpg\";\n      },\n      tileSize: new window.google.maps.Size(256, 256),\n      maxZoom: 9,\n      minZoom: 0,\n      radius: 1738000,\n      name: \"Sky\"\n    });\n    map.mapTypes.set(\"Sky\", skyMapType);\n    let iconMarker = new window.google.maps.MarkerImage(data.icon_url, null, new window.google.maps.Point(0, 0),\n    /* origin is 0,0 */\n    new window.google.maps.Point(30, 30),\n    /* anchor is bottom center of the scaled image */\n    new window.google.maps.Size(60, 50));\n    marker = new window.google.maps.Marker({\n      position: map.center,\n      icon: iconMarker,\n      title: \"Hello World!\"\n    });\n    marker.setMap(map);\n    infoWindow = new window.google.maps.InfoWindow({\n      content: '<div>Hello World !!!</div>'\n    });\n    infoWindow.open(map, marker);\n    polyLine = new window.google.maps.Polyline({\n      path: poly,\n      geodesic: true,\n      strokeColor: \"#FF0000\",\n      strokeOpacity: 1.0,\n      strokeWeight: 4\n    });\n    polyLine.setMap(map);\n  }, []);\n  useEffect(() => {\n    if (satCode) {\n      posInterval = setInterval(() => {\n        var currData = getSatelliteInfo(tle, Date.now() + timeDiff, 0, 0);\n        marker.setPosition({\n          lat: currData.lat,\n          lng: currData.lng\n        });\n        var info = `<div>\n            <center><span>${data.sat_name}</span></center>\n            <center><img   height=\"30px\" width='40px' src='${data.country_flag}'/></center>` + '<center>Lat:' + currData.lat.toFixed(3) + ', Lng:' + currData.lng.toFixed(3) + '</center>' + '<center>Velocity:' + currData.velocity.toFixed(3) + 'km/s <br/> Height:' + currData.height.toFixed(3) + 'km</center>' + '</div>';\n        infoWindow.setContent(info);\n        props.log('hi');\n      }, 100);\n      pathInterval = setInterval(() => {\n        var currData = getSatelliteInfo(tle, Date.now() + timeDiff, 0, 0);\n        poly.push(currData);\n        polyLine.setPath(poly);\n      }, 1000);\n    } else {\n      clearInterval(posInterval);\n      clearInterval(pathInterval);\n    }\n  }, [satCode]);\n  useImperativeHandle(ref, () => ({\n    setSatellite(sat) {\n      data = sat.data;\n      tle = [sat.data.tle_line1, sat.data.tle_line2];\n      poly = [];\n      var currData = getSatelliteInfo(tle, Date.now() + timeDiff, 0, 0);\n      var iconMarker = new window.google.maps.MarkerImage(data.icon_url, null, new window.google.maps.Point(0, 0),\n      /* origin is 0,0 */\n      new window.google.maps.Point(30, 30),\n      /* anchor is bottom center of the scaled image */\n      new window.google.maps.Size(60, 50));\n      marker.setIcon(iconMarker);\n      map.panTo({\n        lat: currData.lat,\n        lng: currData.lng\n      });\n      setSatCode(sat.satCode);\n    },\n\n    setTimeDiff(val) {\n      poly = [];\n      var currData = getSatelliteInfo(tle, Date.now() + val, 0, 0);\n      var iconMarker = new window.google.maps.MarkerImage(data.icon_url, null, new window.google.maps.Point(0, 0),\n      /* origin is 0,0 */\n      new window.google.maps.Point(30, 30),\n      /* anchor is bottom center of the scaled image */\n      new window.google.maps.Size(60, 50));\n      marker.setIcon(iconMarker);\n      map.panTo({\n        lat: currData.lat,\n        lng: currData.lng\n      });\n      timeDiff = val;\n    }\n\n  }));\n  useEffect(() => {}, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 5\n    }\n  });\n});\nexport default MapView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/MapView.js"],"names":["React","useState","createRef","useRef","useEffect","forwardRef","useImperativeHandle","getSatelliteInfo","posInterval","timeDiff","pathInterval","map","marker","infoWindow","polyLine","poly","tle","data","getNormalizedCoord","coord","zoom","y","x","tileRange","MapView","props","ref","tle_line1","tle_line2","satCode","setSatCode","initialData","Date","now","containerRef","window","google","maps","Map","current","center","lat","lng","streetViewControl","mapTypeControlOptions","mapTypeIds","MapTypeId","ROADMAP","HYBRID","skyMapType","ImageMapType","getTileUrl","normalizedCoord","bound","Math","pow","tileSize","Size","maxZoom","minZoom","radius","name","mapTypes","set","iconMarker","MarkerImage","icon_url","Point","Marker","position","icon","title","setMap","InfoWindow","content","open","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","setInterval","currData","setPosition","info","sat_name","country_flag","toFixed","velocity","height","setContent","log","push","setPath","clearInterval","setSatellite","sat","setIcon","panTo","setTimeDiff","val","width"],"mappings":"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","sourcesContent":["import React,{useState,createRef,useRef,useEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\n\r\nvar posInterval,timeDiff,pathInterval,map,marker,infoWindow,polyLine,poly=[],tle,data\r\n\r\nfunction getNormalizedCoord(coord, zoom) {\r\n        const y = coord.y;\r\n        let x = coord.x;\r\n        const tileRange = 1 << zoom;\r\n        if (y < 0 || y >= tileRange) {\r\n          return null;\r\n        }\r\n        if (x < 0 || x >= tileRange) {\r\n          x = ((x % tileRange) + tileRange) % tileRange;\r\n        }\r\n        return {\r\n          x: x,\r\n          y: y\r\n        };\r\n      }\r\n\r\nconst MapView=forwardRef((props,ref)=>{\r\n  tle=[props.data.tle_line1,props.data.tle_line2]\r\n  data=props.data\r\n  timeDiff=props.timeDiff\r\n  const [satCode,setSatCode]=useState(props.satCode)\r\n  const initialData=getSatelliteInfo(tle,Date.now()+timeDiff,0,0)\r\n  const containerRef=useRef()\r\n\r\n\r\n  useEffect(()=>{\r\n    poly=[]\r\n    map = new window.google.maps.Map(containerRef.current, {\r\n      center: {\r\n        lat: initialData.lat,\r\n        lng: initialData.lng\r\n      },\r\n      zoom: 4,\r\n      streetViewControl: false,\r\n      mapTypeControlOptions: {\r\n        mapTypeIds: [window.google.maps.MapTypeId.ROADMAP,window.google.maps.MapTypeId.HYBRID,'Sky']\r\n      }\r\n    });\r\n\r\n    const skyMapType = new window.google.maps.ImageMapType({\r\n      getTileUrl: function(coord, zoom) {\r\n        const normalizedCoord = getNormalizedCoord(coord, zoom);\r\n\r\n        if (!normalizedCoord) {\r\n          return \"\";\r\n        }\r\n\r\n        const bound = Math.pow(2, zoom);\r\n        return (\r\n          \"https://mw1.google.com/mw-planetary/sky/skytiles_v1\" +\r\n          \"/\" +\r\n          normalizedCoord.x +\r\n          \"_\" +\r\n          (bound - normalizedCoord.y - 1) +\r\n          \"_\" +\r\n          zoom +\r\n          \".jpg\"\r\n        );\r\n      },\r\n      tileSize: new window.google.maps.Size(256, 256),\r\n      maxZoom: 9,\r\n      minZoom: 0,\r\n      radius: 1738000,\r\n      name: \"Sky\"\r\n    });\r\n\r\n    map.mapTypes.set(\"Sky\", skyMapType);\r\n\r\n    let iconMarker = new window.google.maps.MarkerImage(\r\n                      data.icon_url,\r\n                      null,\r\n                      new window.google.maps.Point(0, 0), /* origin is 0,0 */\r\n                      new window.google.maps.Point(30, 30), /* anchor is bottom center of the scaled image */\r\n                      new window.google.maps.Size(60, 50)\r\n                  );\r\n\r\n     marker = new window.google.maps.Marker({\r\n        position: map.center,\r\n        icon:iconMarker,\r\n        title:\"Hello World!\"\r\n    });\r\n    marker.setMap(map);\r\n\r\n    infoWindow = new window.google.maps.InfoWindow({\r\n      content: '<div>Hello World !!!</div>'\r\n    });\r\n\r\n    infoWindow.open(map, marker);\r\n\r\n    polyLine= new window.google.maps.Polyline({\r\n      path: poly,\r\n      geodesic: true,\r\n      strokeColor: \"#FF0000\",\r\n      strokeOpacity: 1.0,\r\n      strokeWeight: 4\r\n    });\r\n\r\n    polyLine.setMap(map)\r\n\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    if(satCode) {\r\n      posInterval = setInterval(() => {\r\n        var currData=getSatelliteInfo(tle,Date.now()+timeDiff,0,0)\r\n        marker.setPosition({\r\n          lat:currData.lat,\r\n          lng:currData.lng\r\n        })\r\n\r\n        var info=`<div>\r\n            <center><span>${data.sat_name}</span></center>\r\n            <center><img   height=\"30px\" width='40px' src='${data.country_flag}'/></center>`+\r\n            '<center>Lat:'+currData.lat.toFixed(3)+', Lng:'+currData.lng.toFixed(3)+'</center>'+\r\n            '<center>Velocity:'+currData.velocity.toFixed(3)+'km/s <br/> Height:'+currData.height.toFixed(3)+'km</center>'+\r\n            '</div>'\r\n\r\n        infoWindow.setContent(info)\r\n        props.log('hi')\r\n      }, 100);\r\n      pathInterval = setInterval(() => {\r\n        var currData=getSatelliteInfo(tle,Date.now()+timeDiff,0,0)\r\n        poly.push(currData)\r\n        polyLine.setPath(poly)\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(posInterval);\r\n      clearInterval(pathInterval);\r\n    }\r\n  },[satCode])\r\n\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setSatellite(sat){\r\n      data=sat.data\r\n      tle=[sat.data.tle_line1,sat.data.tle_line2]\r\n      poly=[]\r\n      var currData=getSatelliteInfo(tle,Date.now()+timeDiff,0,0)\r\n      var iconMarker = new window.google.maps.MarkerImage(\r\n                        data.icon_url,\r\n                        null,\r\n                        new window.google.maps.Point(0, 0), /* origin is 0,0 */\r\n                        new window.google.maps.Point(30, 30), /* anchor is bottom center of the scaled image */\r\n                        new window.google.maps.Size(60, 50)\r\n                    );\r\n      marker.setIcon(iconMarker)\r\n      map.panTo({\r\n        lat:currData.lat,\r\n        lng:currData.lng\r\n      })\r\n      setSatCode(sat.satCode)\r\n\r\n    },\r\n    setTimeDiff(val){\r\n      poly=[]\r\n      var currData=getSatelliteInfo(tle,Date.now()+val,0,0)\r\n      var iconMarker = new window.google.maps.MarkerImage(\r\n                        data.icon_url,\r\n                        null,\r\n                        new window.google.maps.Point(0, 0), /* origin is 0,0 */\r\n                        new window.google.maps.Point(30, 30), /* anchor is bottom center of the scaled image */\r\n                        new window.google.maps.Size(60, 50)\r\n                    );\r\n      marker.setIcon(iconMarker)\r\n      map.panTo({\r\n        lat:currData.lat,\r\n        lng:currData.lng\r\n      })\r\n      timeDiff=val\r\n    }\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n  },[])\r\n\r\n  return(\r\n    <div ref={containerRef} style={{ width: \"100%\", height: \"100%\" }}/>\r\n  )\r\n})\r\n\r\nexport default MapView\r\n"]},"metadata":{},"sourceType":"module"}