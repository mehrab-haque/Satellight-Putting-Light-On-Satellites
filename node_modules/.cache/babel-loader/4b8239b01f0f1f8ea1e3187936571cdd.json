{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,createRef,useRef,useEffect,useLayoutEffect,forwardRef,useImperativeHandle}from'react';import{getSatelliteInfo}from\"tle.js\";import Globe,{Point}from'react-globe.gl';import*as THREE from'three';import{sat_data}from'../assets/master';var map=function map(value,x1,y1,x2,y2){return(value-x1)*(y2-x2)/(y1-x1)+x2;};var sat_arr=[],timeDiff,point_arr=[],interval,currCode;var ModelView=forwardRef(function(props,ref){var _useState=useState(point_arr),_useState2=_slicedToArray(_useState,2),pointArr=_useState2[0],setPointArr=_useState2[1];var _useState3=useState({height:0,width:0}),_useState4=_slicedToArray(_useState3,2),container=_useState4[0],setContainer=_useState4[1];var _useState5=useState(props.satCode),_useState6=_slicedToArray(_useState5,2),satCode=_useState6[0],setSatCode=_useState6[1];var globeEl=useRef();currCode=props.satCode;timeDiff=props.timeDiff;useImperativeHandle(ref,function(){return{setSatellite:function setSatellite(sat){setSatCode(sat.satCode);},setTimeDiff:function setTimeDiff(val){timeDiff=val;}};});useEffect(function(){//globeEl.current.controls().autoRotate = true;\n//globeEl.current.controls().autoRotateSpeed = 0.2;\nObject.keys(sat_data).map(function(key,ind){var data=sat_data[key];console.log(key);sat_arr.push(getSatelliteInfo([data.tle_line1,data.tle_line2],Date.now()+timeDiff,0,0,0));});sat_arr.map(function(sat,ind){var schema={lat:sat.lat,lng:sat.lng,alt:sat.height/6400,radius:map(sat.height,400,35000,3,12),height:sat.height,velocity:sat.velocity,color:'#000000',ind:ind};point_arr.push(schema);});console.log(props.parent.current.offsetWidth);setContainer({height:props.parent.current.offsetHeight,width:props.parent.current.offsetWidth});},[]);useEffect(function(){var defaultSat=Object.keys(sat_data).indexOf(satCode);globeEl.current.pointOfView({lat:point_arr[defaultSat].lat,lng:point_arr[defaultSat].lng,altitude:pointArr[defaultSat].alt+1.2},1000);},[satCode]);useEffect(function(){if(satCode){interval=setInterval(function(){sat_arr=[];Object.keys(sat_data).map(function(key,ind){var data=sat_data[key];sat_arr.push(getSatelliteInfo([data.tle_line1,data.tle_line2],Date.now()+timeDiff,23.762397,90.418917,0));});//console.log(satCode)\npoint_arr=[];sat_arr.map(function(sat,ind){var schema={lat:sat.lat,lng:sat.lng,alt:sat.height/6400,radius:map(sat.height,400,35000,2.5,6),height:sat.height,velocity:sat.velocity,color:'#000000',ind:ind,code:Object.keys(sat_data)[ind]};if(Object.keys(sat_data)[ind]==currCode){schema['color']='#ff0000';//console.log(Object.keys(sat_data)[ind]+' '+satCode)\n}point_arr.push(schema);});setPointArr(point_arr);},500);}else{clearInterval(interval);}},[satCode]);return/*#__PURE__*/React.createElement(Globe,{showAtmosphere:false,backgroundColor:\"#ffffff\",height:container.height,width:container.width,ref:globeEl,globeImageUrl:\"//unpkg.com/three-globe/example/img/earth-day.jpg\",bumpImageUrl:\"//unpkg.com/three-globe/example/img/earth-topology.png\",showGraticules:true,onCustomLayerHover:function onCustomLayerHover(d){if(d!=null&&d!=undefined){}},onCustomLayerClick:function onCustomLayerClick(d){if(d!=null&&d!=undefined){props.show(d.code);}},customLayerData:pointArr,customThreeObject:function customThreeObject(d){var mesh=new THREE.Mesh(new THREE.SphereBufferGeometry(d.radius),new THREE.MeshLambertMaterial({color:d.color}));var group=new THREE.Group();group.add(mesh);return group;},customThreeObjectUpdate:function customThreeObjectUpdate(obj,d){Object.assign(obj.position,globeEl.current.getCoords(d.lat,d.lng,d.alt));}});});export default ModelView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/ModelView.js"],"names":["React","useState","createRef","useRef","useEffect","useLayoutEffect","forwardRef","useImperativeHandle","getSatelliteInfo","Globe","Point","THREE","sat_data","map","value","x1","y1","x2","y2","sat_arr","timeDiff","point_arr","interval","currCode","ModelView","props","ref","pointArr","setPointArr","height","width","container","setContainer","satCode","setSatCode","globeEl","setSatellite","sat","setTimeDiff","val","Object","keys","key","ind","data","console","log","push","tle_line1","tle_line2","Date","now","schema","lat","lng","alt","radius","velocity","color","parent","current","offsetWidth","offsetHeight","defaultSat","indexOf","pointOfView","altitude","setInterval","code","clearInterval","d","undefined","show","mesh","Mesh","SphereBufferGeometry","MeshLambertMaterial","group","Group","add","obj","assign","position","getCoords"],"mappings":"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","sourcesContent":["import React,{useState,createRef,useRef,useEffect,useLayoutEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\nimport Globe,{Point} from 'react-globe.gl';\r\nimport * as THREE from 'three'\r\nimport {sat_data} from '../assets/master'\r\n\r\nconst map = (value, x1, y1, x2, y2) => (value - x1) * (y2 - x2) / (y1 - x1) + x2;\r\n\r\nvar sat_arr=[],timeDiff,point_arr=[],interval,currCode\r\n\r\nconst ModelView=forwardRef((props,ref)=>{\r\n\r\n  const [pointArr, setPointArr] = useState(point_arr);\r\n  const [container,setContainer]=useState({height:0,width:0})\r\n  const [satCode,setSatCode]=useState(props.satCode)\r\n  const globeEl = useRef();\r\n  currCode=props.satCode\r\n  timeDiff=props.timeDiff\r\n\r\n\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setSatellite(sat){\r\n      setSatCode(sat.satCode)\r\n    },\r\n    setTimeDiff(val){\r\n      timeDiff=val\r\n    }\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    //globeEl.current.controls().autoRotate = true;\r\n      //globeEl.current.controls().autoRotateSpeed = 0.2;\r\n      Object.keys(sat_data).map((key,ind)=>{\r\n        var data=sat_data[key]\r\n        console.log(key)\r\n        sat_arr.push(getSatelliteInfo([data.tle_line1,data.tle_line2],Date.now()+timeDiff,0,0,0))\r\n      })\r\n        sat_arr.map((sat,ind)=>{\r\n          var schema={\r\n            lat:sat.lat,\r\n            lng:sat.lng,\r\n            alt:sat.height/6400,\r\n            radius:map(sat.height,400,35000,3,12),\r\n            height:sat.height,\r\n            velocity:sat.velocity,\r\n            color:'#000000',\r\n            ind:ind\r\n          }\r\n          point_arr.push(schema)\r\n        })\r\n      console.log(props.parent.current.offsetWidth)\r\n      setContainer({\r\n        height:props.parent.current.offsetHeight,\r\n        width:props.parent.current.offsetWidth\r\n      })\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    var defaultSat=Object.keys(sat_data).indexOf(satCode)\r\n    globeEl.current.pointOfView({ lat:point_arr[defaultSat].lat,lng:point_arr[defaultSat].lng,altitude:pointArr[defaultSat].alt+1.2 },1000);\r\n  },[satCode])\r\n\r\n  useEffect(()=>{\r\n    if(satCode) {\r\n      interval = setInterval(() => {\r\n        sat_arr=[]\r\n        Object.keys(sat_data).map((key,ind)=>{\r\n          var data=sat_data[key]\r\n          sat_arr.push(getSatelliteInfo([data.tle_line1,data.tle_line2],Date.now()+timeDiff,23.762397,90.418917,0))\r\n        })\r\n        //console.log(satCode)\r\n        point_arr=[]\r\n        sat_arr.map((sat,ind)=>{\r\n          var schema={\r\n            lat:sat.lat,\r\n            lng:sat.lng,\r\n            alt:sat.height/6400,\r\n            radius:map(sat.height,400,35000,2.5,6),\r\n            height:sat.height,\r\n            velocity:sat.velocity,\r\n            color:'#000000',\r\n            ind:ind,\r\n            code:Object.keys(sat_data)[ind]\r\n          }\r\n          if(Object.keys(sat_data)[ind]==currCode){\r\n            schema['color']='#ff0000'\r\n            //console.log(Object.keys(sat_data)[ind]+' '+satCode)\r\n          }\r\n          point_arr.push(schema)\r\n        })\r\n        setPointArr(point_arr)\r\n      }, 500);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n  },[satCode])\r\n\r\n  return(\r\n\r\n      <Globe\r\n\r\n            showAtmosphere={false}\r\n            backgroundColor='#ffffff'\r\n            height={container.height}\r\n            width={container.width}\r\n            ref={globeEl}\r\n            globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-day.jpg\"\r\n            bumpImageUrl=\"//unpkg.com/three-globe/example/img/earth-topology.png\"\r\n\r\n            showGraticules={true}\r\n\r\n\r\n            onCustomLayerHover={d=>{\r\n                if(d!=null && d!=undefined){\r\n                  \r\n                }\r\n              }\r\n          }\r\n\r\n          onCustomLayerClick={d=>{\r\n              if(d!=null && d!=undefined){\r\n                props.show(d.code)\r\n              }\r\n            }\r\n        }\r\n\r\n        customLayerData={pointArr}\r\n        customThreeObject={d =>{\r\n          var mesh=new THREE.Mesh(\r\n            new THREE.SphereBufferGeometry(d.radius),\r\n            new THREE.MeshLambertMaterial({ color: d.color })\r\n          )\r\n          var group=new THREE.Group()\r\n          group.add(mesh)\r\n          return group\r\n        }\r\n      }\r\n        customThreeObjectUpdate={(obj, d) => {\r\n          Object.assign(obj.position, globeEl.current.getCoords(d.lat, d.lng, d.alt));\r\n        }}\r\n       />\r\n\r\n  )\r\n})\r\n\r\nexport default ModelView\r\n"]},"metadata":{},"sourceType":"module"}