{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\src\\\\components\\\\MapView.js\";\nimport React, { useState, createRef, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { getSatelliteInfo } from \"tle.js\";\n\nfunction getNormalizedCoord(coord, zoom) {\n  const y = coord.y;\n  let x = coord.x;\n  const tileRange = 1 << zoom;\n\n  if (y < 0 || y >= tileRange) {\n    return null;\n  }\n\n  if (x < 0 || x >= tileRange) {\n    x = (x % tileRange + tileRange) % tileRange;\n  }\n\n  return {\n    x: x,\n    y: y\n  };\n}\n\nconst MapView = forwardRef((props, ref) => {\n  var map, marker, infoWindow, polyLine;\n  const initialData = getSatelliteInfo([props.data.tle_line1, props.data.tle_line2], Date.now() + props.timeDiff, 0, 0);\n  const containerRef = useRef();\n  useEffect(() => {\n    map = new window.google.maps.Map(containerRef.current, {\n      center: {\n        lat: initialData.lat,\n        lng: initialData.lng\n      },\n      zoom: 3,\n      streetViewControl: false,\n      mapTypeControlOptions: {\n        mapTypeIds: [window.google.maps.MapTypeId.ROADMAP, window.google.maps.MapTypeId.HYBRID]\n      }\n    });\n    const icon = {\n      url: props.data.icon_url,\n      scaledSize: {\n        width: 40,\n        height: 40\n      }\n    };\n    let iconMarker = new window.google.maps.MarkerImage(props.data.icon_url, null, new window.google.maps.Point(0, 0),\n    /* origin is 0,0 */\n    new window.google.maps.Point(30, 30),\n    /* anchor is bottom center of the scaled image */\n    new window.google.maps.Size(60, 50));\n    marker = new window.google.maps.Marker({\n      position: map.center,\n      icon: iconMarker,\n      title: \"Hello World!\"\n    });\n    marker.setMap(map);\n  }, []);\n  useEffect(() => {\n    const posInterval = setInterval(() => {\n      var currData = getSatelliteInfo(tle, Date.now(), 23.762397, 90.418917);\n      marker.setPosition({\n        lat: curr.lat,\n        lng: curr.lng\n      });\n      /*var info=`<div>\r\n          <span>International Space Station</span><br/>\r\n          <center><img style={{marginTop:'5px'}}  height=\"30px\" width='40px' src='https://satellitedatanasa.s3.ap-south-1.amazonaws.com/countryFlag/america.png'/></center>`+\r\n          '<center>Lat:'+curr.lat.toFixed(3)+', Lng:'+curr.lng.toFixed(3)+'</center>'+\r\n          '<center>Velocity:'+currData.velocity.toFixed(3)+'km/s <br/> Height:'+currData.height.toFixed(3)+'km</center>'+\r\n          '</div>'\r\n        infowindow.setContent(info)*/\n    }, 100);\n    /*  const pathInterval = setInterval(() => {\r\n        var curr=getLatLngObj(tle)\r\n        poly.push(curr)\r\n        setPath(poly)\r\n        polyLine.setPath(path)\r\n        //console.log(path)\r\n      }, 1000);*/\n\n    return () => {\n      clearInterval(posInterval);\n    };\n  }, []);\n  useImperativeHandle(ref, () => ({}));\n  useEffect(() => {}, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  });\n});\nexport default MapView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/MapView.js"],"names":["React","useState","createRef","useRef","useEffect","forwardRef","useImperativeHandle","getSatelliteInfo","getNormalizedCoord","coord","zoom","y","x","tileRange","MapView","props","ref","map","marker","infoWindow","polyLine","initialData","data","tle_line1","tle_line2","Date","now","timeDiff","containerRef","window","google","maps","Map","current","center","lat","lng","streetViewControl","mapTypeControlOptions","mapTypeIds","MapTypeId","ROADMAP","HYBRID","icon","url","icon_url","scaledSize","width","height","iconMarker","MarkerImage","Point","Size","Marker","position","title","setMap","posInterval","setInterval","currData","tle","setPosition","curr","clearInterval"],"mappings":"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","sourcesContent":["import React,{useState,createRef,useRef,useEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\n\r\nfunction getNormalizedCoord(coord, zoom) {\r\n        const y = coord.y;\r\n        let x = coord.x;\r\n        const tileRange = 1 << zoom;\r\n        if (y < 0 || y >= tileRange) {\r\n          return null;\r\n        }\r\n        if (x < 0 || x >= tileRange) {\r\n          x = ((x % tileRange) + tileRange) % tileRange;\r\n        }\r\n        return {\r\n          x: x,\r\n          y: y\r\n        };\r\n      }\r\n\r\n\r\nconst MapView=forwardRef((props,ref)=>{\r\n\r\n  var map,marker,infoWindow,polyLine\r\n  const initialData=getSatelliteInfo([props.data.tle_line1,props.data.tle_line2],Date.now()+props.timeDiff,0,0)\r\n  const containerRef=useRef()\r\n\r\n\r\n  useEffect(()=>{\r\n    map = new window.google.maps.Map(containerRef.current, {\r\n      center: {\r\n        lat: initialData.lat,\r\n        lng: initialData.lng\r\n      },\r\n      zoom: 3,\r\n      streetViewControl: false,\r\n      mapTypeControlOptions: {\r\n        mapTypeIds: [window.google.maps.MapTypeId.ROADMAP,window.google.maps.MapTypeId.HYBRID]\r\n      }\r\n    });\r\n\r\n    const icon = { url: props.data.icon_url, scaledSize: { width: 40, height: 40 } };\r\n    let iconMarker = new window.google.maps.MarkerImage(\r\n                      props.data.icon_url,\r\n                      null,\r\n                      new window.google.maps.Point(0, 0), /* origin is 0,0 */\r\n                      new window.google.maps.Point(30, 30), /* anchor is bottom center of the scaled image */\r\n                      new window.google.maps.Size(60, 50)\r\n                  );\r\n\r\n     marker = new window.google.maps.Marker({\r\n        position: map.center,\r\n        icon:iconMarker,\r\n        title:\"Hello World!\"\r\n    });\r\n    marker.setMap(map);\r\n\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n\r\n    const posInterval = setInterval(() => {\r\n      var currData=getSatelliteInfo(tle,Date.now(),23.762397,90.418917)\r\n\r\n      marker.setPosition({\r\n        lat:curr.lat,\r\n        lng:curr.lng\r\n      })\r\n\r\n      /*var info=`<div>\r\n          <span>International Space Station</span><br/>\r\n          <center><img style={{marginTop:'5px'}}  height=\"30px\" width='40px' src='https://satellitedatanasa.s3.ap-south-1.amazonaws.com/countryFlag/america.png'/></center>`+\r\n          '<center>Lat:'+curr.lat.toFixed(3)+', Lng:'+curr.lng.toFixed(3)+'</center>'+\r\n          '<center>Velocity:'+currData.velocity.toFixed(3)+'km/s <br/> Height:'+currData.height.toFixed(3)+'km</center>'+\r\n          '</div>'\r\n\r\n      infowindow.setContent(info)*/\r\n\r\n    }, 100);\r\n  /*  const pathInterval = setInterval(() => {\r\n      var curr=getLatLngObj(tle)\r\n      poly.push(curr)\r\n      setPath(poly)\r\n      polyLine.setPath(path)\r\n      //console.log(path)\r\n    }, 1000);*/\r\n    return () => {clearInterval(posInterval);}\r\n  },[])\r\n\r\n\r\n  useImperativeHandle(ref, () => ({\r\n\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n  },[])\r\n\r\n  return(\r\n    <div ref={containerRef} style={{ width: \"100%\", height: \"100%\" }}/>\r\n  )\r\n})\r\n\r\nexport default MapView\r\n"]},"metadata":{},"sourceType":"module"}