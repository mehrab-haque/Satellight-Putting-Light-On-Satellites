{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\src\\\\components\\\\ModelView.js\";\nimport React, { useState, createRef, useRef, useEffect, useLayoutEffect, forwardRef, useImperativeHandle } from 'react';\nimport { getSatelliteInfo } from \"tle.js\";\nimport Globe, { Point } from 'react-globe.gl';\nimport * as THREE from 'three';\nimport { sat_data } from '../assets/master';\n\nconst map = (value, x1, y1, x2, y2) => (value - x1) * (y2 - x2) / (y1 - x1) + x2;\n\nvar sat_arr = [],\n    timeDiff,\n    point_arr = [],\n    interval,\n    currCode;\nconst ModelView = forwardRef((props, ref) => {\n  const [pointArr, setPointArr] = useState(point_arr);\n  const [container, setContainer] = useState({\n    height: 0,\n    width: 0\n  });\n  const [satCode, setSatCode] = useState(props.satCode);\n  const globeEl = useRef();\n  currCode = props.satCode;\n  timeDiff = props.timeDiff;\n  useImperativeHandle(ref, () => ({\n    setSatellite(sat) {\n      setSatCode(sat.satCode);\n    },\n\n    setTimeDiff(val) {\n      timeDiff = val;\n    }\n\n  }));\n  useEffect(() => {\n    //globeEl.current.controls().autoRotate = true;\n    //globeEl.current.controls().autoRotateSpeed = 0.2;\n    Object.keys(sat_data).map((key, ind) => {\n      var data = sat_data[key];\n      console.log(key);\n      sat_arr.push(getSatelliteInfo([data.tle_line1, data.tle_line2], Date.now() + timeDiff, 0, 0, 0));\n    });\n    sat_arr.map((sat, ind) => {\n      var schema = {\n        lat: sat.lat,\n        lng: sat.lng,\n        alt: sat.height / 6400,\n        radius: map(sat.height, 400, 35000, 3, 12),\n        height: sat.height,\n        velocity: sat.velocity,\n        color: '#000000',\n        ind: ind\n      };\n      point_arr.push(schema);\n    });\n    console.log(props.parent.current.offsetWidth);\n    setContainer({\n      height: props.parent.current.offsetHeight,\n      width: props.parent.current.offsetWidth\n    });\n  }, []);\n  useEffect(() => {\n    var defaultSat = Object.keys(sat_data).indexOf(satCode);\n    globeEl.current.pointOfView({\n      lat: point_arr[defaultSat].lat,\n      lng: point_arr[defaultSat].lng,\n      altitude: pointArr[defaultSat].alt + 1.2\n    }, 1000);\n  }, [satCode]);\n  useEffect(() => {\n    if (satCode) {\n      interval = setInterval(() => {\n        sat_arr = [];\n        Object.keys(sat_data).map((key, ind) => {\n          var data = sat_data[key];\n          sat_arr.push(getSatelliteInfo([data.tle_line1, data.tle_line2], Date.now() + timeDiff, 23.762397, 90.418917, 0));\n        }); //console.log(satCode)\n\n        point_arr = [];\n        sat_arr.map((sat, ind) => {\n          var schema = {\n            lat: sat.lat,\n            lng: sat.lng,\n            alt: sat.height / 6400,\n            radius: map(sat.height, 400, 35000, 2.5, 6),\n            height: sat.height,\n            velocity: sat.velocity,\n            color: '#000000',\n            ind: ind,\n            code: Object.keys(sat_data)[ind]\n          };\n\n          if (Object.keys(sat_data)[ind] == currCode) {\n            schema['color'] = '#ff0000'; //console.log(Object.keys(sat_data)[ind]+' '+satCode)\n          }\n\n          point_arr.push(schema);\n        });\n        setPointArr(point_arr);\n      }, 500);\n    } else {\n      clearInterval(interval);\n    }\n  }, [satCode]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: dummyRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Globe, {\n    showAtmosphere: false,\n    backgroundColor: \"#ffffff\",\n    height: container.height,\n    width: container.width,\n    ref: globeEl,\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-day.jpg\",\n    bumpImageUrl: \"//unpkg.com/three-globe/example/img/earth-topology.png\",\n    showGraticules: true,\n    onCustomLayerHover: d => {\n      if (d != null && d != undefined) {\n        globeEl.current.style.cursor = 'pointer';\n      }\n    },\n    onCustomLayerClick: d => {\n      if (d != null && d != undefined) {\n        props.show(d.code);\n      }\n    },\n    customLayerData: pointArr,\n    customThreeObject: d => {\n      var mesh = new THREE.Mesh(new THREE.SphereBufferGeometry(d.radius), new THREE.MeshLambertMaterial({\n        color: d.color\n      }));\n      var group = new THREE.Group();\n      group.add(mesh);\n      return group;\n    },\n    customThreeObjectUpdate: (obj, d) => {\n      Object.assign(obj.position, globeEl.current.getCoords(d.lat, d.lng, d.alt));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }));\n});\nexport default ModelView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/ModelView.js"],"names":["React","useState","createRef","useRef","useEffect","useLayoutEffect","forwardRef","useImperativeHandle","getSatelliteInfo","Globe","Point","THREE","sat_data","map","value","x1","y1","x2","y2","sat_arr","timeDiff","point_arr","interval","currCode","ModelView","props","ref","pointArr","setPointArr","container","setContainer","height","width","satCode","setSatCode","globeEl","setSatellite","sat","setTimeDiff","val","Object","keys","key","ind","data","console","log","push","tle_line1","tle_line2","Date","now","schema","lat","lng","alt","radius","velocity","color","parent","current","offsetWidth","offsetHeight","defaultSat","indexOf","pointOfView","altitude","setInterval","code","clearInterval","dummyRef","d","undefined","style","cursor","show","mesh","Mesh","SphereBufferGeometry","MeshLambertMaterial","group","Group","add","obj","assign","position","getCoords"],"mappings":"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","sourcesContent":["import React,{useState,createRef,useRef,useEffect,useLayoutEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\nimport Globe,{Point} from 'react-globe.gl';\r\nimport * as THREE from 'three'\r\nimport {sat_data} from '../assets/master'\r\n\r\nconst map = (value, x1, y1, x2, y2) => (value - x1) * (y2 - x2) / (y1 - x1) + x2;\r\n\r\nvar sat_arr=[],timeDiff,point_arr=[],interval,currCode\r\n\r\nconst ModelView=forwardRef((props,ref)=>{\r\n\r\n  const [pointArr, setPointArr] = useState(point_arr);\r\n  const [container,setContainer]=useState({height:0,width:0})\r\n  const [satCode,setSatCode]=useState(props.satCode)\r\n  const globeEl = useRef();\r\n  currCode=props.satCode\r\n  timeDiff=props.timeDiff\r\n\r\n\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setSatellite(sat){\r\n      setSatCode(sat.satCode)\r\n    },\r\n    setTimeDiff(val){\r\n      timeDiff=val\r\n    }\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    //globeEl.current.controls().autoRotate = true;\r\n      //globeEl.current.controls().autoRotateSpeed = 0.2;\r\n      Object.keys(sat_data).map((key,ind)=>{\r\n        var data=sat_data[key]\r\n        console.log(key)\r\n        sat_arr.push(getSatelliteInfo([data.tle_line1,data.tle_line2],Date.now()+timeDiff,0,0,0))\r\n      })\r\n        sat_arr.map((sat,ind)=>{\r\n          var schema={\r\n            lat:sat.lat,\r\n            lng:sat.lng,\r\n            alt:sat.height/6400,\r\n            radius:map(sat.height,400,35000,3,12),\r\n            height:sat.height,\r\n            velocity:sat.velocity,\r\n            color:'#000000',\r\n            ind:ind\r\n          }\r\n          point_arr.push(schema)\r\n        })\r\n      console.log(props.parent.current.offsetWidth)\r\n      setContainer({\r\n        height:props.parent.current.offsetHeight,\r\n        width:props.parent.current.offsetWidth\r\n      })\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    var defaultSat=Object.keys(sat_data).indexOf(satCode)\r\n    globeEl.current.pointOfView({ lat:point_arr[defaultSat].lat,lng:point_arr[defaultSat].lng,altitude:pointArr[defaultSat].alt+1.2 },1000);\r\n  },[satCode])\r\n\r\n  useEffect(()=>{\r\n    if(satCode) {\r\n      interval = setInterval(() => {\r\n        sat_arr=[]\r\n        Object.keys(sat_data).map((key,ind)=>{\r\n          var data=sat_data[key]\r\n          sat_arr.push(getSatelliteInfo([data.tle_line1,data.tle_line2],Date.now()+timeDiff,23.762397,90.418917,0))\r\n        })\r\n        //console.log(satCode)\r\n        point_arr=[]\r\n        sat_arr.map((sat,ind)=>{\r\n          var schema={\r\n            lat:sat.lat,\r\n            lng:sat.lng,\r\n            alt:sat.height/6400,\r\n            radius:map(sat.height,400,35000,2.5,6),\r\n            height:sat.height,\r\n            velocity:sat.velocity,\r\n            color:'#000000',\r\n            ind:ind,\r\n            code:Object.keys(sat_data)[ind]\r\n          }\r\n          if(Object.keys(sat_data)[ind]==currCode){\r\n            schema['color']='#ff0000'\r\n            //console.log(Object.keys(sat_data)[ind]+' '+satCode)\r\n          }\r\n          point_arr.push(schema)\r\n        })\r\n        setPointArr(point_arr)\r\n      }, 500);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n  },[satCode])\r\n\r\n  return(\r\n    <div ref={dummyRef}>\r\n      <Globe\r\n\r\n            showAtmosphere={false}\r\n            backgroundColor='#ffffff'\r\n            height={container.height}\r\n            width={container.width}\r\n            ref={globeEl}\r\n            globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-day.jpg\"\r\n            bumpImageUrl=\"//unpkg.com/three-globe/example/img/earth-topology.png\"\r\n\r\n            showGraticules={true}\r\n\r\n\r\n            onCustomLayerHover={d=>{\r\n                if(d!=null && d!=undefined){\r\n                  globeEl.current.style.cursor='pointer'\r\n                }\r\n              }\r\n          }\r\n\r\n          onCustomLayerClick={d=>{\r\n              if(d!=null && d!=undefined){\r\n                props.show(d.code)\r\n              }\r\n            }\r\n        }\r\n\r\n        customLayerData={pointArr}\r\n        customThreeObject={d =>{\r\n          var mesh=new THREE.Mesh(\r\n            new THREE.SphereBufferGeometry(d.radius),\r\n            new THREE.MeshLambertMaterial({ color: d.color })\r\n          )\r\n          var group=new THREE.Group()\r\n          group.add(mesh)\r\n          return group\r\n        }\r\n      }\r\n        customThreeObjectUpdate={(obj, d) => {\r\n          Object.assign(obj.position, globeEl.current.getCoords(d.lat, d.lng, d.alt));\r\n        }}\r\n       />\r\n      </div>\r\n\r\n  )\r\n})\r\n\r\nexport default ModelView\r\n"]},"metadata":{},"sourceType":"module"}