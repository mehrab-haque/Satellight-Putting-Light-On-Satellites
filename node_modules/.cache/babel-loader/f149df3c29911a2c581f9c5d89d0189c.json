{"ast":null,"code":"import Element from './element';\nimport Point from '../geometry/point';\nimport Rect from '../geometry/rect';\nimport toMatrix from '../geometry/to-matrix';\nimport paintable from '../mixins/paintable';\nimport withPoints from '../mixins/with-points';\nimport { defined, measureText } from '../util';\nvar DEFAULT_FONT = \"12px sans-serif\";\nvar DEFAULT_FILL = \"#000\";\n\nvar Text = function (superclass) {\n  function Text(content, position, options) {\n    if (position === void 0) position = new Point();\n    if (options === void 0) options = {};\n    superclass.call(this, options);\n    this.content(content);\n    this.position(position);\n\n    if (!this.options.font) {\n      this.options.font = DEFAULT_FONT;\n    }\n\n    if (!defined(this.options.fill)) {\n      this.fill(DEFAULT_FILL);\n    }\n  }\n\n  if (superclass) Text.__proto__ = superclass;\n  Text.prototype = Object.create(superclass && superclass.prototype);\n  Text.prototype.constructor = Text;\n  var prototypeAccessors = {\n    nodeType: {\n      configurable: true\n    }\n  };\n\n  prototypeAccessors.nodeType.get = function () {\n    return \"Text\";\n  };\n\n  Text.prototype.content = function content(value) {\n    if (defined(value)) {\n      this.options.set(\"content\", value);\n      return this;\n    }\n\n    return this.options.get(\"content\");\n  };\n\n  Text.prototype.measure = function measure() {\n    var metrics = measureText(this.content(), {\n      font: this.options.get(\"font\")\n    });\n    return metrics;\n  };\n\n  Text.prototype.rect = function rect() {\n    var size = this.measure();\n    var pos = this.position().clone();\n    return new Rect(pos, [size.width, size.height]);\n  };\n\n  Text.prototype.bbox = function bbox(transformation) {\n    var combinedMatrix = toMatrix(this.currentTransform(transformation));\n    return this.rect().bbox(combinedMatrix);\n  };\n\n  Text.prototype.rawBBox = function rawBBox() {\n    return this.rect().bbox();\n  };\n\n  Text.prototype._containsPoint = function _containsPoint(point) {\n    return this.rect().containsPoint(point);\n  };\n\n  Object.defineProperties(Text.prototype, prototypeAccessors);\n  return Text;\n}(paintable(withPoints(Element, [\"position\"])));\n\nexport default Text;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/node_modules/@progress/kendo-drawing/dist/es/shapes/text.js"],"names":["Element","Point","Rect","toMatrix","paintable","withPoints","defined","measureText","DEFAULT_FONT","DEFAULT_FILL","Text","superclass","content","position","options","call","font","fill","__proto__","prototype","Object","create","constructor","prototypeAccessors","nodeType","configurable","get","value","set","measure","metrics","rect","size","pos","clone","width","height","bbox","transformation","combinedMatrix","currentTransform","rawBBox","_containsPoint","point","containsPoint","defineProperties"],"mappings":"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","sourcesContent":["import Element from './element';\nimport Point from '../geometry/point';\nimport Rect from '../geometry/rect';\nimport toMatrix from '../geometry/to-matrix';\nimport paintable from '../mixins/paintable';\nimport withPoints from '../mixins/with-points';\nimport { defined, measureText } from '../util';\n\n\nvar DEFAULT_FONT = \"12px sans-serif\";\nvar DEFAULT_FILL = \"#000\";\n\nvar Text = (function (superclass) {\n    function Text(content, position, options) {\n        if ( position === void 0 ) position = new Point();\n        if ( options === void 0 ) options = {};\n\n        superclass.call(this, options);\n\n        this.content(content);\n        this.position(position);\n\n        if (!this.options.font) {\n            this.options.font = DEFAULT_FONT;\n        }\n\n        if (!defined(this.options.fill)) {\n            this.fill(DEFAULT_FILL);\n        }\n    }\n\n    if ( superclass ) Text.__proto__ = superclass;\n    Text.prototype = Object.create( superclass && superclass.prototype );\n    Text.prototype.constructor = Text;\n\n    var prototypeAccessors = { nodeType: { configurable: true } };\n\n    prototypeAccessors.nodeType.get = function () {\n        return \"Text\";\n    };\n\n    Text.prototype.content = function content (value) {\n        if (defined(value)) {\n            this.options.set(\"content\", value);\n            return this;\n        }\n\n        return this.options.get(\"content\");\n    };\n\n    Text.prototype.measure = function measure () {\n        var metrics = measureText(this.content(), {\n            font: this.options.get(\"font\")\n        });\n\n        return metrics;\n    };\n\n    Text.prototype.rect = function rect () {\n        var size = this.measure();\n        var pos = this.position().clone();\n        return new Rect(pos, [ size.width, size.height ]);\n    };\n\n    Text.prototype.bbox = function bbox (transformation) {\n        var combinedMatrix = toMatrix(this.currentTransform(transformation));\n        return this.rect().bbox(combinedMatrix);\n    };\n\n    Text.prototype.rawBBox = function rawBBox () {\n        return this.rect().bbox();\n    };\n\n    Text.prototype._containsPoint = function _containsPoint (point) {\n        return this.rect().containsPoint(point);\n    };\n\n    Object.defineProperties( Text.prototype, prototypeAccessors );\n\n    return Text;\n}(paintable(withPoints(Element, [ \"position\" ]))));\n\nexport default Text;\n"]},"metadata":{},"sourceType":"module"}