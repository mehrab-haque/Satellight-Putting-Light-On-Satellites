{"ast":null,"code":"import HasObservers from '../core/has-observers';\nimport toMatrix from './to-matrix';\nimport Matrix from './matrix';\nimport Point from './point';\n\nvar Transformation = function (HasObservers) {\n  function Transformation(matrix) {\n    if (matrix === void 0) matrix = Matrix.unit();\n    HasObservers.call(this);\n    this._matrix = matrix;\n  }\n\n  if (HasObservers) Transformation.__proto__ = HasObservers;\n  Transformation.prototype = Object.create(HasObservers && HasObservers.prototype);\n  Transformation.prototype.constructor = Transformation;\n\n  Transformation.prototype.clone = function clone() {\n    return new Transformation(this._matrix.clone());\n  };\n\n  Transformation.prototype.equals = function equals(other) {\n    return other && other._matrix.equals(this._matrix);\n  };\n\n  Transformation.prototype.translate = function translate(x, y) {\n    this._matrix = this._matrix.multiplyCopy(Matrix.translate(x, y));\n\n    this._optionsChange();\n\n    return this;\n  };\n\n  Transformation.prototype.scale = function scale(scaleX, scaleY, origin) {\n    if (scaleY === void 0) scaleY = scaleX;\n    if (origin === void 0) origin = null;\n    var originPoint = origin;\n\n    if (originPoint) {\n      originPoint = Point.create(originPoint);\n      this._matrix = this._matrix.multiplyCopy(Matrix.translate(originPoint.x, originPoint.y));\n    }\n\n    this._matrix = this._matrix.multiplyCopy(Matrix.scale(scaleX, scaleY));\n\n    if (originPoint) {\n      this._matrix = this._matrix.multiplyCopy(Matrix.translate(-originPoint.x, -originPoint.y));\n    }\n\n    this._optionsChange();\n\n    return this;\n  };\n\n  Transformation.prototype.rotate = function rotate(angle, origin) {\n    var originPoint = Point.create(origin) || Point.ZERO;\n    this._matrix = this._matrix.multiplyCopy(Matrix.rotate(angle, originPoint.x, originPoint.y));\n\n    this._optionsChange();\n\n    return this;\n  };\n\n  Transformation.prototype.multiply = function multiply(transformation) {\n    var matrix = toMatrix(transformation);\n    this._matrix = this._matrix.multiplyCopy(matrix);\n\n    this._optionsChange();\n\n    return this;\n  };\n\n  Transformation.prototype.matrix = function matrix(value) {\n    if (value) {\n      this._matrix = value;\n\n      this._optionsChange();\n\n      return this;\n    }\n\n    return this._matrix;\n  };\n\n  Transformation.prototype._optionsChange = function _optionsChange() {\n    this.optionsChange({\n      field: \"transform\",\n      value: this\n    });\n  };\n\n  return Transformation;\n}(HasObservers);\n\nexport default Transformation;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/node_modules/@progress/kendo-drawing/dist/es/geometry/transformation.js"],"names":["HasObservers","toMatrix","Matrix","Point","Transformation","matrix","unit","call","_matrix","__proto__","prototype","Object","create","constructor","clone","equals","other","translate","x","y","multiplyCopy","_optionsChange","scale","scaleX","scaleY","origin","originPoint","rotate","angle","ZERO","multiply","transformation","value","optionsChange","field"],"mappings":"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","sourcesContent":["import HasObservers from '../core/has-observers';\nimport toMatrix from './to-matrix';\nimport Matrix from './matrix';\nimport Point from './point';\n\nvar Transformation = (function (HasObservers) {\n    function Transformation(matrix) {\n        if ( matrix === void 0 ) matrix = Matrix.unit();\n\n        HasObservers.call(this);\n\n        this._matrix = matrix;\n    }\n\n    if ( HasObservers ) Transformation.__proto__ = HasObservers;\n    Transformation.prototype = Object.create( HasObservers && HasObservers.prototype );\n    Transformation.prototype.constructor = Transformation;\n\n    Transformation.prototype.clone = function clone () {\n        return new Transformation(\n            this._matrix.clone()\n        );\n    };\n\n    Transformation.prototype.equals = function equals (other) {\n        return other &&\n               other._matrix.equals(this._matrix);\n    };\n\n    Transformation.prototype.translate = function translate (x, y) {\n        this._matrix = this._matrix.multiplyCopy(Matrix.translate(x, y));\n\n        this._optionsChange();\n        return this;\n    };\n\n    Transformation.prototype.scale = function scale (scaleX, scaleY, origin) {\n        if ( scaleY === void 0 ) scaleY = scaleX;\n        if ( origin === void 0 ) origin = null;\n\n        var originPoint = origin;\n\n        if (originPoint) {\n            originPoint = Point.create(originPoint);\n            this._matrix = this._matrix.multiplyCopy(Matrix.translate(originPoint.x, originPoint.y));\n        }\n\n        this._matrix = this._matrix.multiplyCopy(Matrix.scale(scaleX, scaleY));\n\n        if (originPoint) {\n            this._matrix = this._matrix.multiplyCopy(Matrix.translate(-originPoint.x, -originPoint.y));\n        }\n\n        this._optionsChange();\n        return this;\n    };\n\n    Transformation.prototype.rotate = function rotate (angle, origin) {\n        var originPoint = Point.create(origin) || Point.ZERO;\n\n        this._matrix = this._matrix.multiplyCopy(Matrix.rotate(angle, originPoint.x, originPoint.y));\n\n        this._optionsChange();\n        return this;\n    };\n\n    Transformation.prototype.multiply = function multiply (transformation) {\n        var matrix = toMatrix(transformation);\n\n        this._matrix = this._matrix.multiplyCopy(matrix);\n\n        this._optionsChange();\n        return this;\n    };\n\n    Transformation.prototype.matrix = function matrix (value) {\n        if (value) {\n            this._matrix = value;\n            this._optionsChange();\n            return this;\n        }\n\n        return this._matrix;\n    };\n\n    Transformation.prototype._optionsChange = function _optionsChange () {\n        this.optionsChange({\n            field: \"transform\",\n            value: this\n        });\n    };\n\n    return Transformation;\n}(HasObservers));\n\nexport default Transformation;\n"]},"metadata":{},"sourceType":"module"}