{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\src\\\\components\\\\ModelView.js\";\nimport React, { useState, createRef, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { getSatelliteInfo } from \"tle.js\";\nimport Globe, { Point } from 'react-globe.gl';\nimport * as THREE from 'three';\nconst ModelView = forwardRef((props, ref) => {\n  const globeEl = useRef();\n  useImperativeHandle(ref, () => ({\n    setSatellite(sat) {}\n\n  }));\n  useEffect(() => {}, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Globe, {\n    showAtmosphere: false,\n    backgroundColor: \"#ffffff\",\n    ref: globeEl,\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-day.jpg\",\n    bumpImageUrl: \"//unpkg.com/three-globe/example/img/earth-topology.png\",\n    showGraticules: true,\n    onCustomLayerHover: d => {\n      if (d != null && d != undefined) {}\n    },\n    onCustomLayerClick: d => {\n      if (d != null && d != undefined) {}\n    },\n    customLayerData: pointArr,\n    customThreeObject: d => {\n      var mesh = new THREE.Mesh(new THREE.SphereBufferGeometry(d.radius), new THREE.MeshLambertMaterial({\n        color: d.color\n      }));\n      var group = new THREE.Group();\n      group.add(mesh1);\n      return group;\n    },\n    customThreeObjectUpdate: (obj, d) => {\n      Object.assign(obj.position, globeEl.current.getCoords(d.lat, d.lng, d.alt));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }));\n});\nexport default ModelView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/ModelView.js"],"names":["React","useState","createRef","useRef","useEffect","forwardRef","useImperativeHandle","getSatelliteInfo","Globe","Point","THREE","ModelView","props","ref","globeEl","setSatellite","sat","d","undefined","pointArr","mesh","Mesh","SphereBufferGeometry","radius","MeshLambertMaterial","color","group","Group","add","mesh1","obj","Object","assign","position","current","getCoords","lat","lng","alt"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,EAAiCC,MAAjC,EAAwCC,SAAxC,EAAkDC,UAAlD,EAA8DC,mBAA9D,QAAwF,OAAxF;AACA,SAASC,gBAAT,QAAiC,QAAjC;AACA,OAAOC,KAAP,IAAcC,KAAd,QAA0B,gBAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,MAAMC,SAAS,GAACN,UAAU,CAAC,CAACO,KAAD,EAAOC,GAAP,KAAa;AAEtC,QAAMC,OAAO,GAAGX,MAAM,EAAtB;AAEAG,EAAAA,mBAAmB,CAACO,GAAD,EAAM,OAAO;AAC9BE,IAAAA,YAAY,CAACC,GAAD,EAAK,CAEhB;;AAH6B,GAAP,CAAN,CAAnB;AAQAZ,EAAAA,SAAS,CAAC,MAAI,CAEb,CAFQ,EAEP,EAFO,CAAT;AAIA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACM,IAAA,cAAc,EAAE,KADtB;AAEM,IAAA,eAAe,EAAC,SAFtB;AAGM,IAAA,GAAG,EAAEU,OAHX;AAIM,IAAA,aAAa,EAAC,mDAJpB;AAKM,IAAA,YAAY,EAAC,wDALnB;AAMM,IAAA,cAAc,EAAE,IANtB;AASM,IAAA,kBAAkB,EAAEG,CAAC,IAAE;AACnB,UAAGA,CAAC,IAAE,IAAH,IAAWA,CAAC,IAAEC,SAAjB,EAA2B,CAE1B;AACF,KAbT;AAgBI,IAAA,kBAAkB,EAAED,CAAC,IAAE;AACnB,UAAGA,CAAC,IAAE,IAAH,IAAWA,CAAC,IAAEC,SAAjB,EAA2B,CAE1B;AACF,KApBP;AAuBE,IAAA,eAAe,EAAEC,QAvBnB;AAwBE,IAAA,iBAAiB,EAAEF,CAAC,IAAG;AACrB,UAAIG,IAAI,GAAC,IAAIV,KAAK,CAACW,IAAV,CACP,IAAIX,KAAK,CAACY,oBAAV,CAA+BL,CAAC,CAACM,MAAjC,CADO,EAEP,IAAIb,KAAK,CAACc,mBAAV,CAA8B;AAAEC,QAAAA,KAAK,EAAER,CAAC,CAACQ;AAAX,OAA9B,CAFO,CAAT;AAIA,UAAIC,KAAK,GAAC,IAAIhB,KAAK,CAACiB,KAAV,EAAV;AACAD,MAAAA,KAAK,CAACE,GAAN,CAAUC,KAAV;AACA,aAAOH,KAAP;AACD,KAhCH;AAkCE,IAAA,uBAAuB,EAAE,CAACI,GAAD,EAAMb,CAAN,KAAY;AACnCc,MAAAA,MAAM,CAACC,MAAP,CAAcF,GAAG,CAACG,QAAlB,EAA4BnB,OAAO,CAACoB,OAAR,CAAgBC,SAAhB,CAA0BlB,CAAC,CAACmB,GAA5B,EAAiCnB,CAAC,CAACoB,GAAnC,EAAwCpB,CAAC,CAACqB,GAA1C,CAA5B;AACD,KApCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AA0CD,CA1DyB,CAA1B;AA4DA,eAAe3B,SAAf","sourcesContent":["import React,{useState,createRef,useRef,useEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\nimport Globe,{Point} from 'react-globe.gl';\r\nimport * as THREE from 'three'\r\n\r\nconst ModelView=forwardRef((props,ref)=>{\r\n\r\n  const globeEl = useRef();\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setSatellite(sat){\r\n\r\n    }\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n  },[])\r\n\r\n  return(\r\n    <div>\r\n      <Globe\r\n            showAtmosphere={false}\r\n            backgroundColor='#ffffff'\r\n            ref={globeEl}\r\n            globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-day.jpg\"\r\n            bumpImageUrl=\"//unpkg.com/three-globe/example/img/earth-topology.png\"\r\n            showGraticules={true}\r\n\r\n\r\n            onCustomLayerHover={d=>{\r\n                if(d!=null && d!=undefined){\r\n\r\n                }\r\n              }\r\n          }\r\n\r\n          onCustomLayerClick={d=>{\r\n              if(d!=null && d!=undefined){\r\n\r\n              }\r\n            }\r\n        }\r\n\r\n        customLayerData={pointArr}\r\n        customThreeObject={d =>{\r\n          var mesh=new THREE.Mesh(\r\n            new THREE.SphereBufferGeometry(d.radius),\r\n            new THREE.MeshLambertMaterial({ color: d.color })\r\n          )\r\n          var group=new THREE.Group()\r\n          group.add(mesh1)\r\n          return group\r\n        }\r\n      }\r\n        customThreeObjectUpdate={(obj, d) => {\r\n          Object.assign(obj.position, globeEl.current.getCoords(d.lat, d.lng, d.alt));\r\n        }}\r\n       />\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default ModelView\r\n"]},"metadata":{},"sourceType":"module"}