{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\src\\\\components\\\\MapView.js\";\nimport React, { useState, createRef, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { getSatelliteInfo } from \"tle.js\";\n\nfunction getNormalizedCoord(coord, zoom) {\n  const y = coord.y;\n  let x = coord.x;\n  const tileRange = 1 << zoom;\n\n  if (y < 0 || y >= tileRange) {\n    return null;\n  }\n\n  if (x < 0 || x >= tileRange) {\n    x = (x % tileRange + tileRange) % tileRange;\n  }\n\n  return {\n    x: x,\n    y: y\n  };\n}\n\nvar posInterval,\n    pathInterval,\n    map,\n    marker,\n    infoWindow,\n    polyLine,\n    poly = [],\n    tle,\n    data;\nconst MapView = forwardRef((props, ref) => {\n  tle = [props.data.tle_line1, props.data.tle_line2];\n  data = props.data;\n  const [satCode, setSatCode] = useState(props.satCode);\n  const [timeDiff, setTimeDiff] = useState(props.timeDiff);\n  const initialData = getSatelliteInfo(tle, Date.now() + timeDiff, 0, 0);\n  const containerRef = useRef();\n  useEffect(() => {\n    map = new window.google.maps.Map(containerRef.current, {\n      center: {\n        lat: initialData.lat,\n        lng: initialData.lng\n      },\n      zoom: 3,\n      streetViewControl: false,\n      mapTypeControlOptions: {\n        mapTypeIds: [window.google.maps.MapTypeId.ROADMAP, window.google.maps.MapTypeId.HYBRID]\n      }\n    });\n    let iconMarker = new window.google.maps.MarkerImage(data.icon_url, null, new window.google.maps.Point(0, 0),\n    /* origin is 0,0 */\n    new window.google.maps.Point(30, 30),\n    /* anchor is bottom center of the scaled image */\n    new window.google.maps.Size(60, 50));\n    marker = new window.google.maps.Marker({\n      position: map.center,\n      icon: iconMarker,\n      title: \"Hello World!\"\n    });\n    marker.setMap(map);\n    polyLine = new window.google.maps.Polyline({\n      path: poly,\n      geodesic: true,\n      strokeColor: \"#FF0000\",\n      strokeOpacity: 1.0,\n      strokeWeight: 4\n    });\n    polyLine.setMap(map);\n  }, []);\n  useEffect(() => {\n    if (satCode) {\n      posInterval = setInterval(() => {\n        var currData = getSatelliteInfo(tle, Date.now() + timeDiff, 0, 0);\n        marker.setPosition({\n          lat: currData.lat,\n          lng: currData.lng\n        });\n        /*var info=`<div>\r\n            <span>International Space Station</span><br/>\r\n            <center><img style={{marginTop:'5px'}}  height=\"30px\" width='40px' src='https://satellitedatanasa.s3.ap-south-1.amazonaws.com/countryFlag/america.png'/></center>`+\r\n            '<center>Lat:'+curr.lat.toFixed(3)+', Lng:'+curr.lng.toFixed(3)+'</center>'+\r\n            '<center>Velocity:'+currData.velocity.toFixed(3)+'km/s <br/> Height:'+currData.height.toFixed(3)+'km</center>'+\r\n            '</div>'\r\n          infowindow.setContent(info)*/\n      }, 100);\n      pathInterval = setInterval(() => {\n        var currData = getSatelliteInfo(tle, Date.now() + timeDiff, 0, 0);\n        poly.push(currData);\n        polyLine.setPath(poly);\n      }, 1000);\n    } else {\n      clearInterval(posInterval);\n      clearInterval(pathInterval);\n    }\n  }, [satCode]);\n  useImperativeHandle(ref, () => ({\n    setSatellite(sat) {\n      data = sat.data;\n      tle = [sat.data.tle_line1, sat.data.tle_line2];\n      poly = [];\n      var currData = getSatelliteInfo(tle, Date.now() + timeDiff, 0, 0);\n      map.setCenter({\n        lat: currData.lat,\n        lng: currData.lng\n      });\n      setSatCode(sat.satCode);\n    }\n\n  }));\n  useEffect(() => {}, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  });\n});\nexport default MapView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/MapView.js"],"names":["React","useState","createRef","useRef","useEffect","forwardRef","useImperativeHandle","getSatelliteInfo","getNormalizedCoord","coord","zoom","y","x","tileRange","posInterval","pathInterval","map","marker","infoWindow","polyLine","poly","tle","data","MapView","props","ref","tle_line1","tle_line2","satCode","setSatCode","timeDiff","setTimeDiff","initialData","Date","now","containerRef","window","google","maps","Map","current","center","lat","lng","streetViewControl","mapTypeControlOptions","mapTypeIds","MapTypeId","ROADMAP","HYBRID","iconMarker","MarkerImage","icon_url","Point","Size","Marker","position","icon","title","setMap","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","setInterval","currData","setPosition","push","setPath","clearInterval","setSatellite","sat","setCenter","width","height"],"mappings":"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","sourcesContent":["import React,{useState,createRef,useRef,useEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\n\r\nfunction getNormalizedCoord(coord, zoom) {\r\n        const y = coord.y;\r\n        let x = coord.x;\r\n        const tileRange = 1 << zoom;\r\n        if (y < 0 || y >= tileRange) {\r\n          return null;\r\n        }\r\n        if (x < 0 || x >= tileRange) {\r\n          x = ((x % tileRange) + tileRange) % tileRange;\r\n        }\r\n        return {\r\n          x: x,\r\n          y: y\r\n        };\r\n      }\r\n\r\nvar posInterval,pathInterval,map,marker,infoWindow,polyLine,poly=[],tle,data\r\n\r\nconst MapView=forwardRef((props,ref)=>{\r\n  tle=[props.data.tle_line1,props.data.tle_line2]\r\n  data=props.data\r\n  const [satCode,setSatCode]=useState(props.satCode)\r\n  const [timeDiff,setTimeDiff]=useState(props.timeDiff)\r\n  const initialData=getSatelliteInfo(tle,Date.now()+timeDiff,0,0)\r\n  const containerRef=useRef()\r\n\r\n\r\n  useEffect(()=>{\r\n    map = new window.google.maps.Map(containerRef.current, {\r\n      center: {\r\n        lat: initialData.lat,\r\n        lng: initialData.lng\r\n      },\r\n      zoom: 3,\r\n      streetViewControl: false,\r\n      mapTypeControlOptions: {\r\n        mapTypeIds: [window.google.maps.MapTypeId.ROADMAP,window.google.maps.MapTypeId.HYBRID]\r\n      }\r\n    });\r\n\r\n    let iconMarker = new window.google.maps.MarkerImage(\r\n                      data.icon_url,\r\n                      null,\r\n                      new window.google.maps.Point(0, 0), /* origin is 0,0 */\r\n                      new window.google.maps.Point(30, 30), /* anchor is bottom center of the scaled image */\r\n                      new window.google.maps.Size(60, 50)\r\n                  );\r\n\r\n     marker = new window.google.maps.Marker({\r\n        position: map.center,\r\n        icon:iconMarker,\r\n        title:\"Hello World!\"\r\n    });\r\n    marker.setMap(map);\r\n    polyLine= new window.google.maps.Polyline({\r\n      path: poly,\r\n      geodesic: true,\r\n      strokeColor: \"#FF0000\",\r\n      strokeOpacity: 1.0,\r\n      strokeWeight: 4\r\n    });\r\n\r\n    polyLine.setMap(map)\r\n\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    if(satCode) {\r\n      posInterval = setInterval(() => {\r\n        var currData=getSatelliteInfo(tle,Date.now()+timeDiff,0,0)\r\n        marker.setPosition({\r\n          lat:currData.lat,\r\n          lng:currData.lng\r\n        })\r\n\r\n        /*var info=`<div>\r\n            <span>International Space Station</span><br/>\r\n            <center><img style={{marginTop:'5px'}}  height=\"30px\" width='40px' src='https://satellitedatanasa.s3.ap-south-1.amazonaws.com/countryFlag/america.png'/></center>`+\r\n            '<center>Lat:'+curr.lat.toFixed(3)+', Lng:'+curr.lng.toFixed(3)+'</center>'+\r\n            '<center>Velocity:'+currData.velocity.toFixed(3)+'km/s <br/> Height:'+currData.height.toFixed(3)+'km</center>'+\r\n            '</div>'\r\n\r\n        infowindow.setContent(info)*/\r\n\r\n      }, 100);\r\n      pathInterval = setInterval(() => {\r\n        var currData=getSatelliteInfo(tle,Date.now()+timeDiff,0,0)\r\n        poly.push(currData)\r\n        polyLine.setPath(poly)\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(posInterval);\r\n      clearInterval(pathInterval);\r\n    }\r\n  },[satCode])\r\n\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setSatellite(sat){\r\n      data=sat.data\r\n      tle=[sat.data.tle_line1,sat.data.tle_line2]\r\n      poly=[]\r\n      var currData=getSatelliteInfo(tle,Date.now()+timeDiff,0,0)\r\n      map.setCenter({\r\n        lat:currData.lat,\r\n        lng:currData.lng\r\n      })\r\n      setSatCode(sat.satCode)\r\n    }\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n  },[])\r\n\r\n  return(\r\n    <div ref={containerRef} style={{ width: \"100%\", height: \"100%\" }}/>\r\n  )\r\n})\r\n\r\nexport default MapView\r\n"]},"metadata":{},"sourceType":"module"}