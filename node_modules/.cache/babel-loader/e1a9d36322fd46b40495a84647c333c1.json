{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\src\\\\components\\\\FPVView.js\";\nimport React, { useState, createRef, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { getSatelliteInfo } from \"tle.js\";\nimport WorldWind from '@nasaworldwind/worldwind';\nvar wwd,\n    timeDiff,\n    animator,\n    interval,\n    map,\n    marker,\n    infoWindow,\n    polyLine,\n    poly = [],\n    tle,\n    data;\nconst FPVView = forwardRef((props, ref) => {\n  const containerRef = useRef();\n  const [satCode, setSatCode] = useState(props.satCode);\n  tle = [props.data.tle_line1, props.data.tle_line2];\n  timeDiff = props.timeDiff;\n  useImperativeHandle(ref, () => ({\n    setSatellite(sat) {\n      setSatCode(sat.satCode);\n    },\n\n    setTimeDiff(val) {\n      timeDiff = val;\n    }\n\n  }));\n  useEffect(() => {\n    WorldWind.Logger.setLoggingLevel(WorldWind.Logger.LEVEL_WARNING);\n    wwd = new WorldWind.WorldWindow(containerRef.current);\n    animator = new WorldWind.GoToAnimator(wwd);\n    var bMNGOneImageLayer = new WorldWind.BMNGOneImageLayer();\n    var bMNGLayer = new WorldWind.BMNGLayer();\n    var bMNGLandSatLayer = new WorldWind.BMNGLandsatLayer();\n    var atmosphereLayer = new WorldWind.AtmosphereLayer(require('../assets/starfield.png'));\n    var starFieldLayer = new WorldWind.StarFieldLayer();\n    var layers = [{\n      layer: bMNGOneImageLayer,\n      enabled: true\n    }, {\n      layer: bMNGLayer,\n      enabled: true\n    }, {\n      layer: bMNGLandSatLayer,\n      enabled: true\n    }, {\n      layer: starFieldLayer,\n      enabled: true\n    }, {\n      layer: atmosphereLayer,\n      enabled: true\n    }, {\n      layer: new WorldWind.ViewControlsLayer(wwd),\n      enabled: true\n    }];\n\n    for (var l = 0; l < layers.length; l++) {\n      layers[l].layer.enabled = layers[l].enabled;\n      wwd.addLayer(layers[l].layer);\n    }\n\n    atmosphereLayer.time = Date.now() + timeDiff;\n\n    function runSimulation() {\n      atmosphereLayer.time = new Date(Date.now() + timeDiff);\n      wwd.redraw();\n      requestAnimationFrame(runSimulation);\n    }\n\n    requestAnimationFrame(runSimulation);\n  }, []);\n  useEffect(() => {\n    if (satCode) {\n      interval = setInterval(() => {\n        var currData = getSatelliteInfo(tle, Date.now() + timeDiff, 23.762397, 90.418917);\n        wwd.goTo(new WorldWind.Position(currData.lat, currData.lng, currData.height * 1000));\n      }, 100);\n    } else {\n      clearInterval(interval);\n    }\n  }, [satCode]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, \"asasas\"), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: containerRef,\n    className: \"globeBg\",\n    style: {\n      backgroundColor: '#000000',\n      width: \"100%\",\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }));\n});\nexport default FPVView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/FPVView.js"],"names":["React","useState","createRef","useRef","useEffect","forwardRef","useImperativeHandle","getSatelliteInfo","WorldWind","wwd","timeDiff","animator","interval","map","marker","infoWindow","polyLine","poly","tle","data","FPVView","props","ref","containerRef","satCode","setSatCode","tle_line1","tle_line2","setSatellite","sat","setTimeDiff","val","Logger","setLoggingLevel","LEVEL_WARNING","WorldWindow","current","GoToAnimator","bMNGOneImageLayer","BMNGOneImageLayer","bMNGLayer","BMNGLayer","bMNGLandSatLayer","BMNGLandsatLayer","atmosphereLayer","AtmosphereLayer","require","starFieldLayer","StarFieldLayer","layers","layer","enabled","ViewControlsLayer","l","length","addLayer","time","Date","now","runSimulation","redraw","requestAnimationFrame","setInterval","currData","goTo","Position","lat","lng","height","clearInterval","backgroundColor","width"],"mappings":"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","sourcesContent":["import React,{useState,createRef,useRef,useEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\nimport WorldWind from '@nasaworldwind/worldwind'\r\n\r\nvar wwd,timeDiff,animator,interval,map,marker,infoWindow,polyLine,poly=[],tle,data\r\n\r\nconst FPVView=forwardRef((props,ref)=>{\r\n  const containerRef=useRef()\r\n  const [satCode,setSatCode]=useState(props.satCode)\r\n  tle=[props.data.tle_line1,props.data.tle_line2]\r\n  timeDiff=props.timeDiff\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setSatellite(sat){\r\n      setSatCode(sat.satCode)\r\n    },\r\n    setTimeDiff(val){\r\n      timeDiff=val\r\n    }\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    WorldWind.Logger.setLoggingLevel(WorldWind.Logger.LEVEL_WARNING);\r\n    wwd = new WorldWind.WorldWindow(containerRef.current);\r\n    animator=new WorldWind.GoToAnimator(wwd)\r\n    var bMNGOneImageLayer = new WorldWind.BMNGOneImageLayer();\r\n    var bMNGLayer=new WorldWind.BMNGLayer()\r\n    var bMNGLandSatLayer=new WorldWind.BMNGLandsatLayer();\r\n    var atmosphereLayer = new WorldWind.AtmosphereLayer(require('../assets/starfield.png'));\r\n    var starFieldLayer=new WorldWind.StarFieldLayer()\r\n\r\n    var layers = [\r\n        {layer:bMNGOneImageLayer,enabled:true},\r\n        {layer:bMNGLayer,enabled:true},\r\n        {layer:bMNGLandSatLayer,enabled:true},\r\n        {layer:starFieldLayer,enabled:true},\r\n        {layer:atmosphereLayer,enabled:true},\r\n        {layer: new WorldWind.ViewControlsLayer(wwd), enabled: true}\r\n    ];\r\n\r\n    for (var l = 0; l < layers.length; l++) {\r\n        layers[l].layer.enabled = layers[l].enabled;\r\n        wwd.addLayer(layers[l].layer);\r\n    }\r\n        atmosphereLayer.time = Date.now()+timeDiff;\r\n        function runSimulation() {\r\n            atmosphereLayer.time = new Date(Date.now()+timeDiff)\r\n            wwd.redraw();\r\n            requestAnimationFrame(runSimulation);\r\n        }\r\n        requestAnimationFrame(runSimulation);\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    if(satCode) {\r\n      interval = setInterval(() => {\r\n        var currData=getSatelliteInfo(tle,Date.now()+timeDiff,23.762397,90.418917)\r\n        wwd.goTo(new WorldWind.Position(currData.lat,currData.lng,currData.height*1000));\r\n\r\n      }, 100);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n  },[satCode])\r\n\r\n  return(\r\n    <div>\r\n      <div>\r\n        asasas\r\n      </div>\r\n      <canvas ref={containerRef} className='globeBg' style={{ backgroundColor:'#000000',width: \"100%\", height: \"100%\" }}/>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default FPVView\r\n"]},"metadata":{},"sourceType":"module"}