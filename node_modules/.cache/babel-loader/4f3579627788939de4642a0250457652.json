{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Md. Mehrab Haque\\\\Desktop\\\\satellight\\\\src\\\\components\\\\ModelView.js\";\nimport React, { useState, createRef, useRef, useEffect, useLayoutEffect, forwardRef, useImperativeHandle } from 'react';\nimport { getSatelliteInfo } from \"tle.js\";\nimport Globe, { Point } from 'react-globe.gl';\nimport * as THREE from 'three';\nimport { sat_data } from '../assets/master';\n\nconst map = (value, x1, y1, x2, y2) => (value - x1) * (y2 - x2) / (y1 - x1) + x2;\n\nvar sat_arr = [];\nObject.keys(sat_data).map((key, ind) => {\n  var data = sat_data[key];\n  console.log(key);\n  sat_arr.push(getSatelliteInfo([data.tle_line1, data.tle_line2], Date.now(), 0, 0, 0));\n});\nvar interval;\nvar point_arr = [];\nsat_arr.map((sat, ind) => {\n  var schema = {\n    lat: sat.lat,\n    lng: sat.lng,\n    alt: sat.height / 6400,\n    radius: map(sat.height, 400, 35000, 3, 12),\n    height: sat.height,\n    velocity: sat.velocity,\n    color: '#000000',\n    ind: ind\n  };\n  point_arr.push(schema);\n});\nconst ModelView = forwardRef((props, ref) => {\n  const [pointArr, setPointArr] = useState(point_arr);\n  const [container, setContainer] = useState({\n    height: 0,\n    width: 0\n  });\n  const [satCode, setSatCode] = useState(props.satCode);\n  const globeEl = useRef();\n  useImperativeHandle(ref, () => ({\n    setSatellite(sat) {\n      setSatCode(sat.satCode);\n    }\n\n  }));\n  useEffect(() => {\n    //globeEl.current.controls().autoRotate = true;\n    //globeEl.current.controls().autoRotateSpeed = 0.2;\n    console.log(props.parent.current.offsetWidth);\n    setContainer({\n      height: props.parent.current.offsetHeight,\n      width: props.parent.current.offsetWidth\n    });\n  }, []);\n  useEffect(() => {\n    var defaultSat = Object.keys(sat_data).indexOf(satCode);\n    globeEl.current.pointOfView({\n      lat: point_arr[defaultSat].lat,\n      lng: point_arr[defaultSat].lng,\n      altitude: pointArr[defaultSat].alt + 1.2\n    }, 1000);\n  }, [satCode]);\n  useEffect(() => {\n    if (satCode) {\n      interval = setInterval(() => {\n        sat_arr = [];\n        Object.keys(sat_data).map((key, ind) => {\n          var data = sat_data[key];\n          sat_arr.push(getSatelliteInfo([data.tle_line1, data.tle_line2], Date.now(), 23.762397, 90.418917, 0));\n        });\n        point_arr = [];\n        sat_arr.map((sat, ind) => {\n          var schema = {\n            lat: sat.lat,\n            lng: sat.lng,\n            alt: sat.height / 6400,\n            radius: map(sat.height, 400, 35000, 2.5, 6),\n            height: sat.height,\n            velocity: sat.velocity,\n            color: '#000000',\n            ind: ind\n          };\n          if (Object.keys(sat_data)[ind] == satCode) schema['color'] = '#880000';\n          point_arr.push(schema);\n        });\n        setPointArr(point_arr);\n      }, 500);\n    } else {\n      clearInterval(interval);\n    }\n  }, [satCode]);\n  return /*#__PURE__*/React.createElement(Globe, {\n    showAtmosphere: false,\n    backgroundColor: \"#ffffff\",\n    height: container.height,\n    width: container.width,\n    ref: globeEl,\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-day.jpg\",\n    bumpImageUrl: \"//unpkg.com/three-globe/example/img/earth-topology.png\",\n    showGraticules: true,\n    onCustomLayerHover: d => {\n      if (d != null && d != undefined) {}\n    },\n    onCustomLayerClick: d => {\n      if (d != null && d != undefined) {}\n    },\n    customLayerData: pointArr,\n    customThreeObject: d => {\n      var mesh = new THREE.Mesh(new THREE.SphereBufferGeometry(d.radius), new THREE.MeshLambertMaterial({\n        color: d.color\n      }));\n      var group = new THREE.Group();\n      group.add(mesh);\n      return group;\n    },\n    customThreeObjectUpdate: (obj, d) => {\n      Object.assign(obj.position, globeEl.current.getCoords(d.lat, d.lng, d.alt));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  });\n});\nexport default ModelView;","map":{"version":3,"sources":["C:/Users/Md. Mehrab Haque/Desktop/satellight/src/components/ModelView.js"],"names":["React","useState","createRef","useRef","useEffect","useLayoutEffect","forwardRef","useImperativeHandle","getSatelliteInfo","Globe","Point","THREE","sat_data","map","value","x1","y1","x2","y2","sat_arr","Object","keys","key","ind","data","console","log","push","tle_line1","tle_line2","Date","now","interval","point_arr","sat","schema","lat","lng","alt","height","radius","velocity","color","ModelView","props","ref","pointArr","setPointArr","container","setContainer","width","satCode","setSatCode","globeEl","setSatellite","parent","current","offsetWidth","offsetHeight","defaultSat","indexOf","pointOfView","altitude","setInterval","clearInterval","d","undefined","mesh","Mesh","SphereBufferGeometry","MeshLambertMaterial","group","Group","add","obj","assign","position","getCoords"],"mappings":"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","sourcesContent":["import React,{useState,createRef,useRef,useEffect,useLayoutEffect,forwardRef, useImperativeHandle} from 'react'\r\nimport { getSatelliteInfo } from \"tle.js\";\r\nimport Globe,{Point} from 'react-globe.gl';\r\nimport * as THREE from 'three'\r\nimport {sat_data} from '../assets/master'\r\n\r\nconst map = (value, x1, y1, x2, y2) => (value - x1) * (y2 - x2) / (y1 - x1) + x2;\r\n\r\nvar sat_arr=[]\r\nObject.keys(sat_data).map((key,ind)=>{\r\n  var data=sat_data[key]\r\n  console.log(key)\r\n  sat_arr.push(getSatelliteInfo([data.tle_line1,data.tle_line2],Date.now(),0,0,0))\r\n})\r\nvar interval\r\n\r\n  var point_arr=[]\r\n  sat_arr.map((sat,ind)=>{\r\n    var schema={\r\n      lat:sat.lat,\r\n      lng:sat.lng,\r\n      alt:sat.height/6400,\r\n      radius:map(sat.height,400,35000,3,12),\r\n      height:sat.height,\r\n      velocity:sat.velocity,\r\n      color:'#000000',\r\n      ind:ind\r\n    }\r\n    point_arr.push(schema)\r\n  })\r\n\r\nconst ModelView=forwardRef((props,ref)=>{\r\n\r\n  const [pointArr, setPointArr] = useState(point_arr);\r\n  const [container,setContainer]=useState({height:0,width:0})\r\n  const [satCode,setSatCode]=useState(props.satCode)\r\n  const globeEl = useRef();\r\n\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    setSatellite(sat){\r\n      setSatCode(sat.satCode)\r\n    }\r\n }));\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    //globeEl.current.controls().autoRotate = true;\r\n      //globeEl.current.controls().autoRotateSpeed = 0.2;\r\n      console.log(props.parent.current.offsetWidth)\r\n      setContainer({\r\n        height:props.parent.current.offsetHeight,\r\n        width:props.parent.current.offsetWidth\r\n      })\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    var defaultSat=Object.keys(sat_data).indexOf(satCode)\r\n    globeEl.current.pointOfView({ lat:point_arr[defaultSat].lat,lng:point_arr[defaultSat].lng,altitude:pointArr[defaultSat].alt+1.2 },1000);\r\n  },[satCode])\r\n\r\n  useEffect(()=>{\r\n    if(satCode) {\r\n      interval = setInterval(() => {\r\n        sat_arr=[]\r\n        Object.keys(sat_data).map((key,ind)=>{\r\n          var data=sat_data[key]\r\n          sat_arr.push(getSatelliteInfo([data.tle_line1,data.tle_line2],Date.now(),23.762397,90.418917,0))\r\n        })\r\n\r\n        point_arr=[]\r\n        sat_arr.map((sat,ind)=>{\r\n          var schema={\r\n            lat:sat.lat,\r\n            lng:sat.lng,\r\n            alt:sat.height/6400,\r\n            radius:map(sat.height,400,35000,2.5,6),\r\n            height:sat.height,\r\n            velocity:sat.velocity,\r\n            color:'#000000',\r\n            ind:ind\r\n          }\r\n          if(Object.keys(sat_data)[ind]==satCode)\r\n            schema['color']='#880000'\r\n          point_arr.push(schema)\r\n        })\r\n        setPointArr(point_arr)\r\n      }, 500);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n  },[satCode])\r\n\r\n  return(\r\n\r\n      <Globe\r\n\r\n            showAtmosphere={false}\r\n            backgroundColor='#ffffff'\r\n            height={container.height}\r\n            width={container.width}\r\n            ref={globeEl}\r\n            globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-day.jpg\"\r\n            bumpImageUrl=\"//unpkg.com/three-globe/example/img/earth-topology.png\"\r\n\r\n            showGraticules={true}\r\n\r\n\r\n            onCustomLayerHover={d=>{\r\n                if(d!=null && d!=undefined){\r\n\r\n                }\r\n              }\r\n          }\r\n\r\n          onCustomLayerClick={d=>{\r\n              if(d!=null && d!=undefined){\r\n\r\n              }\r\n            }\r\n        }\r\n\r\n        customLayerData={pointArr}\r\n        customThreeObject={d =>{\r\n          var mesh=new THREE.Mesh(\r\n            new THREE.SphereBufferGeometry(d.radius),\r\n            new THREE.MeshLambertMaterial({ color: d.color })\r\n          )\r\n          var group=new THREE.Group()\r\n          group.add(mesh)\r\n          return group\r\n        }\r\n      }\r\n        customThreeObjectUpdate={(obj, d) => {\r\n          Object.assign(obj.position, globeEl.current.getCoords(d.lat, d.lng, d.alt));\r\n        }}\r\n       />\r\n\r\n  )\r\n})\r\n\r\nexport default ModelView\r\n"]},"metadata":{},"sourceType":"module"}